import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c as l,a as n,b as s,d as t,e}from"./app-MsA2k2kn.js";const c={},u=n("h1",{id:"python-python类型提示总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python-python类型提示总结","aria-hidden":"true"},"#"),s(" [python] Python类型提示总结")],-1),r={href:"https://docs.python.org/3/library/typing.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://fastapi.tiangolo.com/zh/python-types/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://zhuanlan.zhihu.com/p/519335398",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"类型提示的语法格式为：",-1),m=n("ul",null,[n("li",{初始值:""},"对于变量：{变量名}:{类型名} ="),n("li",{默认值:""},"对于函数参数：{参数名}:{类型名} ="),n("li",{类型名:""},"对于函数返回值：->")],-1),b=e(`<p>[toc]</p><h2 id="_1-类型提升" tabindex="-1"><a class="header-anchor" href="#_1-类型提升" aria-hidden="true">#</a> 1 类型提升</h2><p>类型提示的引入主要有以下几个方面的用途：</p><p><strong>1 提高代码可读性</strong></p><p>类型提示可以帮助其他开发人员更好地理解代码，特别是在处理大型代码库时。通过清晰地指定变量、函数参数和返回值的数据类型，开发人员可以更快地理解代码的含义和用途，从而更容易维护和修改代码。</p><p>如下所示。我们有一个名为 add 的函数，用于将两个数字相加并返回结果。以下是该函数的原始代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，该函数没有任何类型提示，因此在调用该函数时，我们必须自己去了解和检查每个参数的类型。这样会导致代码的可读性和可维护性变差，特别是在代码规模较大、涉及多个文件的情况下。为了改善这种情况，我们可以使用类型提示来明确指定每个参数的类型。以下是添加类型提示后的 <code>add</code> 函数的代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以清楚地看到函数 add 的参数和返回值都是整数类型。这使得代码更易于理解，也提高了代码的可靠性。</p><p><strong>2 检测类型错误</strong></p><p>Python 是一种动态语言，因此变量和函数参数的类型可以在运行时进行更改。但是，这也意味着开发人员容易在代码中引入类型错误。通过使用类型提示，开发人员可以在编译时检测到这些类型错误，并更早地发现和修复它们，从而减少代码错误和调试时间。</p>`,12),y={href:"http://mypy-lang.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/387535490",target:"_blank",rel:"noopener noreferrer"},g=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install mypy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，在代码中标注变量、函数参数和返回值的类型。运行以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mypy your_script.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的示例中，your_script.py是要检查的Python脚本。运行mypy工具后，它将检查Python脚本中的类型错误，并输出错误信息。</p><p><strong>3 提供自动补全和文档</strong></p><p>许多集成开发环境（IDE）和编辑器都可以使用类型提示来提供自动补全和代码文档。这可以帮助开发人员更快地编写代码，并提供关于函数参数和返回值的信息，以便更好地理解代码。要使用Python类型提示提供自动补全和文档，需要使用一个支持该功能的Python编辑器。比如一些流行的Python编辑器包括vscode、PyCharm和Sublime Text等。</p><p>以vscode为例，考虑一个整数相加函数，将结果保存在变量c中。如果加上类型提示，vscode插件将推断变量c的类型为 int，并提供代码补全和代码提示等功能。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[python] Python类型提示指北/img/img1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[python] Python类型提示指北/img/img2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,9),_={href:"https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring",target:"_blank",rel:"noopener noreferrer"},f=e(`<figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[python] Python类型提示指北/img/img3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>autoDocstring注释代码使用方法如下所示：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[python] Python类型提示指北/img/img4.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>按照以上方法，对于有无类型提示的注释结果如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;_summary_

    Args:
        a (_type_): _description_
        b (_type_): _description_

    Returns:
        _type_: _description_
    &quot;&quot;&quot;</span>
    c <span class="token operator">=</span> a <span class="token operator">+</span> b
    <span class="token keyword">return</span> c


<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;_summary_

    Args:
        a (int): _description_
        b (int): _description_

    Returns:
        int: _description_
    &quot;&quot;&quot;</span>
    c <span class="token operator">=</span> a <span class="token operator">+</span> b
    <span class="token keyword">return</span> c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-类型声明" tabindex="-1"><a class="header-anchor" href="#_2-类型声明" aria-hidden="true">#</a> 2 类型声明</h2><h3 id="_2-1-基本类型" tabindex="-1"><a class="header-anchor" href="#_2-1-基本类型" aria-hidden="true">#</a> 2.1 基本类型</h3><p>对于Python的内置基本类型 int、float、str 和 byte等，可以直接使用类型本身进行类型提示。如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 直接定义</span>
age<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># 声明后定义</span>
num<span class="token punctuation">:</span> <span class="token builtin">float</span>
num <span class="token operator">=</span> <span class="token number">2.0</span>

<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span>

<span class="token keyword">def</span> <span class="token function">is_even</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>

<span class="token keyword">def</span> <span class="token function">encode_data</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-嵌套类型" tabindex="-1"><a class="header-anchor" href="#_2-2-嵌套类型" aria-hidden="true">#</a> 2.2 嵌套类型</h3><p>对于容器数据结构，例如 list、tuple、dict 等，也可以直接使用类型本身进行类型提示。如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items<span class="token punctuation">:</span> <span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span>
info<span class="token punctuation">:</span> <span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在Python的容器数据结构中，每个元素都具有其自己的类型。虽然这种方法提供了灵活性，但是内部元素的类型无法受到限制，因此内部元素可以是任何类型（Any）。可以通过Python的typing标准库来声明这些类型及其元素类型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Tuple<span class="token punctuation">,</span> Dict<span class="token punctuation">,</span> Set

<span class="token comment"># 指定my_list变量是一个整数列表</span>
my_list<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token comment"># 指定my_tuple变量应该是一个按顺序包含整数、字符串和布尔值的元组</span>
my_tuple<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token comment"># 指定了my_dict变量是一个所有键为str类型，所有值为int类型的字典</span>
my_dict<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token comment"># 指定了my_set变量应该是一个浮点数集合</span>
my_set<span class="token punctuation">:</span> Set<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-自定义类型" tabindex="-1"><a class="header-anchor" href="#_2-3-自定义类型" aria-hidden="true">#</a> 2.3 自定义类型</h3><p>Python也支持对自定义类进行类型提示。下面是一个自定义类的类型提示示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

<span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> Person<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们定义了一个 Person 类，它有两个属性：name 和 age。在初始函数中，我们使用类型提示指定了这两个属性的类型。接下来，我们定义了一个 say_hello 函数，这个函数的参数是一个 Person 类型的对象，并且返回值是一个字符串。</p><p>对于numpy和pandas这种第三方库，也可以通过同样的方法进行类型提示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> cv2

<span class="token comment"># numpy</span>
<span class="token keyword">def</span> <span class="token function">add_arrays</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> b<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">:</span>
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>

<span class="token comment"># pandas</span>
<span class="token keyword">def</span> <span class="token function">filter_dataframe</span><span class="token punctuation">(</span>df<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">,</span> column<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">:</span>
    <span class="token keyword">return</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">]</span>

<span class="token comment"># opencv，opencv图像本身就是一个numpy数组结构</span>
<span class="token keyword">def</span> <span class="token function">resize_image</span><span class="token punctuation">(</span>img<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">:</span>
    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-复合类型" tabindex="-1"><a class="header-anchor" href="#_2-4-复合类型" aria-hidden="true">#</a> 2.4 复合类型</h3><h4 id="_2-4-1-union和optional" tabindex="-1"><a class="header-anchor" href="#_2-4-1-union和optional" aria-hidden="true">#</a> 2.4.1 Union和Optional</h4><p>Python的typing库也提供了Union类型用于表示多种类型中的一种，Optional类型用于表示可选类型。它们可以结合使用，以便更好地表示变量的类型。</p><p>例如，如果一个变量可以是整数或字符串类型，那么可以这样定义它的类型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Union

<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，x的类型为Union[int, str]，表示x可以是整数或字符串类型。</p><p>如果一个变量可以是整数类型或None类型，那么可以这样定义它的类型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional

<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Union和Optional类型可以结合使用。例如，如果一个变量可以是整数类型、字符串类型或None类型，那么可以这样定义它的类型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token punctuation">,</span> Union

<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，x的类型为Optional[Union[int, str]]，表示x可以是整数类型、字符串类型或None类型。</p><p>此外，在Python中，Union[X, Y] 表示变量的类型可以是 X 或 Y。因此，Optional[X] 实际上是 Union[X, None] 的简写形式。这种语法的好处是它可以使代码更简洁，因为我们只需要写一个类型而不是两个。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token punctuation">,</span> Union

<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> name <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello, stranger!&quot;</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span>

<span class="token keyword">def</span> <span class="token function">greet2</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> name <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello, stranger!&quot;</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码中，greet和greets函数是等价的。在第一个函数中，我们使用了 Optional[str] 来表示 name 可以是一个字符串或者是 None。在第二个函数中，我们使用了 Union[str, None] 来达到相同的效果。</p><h4 id="_2-4-2-generator和iterator" tabindex="-1"><a class="header-anchor" href="#_2-4-2-generator和iterator" aria-hidden="true">#</a> 2.4.2 Generator和Iterator</h4><p>在Python中，Generator和Iterator是非常常见的数据类型。Generator是一种函数，可以通过yield语句生成一个迭代器，而Iterator是一种对象，可以用于迭代元素序列。为了提高代码的可读性和可维护性，我们可以使用类型提示来指定Generator和Iterator的类型。</p><p>Generator类型提示使用Generator[ReturnType, SendType, ReturnType]语法，其中ReturnType指定返回值类型，SendType指定发送值类型，ReturnType指定生成器的类型。例如，下面是一个简单的Generator类型提示示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Generator

<span class="token keyword">def</span> <span class="token function">even_numbers</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Generator<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，even_numbers是一个Generator函数，返回类型是Generator[int, None, None]，该函数生成一个整数序列，其中每个偶数都是通过yield语句生成的。</p><p>Iterator类型提示使用Iterator[ElementType]语法，其中ElementType指定迭代器元素类型。例如，下面是一个简单的Iterator类型提示示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Iterator

<span class="token keyword">class</span> <span class="token class-name">MyIterator</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>current<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span>

    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Iterator<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self

    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>current <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> StopIteration
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>current <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>current
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们对MyIterator类进行了注释。使用了typing模块中的Iterator类来注释<code>__iter__()</code>方法的返回值类型。同时，我们对current和max属性也进行了注释，指定了它们的类型为int。在<code>__next__()</code>方法中，我们指定了返回值类型为int。</p><h4 id="_2-4-3-callable" tabindex="-1"><a class="header-anchor" href="#_2-4-3-callable" aria-hidden="true">#</a> 2.4.3 Callable</h4><p>Callable类型提示用于表示一个可调用对象，例如函数、类或对象等。从形式上来看，Callable类型提示接受两个或三个类型提示参数：第一个参数表示函数的参数类型，第二个参数表示函数的返回类型。下面是一个Callable类型提示的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable

<span class="token keyword">def</span> <span class="token function">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> func<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b

result <span class="token operator">=</span> <span class="token builtin">apply</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment"># 输出7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，apply函数接受一个名为func的参数，该参数是一个Callable类型，它指定了函数的两个整数参数和一个整数返回值。add函数满足这个条件，因此可以传递给apply函数，它会返回add(3, 4)的结果7。</p><h4 id="_2-4-4-any和noreturn" tabindex="-1"><a class="header-anchor" href="#_2-4-4-any和noreturn" aria-hidden="true">#</a> 2.4.4 Any和NoReturn</h4><p>Any类型表示一个任意类型，它可以用于函数参数、函数返回值和变量等。使用Any类型时，我们可以省略类型注释，使变量类型更加灵活。下面是一个使用Any类型的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Any

<span class="token keyword">def</span> <span class="token function">print_value</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

print_value<span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 &quot;Hello World&quot;</span>
print_value<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>           <span class="token comment"># 输出 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们定义了一个print_value函数，它接受一个任意类型的参数value，并将其打印出来。我们可以看到，我们可以将任何类型的值传递给print_value函数，包括字符串和整数。这使得我们的代码更加灵活。</p><p>NoReturn类型表示函数不会返回任何值。这个类型通常用于标识那些没有返回值的函数。下面是一个使用NoReturn类型的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> NoReturn

<span class="token keyword">def</span> <span class="token function">print_message</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> NoReturn<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;Error occurred&quot;</span><span class="token punctuation">)</span>

print_message<span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 &quot;Hello World&quot;，然后抛出异常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们定义了一个print_message函数，它接受一个字符串类型的参数message，并将其打印出来。然后，我们手动抛出了一个异常，这意味着函数不会返回任何值。我们可以使用NoReturn类型来明确地表示这一点。</p><h4 id="_2-4-5-其他" tabindex="-1"><a class="header-anchor" href="#_2-4-5-其他" aria-hidden="true">#</a> 2.4.5 其他</h4>`,54),w={href:"https://docs.python.org/3/library/typing.html",target:"_blank",rel:"noopener noreferrer"},x=e(`<h3 id="_2-5-类型提示的别名" tabindex="-1"><a class="header-anchor" href="#_2-5-类型提示的别名" aria-hidden="true">#</a> 2.5 类型提示的别名</h3><p>在类型提示中使用了过于复杂的类型，可以考虑将其定义为一个类型别名，然后在函数参数、返回值等处使用该类型别名。例如，如果你需要传递一个包含多个字段的字典作为函数参数，你可以使用Dict[str, Union[int, str, List[int]]]来表示该字典的类型。但是，这个类型过于复杂，不易于理解。你可以将其定义为一个类型别名，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict<span class="token punctuation">,</span> Union<span class="token punctuation">,</span> List

MyDict <span class="token operator">=</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">:</span> MyDict<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token comment"># Function body</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，你就可以在函数参数、返回值等处使用<code>MyDict</code>这个类型别名，使代码更加易读、易懂。</p><h2 id="_3-参考" tabindex="-1"><a class="header-anchor" href="#_3-参考" aria-hidden="true">#</a> 3 参考</h2>`,5),q={href:"https://docs.python.org/3/library/typing.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://fastapi.tiangolo.com/zh/python-types/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://zhuanlan.zhihu.com/p/519335398",target:"_blank",rel:"noopener noreferrer"},D={href:"http://mypy-lang.org/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://zhuanlan.zhihu.com/p/387535490",target:"_blank",rel:"noopener noreferrer"},T={href:"https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring",target:"_blank",rel:"noopener noreferrer"};function U(z,C){const a=o("ExternalLinkIcon");return i(),l("div",null,[u,n("p",null,[s("Python3.5 版本引入了类型提示（Type Hints），它允许开发者在代码中显式地声明变量、函数、方法等的类型信息。这种类型声明不会影响 Python 解释器的运行，但可以让 IDE 和静态分析工具更好地理解代码，同时提高代码的可读性和可维护性。然而，由于 Python 支持动态类型，类型提示并不能完全确保代码的正确性。本文仅介绍 Python 类型提示的初步使用。如果需要更详细的使用说明，请参考以下文章："),n("a",r,[s("typing"),t(a)]),s("、"),n("a",d,[s("Python 类型提示简介"),t(a)]),s("和"),n("a",k,[s("Type Hints 入门教程"),t(a)]),s("。")]),v,m,b,n("p",null,[n("a",y,[s("mypy"),t(a)]),s("是一个用于检查Python类型的静态类型检查器。它可以检测类型注释中的错误以及其他类型的错误。mypy使用说明可以参考："),n("a",h,[s("mypy简易教程"),t(a)]),s("。mypy需要首先输入以下命令安装：")]),g,n("p",null,[s("此外，还可以使用vscode的"),n("a",_,[s("autoDocstring"),t(a)]),s("生成带有类型提示的文档和注释。")]),f,n("p",null,[s("Python还支持更高级的类型提示。例如，可以使用Sequence来指定一个列表，使用TypedDict来指定一个带有特定键和值类型的字典。此外，Python还支持Literal类型提示，可以限制变量只能取特定的常量值。最近，Python3.8版本还增加了Protocol类型提示，允许指定类需要实现哪些方法和属性。这些类型提示用的不多，但是如果需要更精细的类型控制，可以参考官方文档："),n("a",w,[s("typing"),t(a)]),s("。")]),x,n("ul",null,[n("li",null,[n("a",q,[s("typing"),t(a)])]),n("li",null,[n("a",P,[s("Python 类型提示简介"),t(a)])]),n("li",null,[n("a",N,[s("Type Hints 入门教程"),t(a)])]),n("li",null,[n("a",D,[s("mypy"),t(a)])]),n("li",null,[n("a",I,[s("mypy简易教程"),t(a)])]),n("li",null,[n("a",T,[s("autoDocstring"),t(a)])])])])}const R=p(c,[["render",U],["__file","2023-05-10-_python_ Python类型提示总结.html.vue"]]);export{R as default};
