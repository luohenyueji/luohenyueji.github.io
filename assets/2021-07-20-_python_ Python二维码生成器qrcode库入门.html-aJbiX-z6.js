import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as i,c,a as n,b as a,d as e,e as t}from"./app-MsA2k2kn.js";const l={},r=n("h1",{id:"python-python二维码生成器qrcode库入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python-python二维码生成器qrcode库入门","aria-hidden":"true"},"#"),a(" [python] Python二维码生成器qrcode库入门")],-1),u={href:"https://github.com/lincolnloop/python-qrcode",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"_1-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-简介","aria-hidden":"true"},"#"),a(" 1 简介")],-1),m=n("p",null,"qrcode依赖于pillow，安装代码如下：",-1),k=n("blockquote",null,[n("p",null,"pip install qrcode[pil]")],-1),g=n("p",null,[n("strong",null,"什么是二维码QRCode？")],-1),h={href:"https://blog.csdn.net/wangguchao/article/details/85328655",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="_2-用法" tabindex="-1"><a class="header-anchor" href="#_2-用法" aria-hidden="true">#</a> 2 用法</h2><h3 id="_2-1-基础使用" tabindex="-1"><a class="header-anchor" href="#_2-1-基础使用" aria-hidden="true">#</a> 2.1 基础使用</h3><h4 id="_2-1-1-命令行使用" tabindex="-1"><a class="header-anchor" href="#_2-1-1-命令行使用" aria-hidden="true">#</a> 2.1.1 命令行使用</h4><p>从命令行，使用已安装的qr脚本：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>! qr <span class="token string">&quot;hello world!&quot;</span> <span class="token operator">&gt;</span> test1<span class="token punctuation">.</span>png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们可以在当前路径获得一个名为test1.png的二维码文件，图像宽高为290。图片显示代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> display
 
img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test1.png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;img size is {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 显示图片</span>
display<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>img size is (290, 290)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/qrcode/image/output_5_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h4 id="_2-1-2-python接口" tabindex="-1"><a class="header-anchor" href="#_2-1-2-python接口" aria-hidden="true">#</a> 2.1.2 Python接口</h4><p>在 Python 中，使用make快捷功能，也可以输出二维码图像，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> qrcode
<span class="token comment"># 构建二维码</span>
data <span class="token operator">=</span> <span class="token string">&#39;hello world!&#39;</span>
img <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token comment"># 显示图片格式，为qrcode.image.pil.PilImage</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 保存图片 </span>
img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&quot;test2.png&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;class &#39;qrcode.image.pil.PilImage&#39;&gt;
</code></pre><h4 id="_2-1-3-二维码解析" tabindex="-1"><a class="header-anchor" href="#_2-1-3-二维码解析" aria-hidden="true">#</a> 2.1.3 二维码解析</h4>`,14),_={href:"https://cli.im/deqr",target:"_blank",rel:"noopener noreferrer"},b=t(`<figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/qrcode/image/result.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-高级使用" tabindex="-1"><a class="header-anchor" href="#_2-2-高级使用" aria-hidden="true">#</a> 2.2 高级使用</h3><h4 id="_2-2-1-二维码自定义" tabindex="-1"><a class="header-anchor" href="#_2-2-1-二维码自定义" aria-hidden="true">#</a> 2.2.1 二维码自定义</h4><p>我们还可以通过在之前使用该QRCode函数创建的qr对象中添加一些属性来自定义QR 码的设计和结构。基本参数如下：</p><ul><li>version：一个1 到40之间的整数，用于控制 QR 码的大小（最小的版本1是一个21x21矩阵）。默认为None，表示代码自动确认该参数。</li><li>error_correction：用于二维码的纠错。qrcode 包中提供了以下四个常量： <ol><li>ERROR_CORRECT_L 大约可以纠正 7% 或更少的错误。</li><li>ERROR_CORRECT_M （默认）大约 15% 或更少的错误可以被纠正。</li><li>ERROR_CORRECT_Q 大约 25% 或更少的错误可以被纠正。</li><li>ERROR_CORRECT_H 大约可以纠正 30% 或更少的错误。</li></ol></li><li>box_size：控制二维码的每个“盒子”有多少像素，默认为10。</li><li>border：控制边框应该有多少个框厚（默认为 4，这是根据规范的最小值）。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> qrcode
qr <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>QRCode<span class="token punctuation">(</span>
    version<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
    error_correction<span class="token operator">=</span>qrcode<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>ERROR_CORRECT_L<span class="token punctuation">,</span>
    box_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>
    border<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token string">&quot;hello world!&quot;</span>
qr<span class="token punctuation">.</span>add_data<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
qr<span class="token punctuation">.</span>make<span class="token punctuation">(</span>fit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># fill_color和back_color分别控制前景颜色和背景颜色，支持输入RGB色，注意颜色更改可能会导致二维码扫描识别失败</span>
img <span class="token operator">=</span> qr<span class="token punctuation">.</span>make_image<span class="token punctuation">(</span>fill_color<span class="token operator">=</span><span class="token punctuation">(</span> <span class="token number">213</span> <span class="token punctuation">,</span> <span class="token number">143</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> back_color<span class="token operator">=</span><span class="token string">&quot;lightblue&quot;</span><span class="token punctuation">)</span>
display<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/qrcode/image/output_10_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h4 id="_2-2-2-二维码输出" tabindex="-1"><a class="header-anchor" href="#_2-2-2-二维码输出" aria-hidden="true">#</a> 2.2.2 二维码输出</h4><p>我们还可以将二维码可以导出为SVG图片。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> qrcode
<span class="token keyword">import</span> qrcode<span class="token punctuation">.</span>image<span class="token punctuation">.</span>svg
method <span class="token operator">=</span> <span class="token string">&#39;fragment&#39;</span>
<span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">&#39;basic&#39;</span><span class="token punctuation">:</span>
    <span class="token comment"># Simple factory, just a set of rects.</span>
    <span class="token comment"># 简单模式</span>
    factory <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>image<span class="token punctuation">.</span>svg<span class="token punctuation">.</span>SvgImage
<span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">&#39;fragment&#39;</span><span class="token punctuation">:</span>
    <span class="token comment"># Fragment factory (also just a set of rects)</span>
    <span class="token comment"># 碎片模式</span>
    factory <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>image<span class="token punctuation">.</span>svg<span class="token punctuation">.</span>SvgFragmentImage
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># Combined path factory, fixes white space that may occur when zooming</span>
    <span class="token comment"># 组合模式，修复缩放时可能出现的空白</span>
    factory <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>image<span class="token punctuation">.</span>svg<span class="token punctuation">.</span>SvgPathImage

img <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">,</span> image_factory<span class="token operator">=</span>factory<span class="token punctuation">)</span>

<span class="token comment"># 保存图片 </span>
img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&quot;test3.svg&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-二维码图像样式" tabindex="-1"><a class="header-anchor" href="#_2-2-3-二维码图像样式" aria-hidden="true">#</a> 2.2.3 二维码图像样式</h4><p>要将样式应用于QRCode，请使用StyledPilImage。这需要一个可选的module_drawers参数来控制二维码的形状，一个可选的color_mask参数来改变二维码的颜色，还有一个可选的embeded_image_path参数来嵌入图像。这些二维码并不能保证对所有的二维码识别器都有效，所以做一些实验并将纠错error_correction设置为高（尤其是嵌入图像时）。</p><p>python-qrcode提供的二维码的形状列表如下：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/qrcode/image/module_drawers.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>python-qrcode提供的二维码的颜色列表如下：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/qrcode/image/color_masks.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>具体使用代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> qrcode
<span class="token keyword">from</span> qrcode<span class="token punctuation">.</span>image<span class="token punctuation">.</span>styledpil <span class="token keyword">import</span> StyledPilImage
<span class="token keyword">from</span> qrcode<span class="token punctuation">.</span>image<span class="token punctuation">.</span>styles<span class="token punctuation">.</span>moduledrawers <span class="token keyword">import</span> RoundedModuleDrawer<span class="token punctuation">,</span>SquareModuleDrawer
<span class="token keyword">from</span> qrcode<span class="token punctuation">.</span>image<span class="token punctuation">.</span>styles<span class="token punctuation">.</span>colormasks <span class="token keyword">import</span> RadialGradiantColorMask<span class="token punctuation">,</span>SquareGradiantColorMask

<span class="token comment"># 纠错设置为高</span>
qr <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>QRCode<span class="token punctuation">(</span>error_correction<span class="token operator">=</span>qrcode<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>ERROR_CORRECT_H<span class="token punctuation">)</span>
<span class="token comment"># 如果想扫描二维码后跳转到网页，需要添加https://</span>
qr<span class="token punctuation">.</span>add_data<span class="token punctuation">(</span><span class="token string">&#39;https://www.baidu.com&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 修改二维码形状</span>
img_1 <span class="token operator">=</span> qr<span class="token punctuation">.</span>make_image<span class="token punctuation">(</span>image_factory<span class="token operator">=</span>StyledPilImage<span class="token punctuation">,</span> module_drawer<span class="token operator">=</span>RoundedModuleDrawer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 修改二维码颜色</span>
img_2 <span class="token operator">=</span> qr<span class="token punctuation">.</span>make_image<span class="token punctuation">(</span>image_factory<span class="token operator">=</span>StyledPilImage<span class="token punctuation">,</span> color_mask<span class="token operator">=</span>SquareGradiantColorMask<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 嵌入图像</span>
img_3 <span class="token operator">=</span> qr<span class="token punctuation">.</span>make_image<span class="token punctuation">(</span>image_factory<span class="token operator">=</span>StyledPilImage<span class="token punctuation">,</span> embeded_image_path<span class="token operator">=</span><span class="token string">&quot;lena.jpg&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 嵌入图像</span>
img_4 <span class="token operator">=</span> qr<span class="token punctuation">.</span>make_image<span class="token punctuation">(</span>image_factory<span class="token operator">=</span>StyledPilImage<span class="token punctuation">,</span> module_drawer<span class="token operator">=</span>SquareModuleDrawer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color_mask<span class="token operator">=</span>RadialGradiantColorMask<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> embeded_image_path<span class="token operator">=</span><span class="token string">&quot;lena.jpg&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>img_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/qrcode/image/output_15_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>img_2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/qrcode/image/output_16_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>img_3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/qrcode/image/output_17_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>img_4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/qrcode/image/output_18_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_3-参考" tabindex="-1"><a class="header-anchor" href="#_3-参考" aria-hidden="true">#</a> 3 参考</h2>`,27),y={href:"https://github.com/lincolnloop/python-qrcode",target:"_blank",rel:"noopener noreferrer"},f={href:"https://cli.im/deqr",target:"_blank",rel:"noopener noreferrer"},q={href:"https://blog.csdn.net/wangguchao/article/details/85328655",target:"_blank",rel:"noopener noreferrer"};function w(R,x){const s=p("ExternalLinkIcon");return i(),c("div",null,[r,n("p",null,[a("qrcode是二维码生成的Python开源库，官方地址为"),n("a",u,[a("python-qrcode"),e(s)])]),d,m,k,g,n("p",null,[a("快速响应码Quick Response Code（QRCode）是一种二维象形码，具有快速的可读性和较大的存储容量。 该码由在白色背景上以方形图案排列的黑色模块组成（可以更改颜色）。 编码的信息可以由任何类型的数据组成（例如，二进制、字母数字或汉字符号）。二维码能存储大量的数据，将所有数据存储为方形网格中的一系列像素。二维码详细的细节和原理见"),n("a",h,[a("二维码的生成细节和原理"),e(s)]),a("。")]),v,n("p",null,[a("如果想查看生成的二维码信息，可以用手机扫描二维码，或者使用"),n("a",_,[a("草料二维码解析器"),e(s)]),a("在线解析图片。解析结果如下图所示：")]),b,n("ul",null,[n("li",null,[n("a",y,[a("python-qrcode"),e(s)])]),n("li",null,[n("a",f,[a("草料二维码解析器"),e(s)])]),n("li",null,[n("a",q,[a("二维码的生成细节和原理"),e(s)])])])])}const S=o(l,[["render",w],["__file","2021-07-20-_python_ Python二维码生成器qrcode库入门.html.vue"]]);export{S as default};
