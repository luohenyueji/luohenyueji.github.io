import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as p,c as r,a as e,b as o,d as t,e as l}from"./app-MsA2k2kn.js";const c={},s=l('<h1 id="opencv实战-4-opencv中的颜色空间" tabindex="-1"><a class="header-anchor" href="#opencv实战-4-opencv中的颜色空间" aria-hidden="true">#</a> [OpenCV实战]4 OpenCV中的颜色空间</h1><p>在本教程中，我们将了解计算机视觉中常用的色彩空间，并将其用于基于颜色分割。我们还将用C++和Python共享演示代码。</p><p>在进行色彩分割时很多项目没有考虑到不同光照条件的影响，会严重影响结果。在许多计算机视觉应用中遇到这个问题，涉及基于颜色的分割，如肤色检测，交通灯识别等。所以构建一个强大的色彩检测系统是很有必要的。</p><p>文章结构如下：</p><ol><li><p>如何在OpenCV中读取图像并将其转换为不同的颜色空间，并查看每个颜色空间的不同通道为我们提供的新信息。</p></li><li><p>应用一个简单的颜色分割算法。</p></li></ol><h2 id="_1-不同的色彩空间" tabindex="-1"><a class="header-anchor" href="#_1-不同的色彩空间" aria-hidden="true">#</a> 1 不同的色彩空间</h2><p>在本节中，我们将介绍计算机视觉中使用的一些重要的色彩空间。我们不会描述它们背后的理论，我们只需要知道如何使用。</p><p>OpenCV颜色空间转换很简单，imread函数读取图像以BGR格式加载，cvtColor函数在不同的颜色空间之间进行转换。</p><p>下图是不同的照明下的立方体图像。第一张图像是在阳光明媚的室外条件下拍摄的，而第二张图像是在室内光线条件正常的情况下拍摄的。</p><figure><img src="https://www.learnopencv.com/wp-content/uploads/2017/05/two-cubes.png" alt="https://www.learnopencv.com/wp-content/uploads/2017/05/two-cubes.png" tabindex="0" loading="lazy"><figcaption>https://www.learnopencv.com/wp-content/uploads/2017/05/two-cubes.png</figcaption></figure><h3 id="_1-1-rgb-颜色空间" tabindex="-1"><a class="header-anchor" href="#_1-1-rgb-颜色空间" aria-hidden="true">#</a> <strong>1.1 RGB</strong> <strong>颜色空间</strong></h3><p>RGB颜色空间具有以下属性：</p><ol><li>它是一种加色空间，其中颜色通过红色R，绿色G和蓝色B的线性组合获得。</li><li>物体光照会影响该颜色空间各个通道值，三个颜色通道是具有相关性的。</li></ol><p>让我们将上面图像分成R，G和B分量并观察它们以更深入地了解色彩空间。</p><p>从下图可以看到如果你看蓝色通道，可以看到在室内光照条件下第二张图像中的魔方蓝色和白色部分看起来相似，但第一张图像有明显差异。这种不均匀性使得在该颜色空间中基于颜色的分割非常困难。此外，两个图像的值之间存在总体差异。因此RGB颜色空间存在颜色值分布不均匀以及色度和亮度混合在一起的问题。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]4 OpenCV中的颜色空间/1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-lab-色彩空间" tabindex="-1"><a class="header-anchor" href="#_1-2-lab-色彩空间" aria-hidden="true">#</a> <strong>1.2 Lab</strong> <strong>色彩空间</strong></h3><p>类似RGB空间，Lab也有三个图像通道。</p><p>L：亮度通道，表亮度。</p><p>a：颜色通道a，表示从绿色到洋红色的颜色。</p><p>b：颜色通道b，表示从蓝色到黄色的颜色。</p><p>Lab颜色空间与RGB颜色空间完全不同。在RGB颜色空间中，颜色信息被分成三个通道，但是相同的三个通道也包含亮度信息。另一方面，在Lab颜色空间中，L通道独立于颜色信息并仅只含亮度信息。另外两个通道编码颜色。</p><p>Lab颜色空间还具有以下特性：</p><ol><li>感知上均匀的色彩空间近似于我们如何感知色彩。</li><li>独立于设备（捕获或显示）。</li><li>广泛用于Adobe Photoshop。</li><li>通过复数变换方程与RGB颜色空间相关。</li></ol><p>OpenCV中读取图像，转换为Lab空间图像结果如下图所示：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]4 OpenCV中的颜色空间/2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>从图中可以清楚地看出，光照的变化主要影响l分量。</li><li>包含颜色信息的a和b分量，在光照的变化下没有经历大的变化。</li><li>绿色，橙色和红色（它们是a通道的主要颜色）的相应值在b通道中没有变化，同样地，蓝色和黄色（它们是b通道的主要颜色）在a通道中没有变化。</li></ol><h3 id="_1-3-ycrcb-颜色空间" tabindex="-1"><a class="header-anchor" href="#_1-3-ycrcb-颜色空间" aria-hidden="true">#</a> <strong>1.3 YCrCb</strong> <strong>颜色空间</strong></h3><p>YCrCb颜色空间源自RGB颜色空间，并具有以下三个成分。</p><p>通道Y：伽马校正后从RGB获得的亮度或亮度分量。</p><p>通道Cr：Cr=R-Y（红色成分与亮度成分Y的距离）。</p><p>通道Cb：Cb=B-Y（蓝色成分与亮度成分Y的距离）。</p><p>此颜色空间具有以下属性。</p><ol><li>将亮度和色度分量分成不同的通道。</li><li>主要用于电视传输的压缩（Cr和Cb组件）。</li><li>取决于设备。</li></ol><p>YCrCb颜色空间中分成其通道的两个图像如下所示：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]4 OpenCV中的颜色空间/3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于照度变化，可以针对强度和颜色分量对LAB进行类似的观察。与LAB相比，室外图像中红色和橙色之间的感知差异较小。白色在所有3个组件中发生了变化。</p><h3 id="_1-4-hsv-颜色空间" tabindex="-1"><a class="header-anchor" href="#_1-4-hsv-颜色空间" aria-hidden="true">#</a> <strong>1.4 HSV</strong> <strong>颜色空间</strong></h3><p>HSV颜色空间具有以下三个成分：</p><p>H色调，S饱和度，V明度。</p><p>HSV最大的特点是它只使用一个通道来描述颜色（H），这使得指定颜色变得非常直观。但是HSV色彩取决于设备。</p><p>两个图像的H，S和V分量如下所示。</p><p>从下图可以看到</p><p>H分量在两个图像中非常相似，这表明即使在光照变化下颜色信息也是完整的。</p><p>两个图像中的S分量也非常相似。</p><p>V分量表示亮度，因此它会因照明变化而发生变化。</p><p>红色室外和室内图像的值之间存在巨大差异。这是因为H值是以角度表示红色表示起始角度。因此它可能会取角度 [300,360]和[0,60]之间的值。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]4 OpenCV中的颜色空间/4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-如何使用这些颜色空间进行分割" tabindex="-1"><a class="header-anchor" href="#_2-如何使用这些颜色空间进行分割" aria-hidden="true">#</a> <strong>2</strong> <strong>如何使用这些颜色空间进行分割</strong></h2><p>现在我们已经了解了不同的颜色空间，让我们首先尝试使用它们来检测魔方中的绿色。</p><h3 id="_2-1-获取特定颜色的颜色值" tabindex="-1"><a class="header-anchor" href="#_2-1-获取特定颜色的颜色值" aria-hidden="true">#</a> 2.1 获取特定颜色的颜色值</h3><p>找到每个颜色空间的绿色值的近似范围。通过获取每个像素的所有颜色空间的值，如下所示：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]4 OpenCV中的颜色空间/5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-应用分段阈值" tabindex="-1"><a class="header-anchor" href="#_2-2-应用分段阈值" aria-hidden="true">#</a> 2.2 应用分段阈值</h3><p>该部分就不叙述了，详情见参考，实际用处不大。只是应用inRange函数选择合适的阈值分割图像而已。在实际中，通过颜色分割图像一般效果很差。建议不要使用，了解下就行了。</p><h2 id="_3-参考" tabindex="-1"><a class="header-anchor" href="#_3-参考" aria-hidden="true">#</a> 3 参考</h2>',56),h={href:"https://www.learnopencv.com/color-spaces-in-opencv-cpp-python/",target:"_blank",rel:"noopener noreferrer"};function d(g,_){const a=i("ExternalLinkIcon");return p(),r("div",null,[s,e("ul",null,[e("li",null,[e("a",h,[o(" https://www.learnopencv.com/color-spaces-in-opencv-cpp-python/"),t(a)])])])])}const f=n(c,[["render",d],["__file","2019-03-06-_OpenCV实战_4 OpenCV中的颜色空间.html.vue"]]);export{f as default};
