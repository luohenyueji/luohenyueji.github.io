import{_ as s,c as a,a as n,o as l}from"./app-TQoR7mvJ.js";const e={};function t(p,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="常用工具-dlib编译调用指南" tabindex="-1"><a class="header-anchor" href="#常用工具-dlib编译调用指南"><span>[常用工具] dlib编译调用指南</span></a></h1><p>dlib是一个C++工具包（DLIB中也有Python接口，但是主要编程语言为C++），包含绝大多数常用的机器学习算法，许多图像处理算法和深度学习算法，被工业界和学术界广泛应用于机器人、嵌入式设备、移动电话和大型高性能计算环境等领域。dlib的开源许可允许您在任何应用程序中免费使用它。在工程实践中，dlib通常和OpenCV结合使用，OpenCV提供图像处理算法，dlib提供机器学习算法。对于从事计算机视觉行业的人，非常推荐学习使用dlib。本文主要讲述dlib在Windows（win10）和linux(ubuntu18.04)下面向C++的编译安装调用。dlib具体介绍见其官网<a href="http://dlib.net/" target="_blank" rel="noopener noreferrer">dlib官网</a>。</p><h2 id="_1-资源" tabindex="-1"><a class="header-anchor" href="#_1-资源"><span>1 资源</span></a></h2><p>在dlib的github仓库下载对应版本文件。链接地址为：<a href="https://github.com/davisking/dlib" target="_blank" rel="noopener noreferrer">dlib</a>。此外，在使用dlib中需要使用dlib提供的模型，下载地址见<a href="https://github.com/davisking/dlib-models" target="_blank" rel="noopener noreferrer">dlib-models</a>。如果网速太慢，可以看看gitee备份。地址为：<a href="https://gitee.com/luohenyueji/dlib" target="_blank" rel="noopener noreferrer">dlib-gitee</a>和<a href="https://gitee.com/luohenyueji/dlib-models" target="_blank" rel="noopener noreferrer">dlib-models-gitee</a>。</p><p>本文判断dlib是否成功编译的示例代码为dlib\\examples目录下的3d_point_cloud_ex.cpp。调用该示例代码后会可视化一个简单的3维点云数据。 代码如下：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// The contents of this file are in the public domain. See LICENSE_FOR_EXAMPLE_PROGRAMS.txt</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    This is an example illustrating the use of the perspective_window tool</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    in the dlib C++ Library.  It is a simple tool for displaying 3D point </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    clouds on the screen.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;dlib/gui_widgets.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;dlib/image_transforms.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;cmath&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> dlib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ----------------------------------------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Let&#39;s make a point cloud that looks like a 3D spiral.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">perspective_window::overlay_dot</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> points;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dlib::rand rnd;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.001</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Get a point on a spiral</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        dlib::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;double&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i),</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i),i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Now add some random noise to it</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        dlib::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;double&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> temp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">rnd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get_random_gaussian</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                                  rnd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get_random_gaussian</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                                  rnd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get_random_gaussian</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        val </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> temp</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Pick a color based on how far we are along the spiral</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        rgb_pixel color </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> colormap_jet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // And add the point to the list of points we will display</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        points</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push_back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">perspective_window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">overlay_dot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(val, color));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Now finally display the point cloud.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    perspective_window win;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    win</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set_title</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;perspective_window 3D point cloud&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    win</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add_overlay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(points);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    win</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wait_until_closed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//  ----------------------------------------------------------------------------</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-windows下c-编译安装调用dlib" tabindex="-1"><a class="header-anchor" href="#_2-windows下c-编译安装调用dlib"><span>2 Windows下C++编译安装调用dlib</span></a></h2><p>Windows下的编译使用很简单，不需要其他的额外安装库，直接拉取dlib的仓库就行了。本文将dlib仓库放在D:\\packages\\dlib路径下，然后通过cmake和vs2017编译使用dlib。这一部分参考文章<a href="https://blog.csdn.net/Feeryman_Lee/article/details/103203152" target="_blank" rel="noopener noreferrer">【C++】VS2019+Dlib安装及整合详细步骤</a>。</p><h3 id="_2-1-编译" tabindex="-1"><a class="header-anchor" href="#_2-1-编译"><span>2.1 编译</span></a></h3><p><strong>step1</strong></p><p>在D:\\packages\\dlib路径下创建build文件夹和install文件夹，build文件夹用于存放相关编译数据，install保存最后需要调用的生成文件。文件结构如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/1.jpg" alt="" loading="lazy"><strong>step2</strong></p><p>配置dlib库。打开cmake-gui，配置dlib库。cmake安装地址为：<a href="https://cmake.org/download/" target="_blank" rel="noopener noreferrer">cmake</a>。打开cmake-gui后设置源代码目录地址和生成文件地址，点击configure。如图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/2.jpg" alt="" loading="lazy"> 然后配置编译器，选择对应的编译器版本，再选择编译平台版本x64。最后点击finish，cmake将会自动编译文件。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/3.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在编译过程会出现找不到cuda的情况，忽视就行了。然后注意将指定的安装目录CMAKE_INSTALL_PREFIX这一项改为D:\\packages\\dlib\\install。然后再点击configure，如果没有标红，点击generate。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/4.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>step3</strong></p><p>生成相关文件，generate成功后打开OpenProject即可，这样就会打开vs2017。 如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/5.jpg" alt="" loading="lazy"> 打开后的vs2017界面如下图所示，确定编译平台为debug/x64，然后点击生成-生成解决方法即可，如下图所示。这样的好处是知道哪些模块生成失败。如果有生成译错误，检查即可。这一过程约3分钟，不同机器时间不一样。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/6.jpg" alt="" loading="lazy"> 生成成功后，如下图所示。可以有生成跳过，但是不能有生成失败。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/7.jpg" alt="" loading="lazy"></p><p>如果生成后没有失败的，选择解决方案-INSTALL-仅用于项目-仅生成INSTALL，如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/8.jpg" alt="" loading="lazy"></p><p>此外以上操作只能生成dlib Debug版本。Release版本需要修改配置平台，重复以上操作。如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/9.jpg" alt="" loading="lazy"></p><p>最后如果install文件夹中有include文件夹和lib文件夹，表明编译过程成功。如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/10.jpg" alt="" loading="lazy"></p><p><strong>在windows平台下，某些情况下dlib会使用libjpeg，libpng模块，可能会出现链接libjpeg错误的情况。如果你使用的是anaconda，dlib会自动链接anconda的libjpeg，libpng模块。这些模块是32位的，你只能用x86的dlib版本，否则出错。如果是想用x64平台，需要自己编译第三方模块的x64版本，比如libpng，libjpeg，zlib。github搜索这些模块，然后编译后。用visual studio的命令行开发工具，进入build目录，自行指定libjpeg等链接文件，再进行编译。其中dlib要链接的第三方库自行指定目录（目前看来这一种解决办法），具体命令如下：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span># Visual Studio 15 2017指vs2017，vs2015用Visual Studio 14 2015，vs2019用Visual Studio 16 2019</span></span>
<span class="line"><span># -DCMAKE_INSTALL_PREFIX=../instal 编译文件安装目录</span></span>
<span class="line"><span>cmake -G &quot;Visual Studio 15 2017&quot; -DJPEG_INCLUDE_DIR=..\\dlib\\external\\libjpeg -DJPEG_LIBRARY=..\\dlib\\external\\jpeg.lib -DPNG_PNG_INCLUDE_DIR=..\\dlib\\external\\libpng -DPNG_LIBRARY_RELEASE=..\\dlib\\external\\libpng.lib -DZLIB_INCLUDE_DIR=..\\dlib\\external\\zlib -DZLIB_LIBRARY_RELEASE=..\\dlib\\external\\z.lib -DDLIB_GIF_SUPPORT=OFF -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_GENERATOR_PLATFORM=x64 ..</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 编译debug版本</span></span>
<span class="line"><span>cmake --build . --target INSTALL</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 编译release版本</span></span>
<span class="line"><span>cmake --build . --config Release --target INSTALL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-配置与使用" tabindex="-1"><a class="header-anchor" href="#_2-2-配置与使用"><span>2.2 配置与使用</span></a></h3><p>新建vs2017项目，然后选择属性管理器，新建属性列表dlib如下图所示。这样该dlib属性列表以后可以重复导入使用，不需要每次新建工程都配置。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/11.jpg" alt="" loading="lazy"> 修改Release|X64模式下的dlib属性，修改VC++目录下的可执行目录，库目录。如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/12.jpg" alt="" loading="lazy"></p><p>包含目录设置如下，添加头文件：</p><blockquote><p>D:\\packages\\dlib\\install\\include</p></blockquote><p>库目录设置如下：</p><blockquote><p>D:\\packages\\dlib\\install\\lib</p></blockquote><p>然后修改链接器-输入-附加依赖项，如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/13.jpg" alt="" loading="lazy"></p><p>附加依赖项设置如下。注意不同版本dlib编译生成的lib不一样，注意区分，如果是debug就调用相应的debug版本，都在install\\lib目录下。</p><blockquote><p>dlib19.22.99_release_64bit_msvc1916.lib</p></blockquote><p>然后调用本文在第一节提到的示例代码3d_point_cloud_ex.cpp文件，结果如下图所示，就是一个展示3维点云的代码，可以拖动或放大缩小图形。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[dlib] dlib编译调用指南/image/14.jpg" alt="" loading="lazy"></p><h2 id="_3-ubuntu下c-编译安装调用dlib" tabindex="-1"><a class="header-anchor" href="#_3-ubuntu下c-编译安装调用dlib"><span>3 Ubuntu下C++编译安装调用dlib</span></a></h2><h3 id="_3-1-编译" tabindex="-1"><a class="header-anchor" href="#_3-1-编译"><span>3.1 编译</span></a></h3><p>ubuntu下编译使用dlib比windows下稍微复杂，因为ubuntu缺少一些dlib所需要的库，有时会出现莫名其妙的错误，一般来说都是缺少图形显示库，比如linux下dlib需要x11图像化界面（windows不需要，其他系统图像化界面可能不一样），所以先安装x11。如果不安装可能会出现X11相关错误。这一部分参考文章<a href="https://blog.csdn.net/qq_34106574/article/details/85626465" target="_blank" rel="noopener noreferrer">ubuntu下使用 dlib</a>和<a href="https://askubuntu.com/questions/526848/cmake-cant-find-x11" target="_blank" rel="noopener noreferrer">cmake-cant-find-x11</a></p><blockquote><p>sudo apt-get install libx11-dev</p></blockquote><p>然后进入dlib根目录，输入以下命令：</p><blockquote><p>mkdir build; cd build; cmake .. -DUSE_AVX_INSTRUCTIONS=1; make -j12</p></blockquote><p>上述命令会编译AVX，来加速CPU运行，如果出现错误使用以下命令编译：</p><blockquote><p>mkdir build; cd build; cmake ..; make -j12</p></blockquote><h3 id="_3-2-配置与使用" tabindex="-1"><a class="header-anchor" href="#_3-2-配置与使用"><span>3.2 配置与使用</span></a></h3><p>新建一个文件夹dlib-test，将3d_point_cloud_ex.cpp复制到该文件夹。进入该文件夹，新建CMakeList.txt文件，CMakeList.txt内容如下。注意CMake文件链接dlib库的路径地址</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cmake_minimum_required(VERSION 2.8.12)</span></span>
<span class="line"><span># 工程名</span></span>
<span class="line"><span>project(dlib_test)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SET(CMAKE_CXX_FLAGS &quot;\${CMAKE_CXX_FLAGS} -std=c++11 -O2 -DDLIB_JPEG_SUPPORT&quot;)</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>IF(CMAKE_CXX_COMPILER_ID STREQUAL &quot;Clang&quot;)</span></span>
<span class="line"><span>  SET(CMAKE_CXX_FLAGS &quot;\${CMAKE_CXX_FLAGS} -Weverything&quot;)</span></span>
<span class="line"><span>ELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL &quot;GNU&quot;)</span></span>
<span class="line"><span>  SET(CMAKE_CXX_FLAGS &quot;\${CMAKE_CXX_FLAGS} -Wall -Wextra&quot;)</span></span>
<span class="line"><span>ENDIF()</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 包含OpenCV</span></span>
<span class="line"><span>find_package(OpenCV REQUIRED)</span></span>
<span class="line"><span>if (OpenCV_FOUND)</span></span>
<span class="line"><span>   include_directories(\${OpenCV_INCLUDE_DIRS})</span></span>
<span class="line"><span>   message(&quot;OpenCV found&quot;)</span></span>
<span class="line"><span>endif()</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 包含X11</span></span>
<span class="line"><span>find_package(X11 REQUIRED)</span></span>
<span class="line"><span>if (X11_FOUND)</span></span>
<span class="line"><span>   include_directories(\${X11_INCLUDE_DIR})</span></span>
<span class="line"><span>   message(&quot;X11 found&quot;)</span></span>
<span class="line"><span>endif()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#  添加dlib</span></span>
<span class="line"><span>include_directories(/home/{yourpath}/dlib)</span></span>
<span class="line"><span>link_directories(/home/{yourpath}/dlib/build/dlib/)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 添加代码</span></span>
<span class="line"><span>add_executable(dlib_test 3d_point_cloud_ex.cpp)</span></span>
<span class="line"><span># 链接库</span></span>
<span class="line"><span># libdlib.a - lpthread - lX11分别表示链接dlib，多线程，X11</span></span>
<span class="line"><span>target_link_libraries(dlib_test \${OpenCV_INCLUDE_LIBS} \${X11_LIBRARIES} libdlib.a -lpthread -lX11)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后输入以下命令，即可编译运行示例代码：</p><blockquote><p>mkdir build; cd build; cmake ..; make -j12; ./dlib_test</p></blockquote><p>如果出现第二节的三维点云图形，表明dlib安装成功。</p><h2 id="_4-python安装调用dlib" tabindex="-1"><a class="header-anchor" href="#_4-python安装调用dlib"><span>4 Python安装调用dlib</span></a></h2><p>通常直接用pip install dlib会出错，所以需要安装一系列的库,主要是cmake、Boost。具体如下： <strong>windows</strong>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pip install cmake</span></span>
<span class="line"><span>pip install boost</span></span>
<span class="line"><span>pip install dlib</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果发现编译失败，看看<a href="https://www.jianshu.com/p/d2f37cea55be" target="_blank" rel="noopener noreferrer">python--3.8安装dlib</a>，直接通过whl包安装dlib也行</p><p><strong>linux</strong>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sudo apt-get install libx11-dev</span></span>
<span class="line"><span>sudo apt-get install libboost-all-dev</span></span>
<span class="line"><span>sudo apt-get install cmake</span></span>
<span class="line"><span>python3 -m pip install dlib</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装成功后，在python环境import dlib即表明安装成功，当然也可以编译安装，具体步骤见官方仓库文档。</p><h2 id="_5-参考" tabindex="-1"><a class="header-anchor" href="#_5-参考"><span>5 参考</span></a></h2><ul><li><a href="http://dlib.net/" target="_blank" rel="noopener noreferrer">dlib官网</a></li><li><a href="https://github.com/davisking/dlib" target="_blank" rel="noopener noreferrer">dlib</a></li><li><a href="https://github.com/davisking/dlib-models" target="_blank" rel="noopener noreferrer">dlib-models</a></li><li><a href="https://gitee.com/luohenyueji/dlib" target="_blank" rel="noopener noreferrer">dlib-gitee</a></li><li><a href="https://gitee.com/luohenyueji/dlib-models" target="_blank" rel="noopener noreferrer">dlib-models-gitee</a></li><li><a href="https://blog.csdn.net/Feeryman_Lee/article/details/103203152" target="_blank" rel="noopener noreferrer">【C++】VS2019+Dlib安装及整合详细步骤</a></li><li><a href="https://blog.csdn.net/qq_34106574/article/details/85626465" target="_blank" rel="noopener noreferrer">ubuntu下使用 dlib</a></li><li><a href="https://askubuntu.com/questions/526848/cmake-cant-find-x11" target="_blank" rel="noopener noreferrer">cmake-cant-find-x11</a></li></ul>`,55)]))}const r=s(e,[["render",t],["__file","2021-04-23-_常用工具_ dlib编译调用指南.html.vue"]]),h=JSON.parse('{"path":"/blog/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/2021-04-23-_%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7_%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97.html","title":"[常用工具] dlib编译调用指南","lang":"zh-CN","frontmatter":{"date":"2021-04-23T20:07:59.000Z","category":["常用工具"],"tag":["常用工具","机器学习","图像处理"],"description":"[常用工具] dlib编译调用指南 dlib是一个C++工具包（DLIB中也有Python接口，但是主要编程语言为C++），包含绝大多数常用的机器学习算法，许多图像处理算法和深度学习算法，被工业界和学术界广泛应用于机器人、嵌入式设备、移动电话和大型高性能计算环境等领域。dlib的开源许可允许您在任何应用程序中免费使用它。在工程实践中，dlib通常和Op...","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/2021-04-23-_%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7_%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[常用工具] dlib编译调用指南"}],["meta",{"property":"og:description","content":"[常用工具] dlib编译调用指南 dlib是一个C++工具包（DLIB中也有Python接口，但是主要编程语言为C++），包含绝大多数常用的机器学习算法，许多图像处理算法和深度学习算法，被工业界和学术界广泛应用于机器人、嵌入式设备、移动电话和大型高性能计算环境等领域。dlib的开源许可允许您在任何应用程序中免费使用它。在工程实践中，dlib通常和Op..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/1.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"常用工具"}],["meta",{"property":"article:tag","content":"机器学习"}],["meta",{"property":"article:tag","content":"图像处理"}],["meta",{"property":"article:published_time","content":"2021-04-23T20:07:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[常用工具] dlib编译调用指南\\",\\"image\\":[\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/1.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/2.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/3.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/4.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/5.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/6.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/7.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/8.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/9.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/10.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/11.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/12.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/13.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5Bdlib%5D%20dlib%E7%BC%96%E8%AF%91%E8%B0%83%E7%94%A8%E6%8C%87%E5%8D%97/image/14.jpg\\"],\\"datePublished\\":\\"2021-04-23T20:07:59.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"1 资源","slug":"_1-资源","link":"#_1-资源","children":[]},{"level":2,"title":"2 Windows下C++编译安装调用dlib","slug":"_2-windows下c-编译安装调用dlib","link":"#_2-windows下c-编译安装调用dlib","children":[{"level":3,"title":"2.1 编译","slug":"_2-1-编译","link":"#_2-1-编译","children":[]},{"level":3,"title":"2.2 配置与使用","slug":"_2-2-配置与使用","link":"#_2-2-配置与使用","children":[]}]},{"level":2,"title":"3 Ubuntu下C++编译安装调用dlib","slug":"_3-ubuntu下c-编译安装调用dlib","link":"#_3-ubuntu下c-编译安装调用dlib","children":[{"level":3,"title":"3.1 编译","slug":"_3-1-编译","link":"#_3-1-编译","children":[]},{"level":3,"title":"3.2 配置与使用","slug":"_3-2-配置与使用","link":"#_3-2-配置与使用","children":[]}]},{"level":2,"title":"4 Python安装调用dlib","slug":"_4-python安装调用dlib","link":"#_4-python安装调用dlib","children":[]},{"level":2,"title":"5 参考","slug":"_5-参考","link":"#_5-参考","children":[]}],"git":{},"readingTime":{"minutes":8.48,"words":2544},"filePathRelative":"blog/常用工具/2021-04-23-[常用工具] dlib编译调用指南.md","localizedDate":"2021年4月24日","excerpt":"\\n<p>dlib是一个C++工具包（DLIB中也有Python接口，但是主要编程语言为C++），包含绝大多数常用的机器学习算法，许多图像处理算法和深度学习算法，被工业界和学术界广泛应用于机器人、嵌入式设备、移动电话和大型高性能计算环境等领域。dlib的开源许可允许您在任何应用程序中免费使用它。在工程实践中，dlib通常和OpenCV结合使用，OpenCV提供图像处理算法，dlib提供机器学习算法。对于从事计算机视觉行业的人，非常推荐学习使用dlib。本文主要讲述dlib在Windows（win10）和linux(ubuntu18.04)下面向C++的编译安装调用。dlib具体介绍见其官网<a href=\\"http://dlib.net/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">dlib官网</a>。</p>","autoDesc":true}');export{r as comp,h as data};
