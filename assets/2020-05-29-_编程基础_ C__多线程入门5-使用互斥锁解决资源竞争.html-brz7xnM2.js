const t=JSON.parse('{"key":"v-f93d8c72","path":"/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/2020-05-29-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A85-%E4%BD%BF%E7%94%A8%E4%BA%92%E6%96%A5%E9%94%81%E8%A7%A3%E5%86%B3%E8%B5%84%E6%BA%90%E7%AB%9E%E4%BA%89.html","title":"[编程基础] C++多线程入门5-使用互斥锁解决资源竞争","lang":"zh-CN","frontmatter":{"date":"2020-05-29T16:56:08.000Z","category":["编程基础"],"tag":["编程基础"],"description":"[编程基础] C++多线程入门5-使用互斥锁解决资源竞争 原始C++标准仅支持单线程编程。新的C++标准（称为C++11或C++0x）于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++11标准。 5 使用互斥锁解决资源竞争 在本文中，我们将讨论如何使用互斥锁来保护多线程环境中的共享数据并避免资源竞争。为了解决多线程环境中的资源竞争，我们需要互斥锁，即每个线程都需要在修改或读取共享数据之前锁定互斥锁，并且在修改数据之后，每个线程都应解锁互斥锁。 5.1 std::mutex","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/2020-05-29-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A85-%E4%BD%BF%E7%94%A8%E4%BA%92%E6%96%A5%E9%94%81%E8%A7%A3%E5%86%B3%E8%B5%84%E6%BA%90%E7%AB%9E%E4%BA%89.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[编程基础] C++多线程入门5-使用互斥锁解决资源竞争"}],["meta",{"property":"og:description","content":"[编程基础] C++多线程入门5-使用互斥锁解决资源竞争 原始C++标准仅支持单线程编程。新的C++标准（称为C++11或C++0x）于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++11标准。 5 使用互斥锁解决资源竞争 在本文中，我们将讨论如何使用互斥锁来保护多线程环境中的共享数据并避免资源竞争。为了解决多线程环境中的资源竞争，我们需要互斥锁，即每个线程都需要在修改或读取共享数据之前锁定互斥锁，并且在修改数据之后，每个线程都应解锁互斥锁。 5.1 std::mutex"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"落痕月极"}],["meta",{"property":"article:tag","content":"编程基础"}],["meta",{"property":"article:published_time","content":"2020-05-29T16:56:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[编程基础] C++多线程入门5-使用互斥锁解决资源竞争\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-29T16:56:08.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"5 使用互斥锁解决资源竞争","slug":"_5-使用互斥锁解决资源竞争","link":"#_5-使用互斥锁解决资源竞争","children":[{"level":3,"title":"5.1 std::mutex","slug":"_5-1-std-mutex","link":"#_5-1-std-mutex","children":[]},{"level":3,"title":"5.2 std::lock_guard","slug":"_5-2-std-lock-guard","link":"#_5-2-std-lock-guard","children":[]},{"level":3,"title":"5.3 参考","slug":"_5-3-参考","link":"#_5-3-参考","children":[]}]}],"git":{},"readingTime":{"minutes":4.56,"words":1367},"filePathRelative":"blog/编程基础/C++多线程入门/2020-05-29-[编程基础] C++多线程入门5-使用互斥锁解决资源竞争.md","localizedDate":"2020年5月30日","excerpt":"<h1> [编程基础] C++多线程入门5-使用互斥锁解决资源竞争</h1>\\n<p>原始C++标准仅支持单线程编程。新的C++标准（称为C++11或C++0x）于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++11标准。</p>\\n<h2> 5 使用互斥锁解决资源竞争</h2>\\n<p>在本文中，我们将讨论如何使用互斥锁来保护多线程环境中的共享数据并避免资源竞争。为了解决多线程环境中的资源竞争，我们需要互斥锁，即每个线程都需要在修改或读取共享数据之前锁定互斥锁，并且在修改数据之后，每个线程都应解锁互斥锁。</p>\\n<h3> 5.1 std::mutex</h3>","autoDesc":true}');export{t as data};
