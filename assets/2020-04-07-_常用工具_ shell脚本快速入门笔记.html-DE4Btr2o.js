import{_ as n,c as a,a as e,o as i}from"./app-TQoR7mvJ.js";const l={};function d(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="常用工具-shell脚本快速入门笔记" tabindex="-1"><a class="header-anchor" href="#常用工具-shell脚本快速入门笔记"><span>[常用工具] shell脚本快速入门笔记</span></a></h1><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但要知道，shell 和 shell script 是两个不同的概念。</p><h2 id="_1-变量的定义和使用" tabindex="-1"><a class="header-anchor" href="#_1-变量的定义和使用"><span>1 变量的定义和使用</span></a></h2><h3 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数"><span>常用函数</span></a></h3><table><thead><tr><th>形式</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>#</td><td>注释</td><td></td></tr><tr><td>echo</td><td>用于向窗口输出文本</td><td></td></tr><tr><td>$0</td><td>显示当前程序的名称</td><td></td></tr><tr><td>$*</td><td>显示所有输入的参数</td><td></td></tr><tr><td>$n</td><td>显示程序输入第n个参数</td><td>如输入n=1，表示输入的第一个参数</td></tr><tr><td>$#</td><td>显示输入参数的个数</td><td></td></tr><tr><td>$?</td><td>显示命令执行的状态</td><td>返回0代表成功，返回其他代表失败</td></tr></tbody></table><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>在linux命令行下输入以下命令。打印出/bin/bash</p><blockquote><p>echo $Bash</p></blockquote><p>通过建立demo.sh文件来建立shell脚本。shell中第一行一般都是#！/bin/bash表示引入环境，其他时候#表示注释。shell中分为环境变量和局部变量。常用变量定义如使用具体如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 打印hello world</span></span>
<span class="line"><span>echo &quot;hello world!&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 定义变量,=左右不能有空格:</span></span>
<span class="line"><span>A=10</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 通过$引用变量</span></span>
<span class="line"><span>echo $A</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 输出当前路径</span></span>
<span class="line"><span>echo $PWD</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hello world!</span></span>
<span class="line"><span>10</span></span>
<span class="line"><span>/home/hello/test/makes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命令行下通过两种方式来执行demo.sh文件</p><ol><li>需要获得linux文件权限</li></ol><blockquote><p>chmod 777 demo.sh ./demo.sh</p></blockquote><ol start="2"><li>不需要权限</li></ol><blockquote><p>/bin/bash demo.sh</p></blockquote><h3 id="常用变量" tabindex="-1"><a class="header-anchor" href="#常用变量"><span>常用变量</span></a></h3><p>shell中还有许多常用变量，在demo.sh中添加以下内容</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 输出当前文件名称</span></span>
<span class="line"><span>echo $0</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示从命令行传入的第一个参数，空格分界</span></span>
<span class="line"><span>echo $1</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示从命令行传入的第二个参数</span></span>
<span class="line"><span>echo $2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 输出命令环境变量</span></span>
<span class="line"><span></span></span>
<span class="line"><span># $输出字符，需要转义</span></span>
<span class="line"><span># 显示命令执行的状态</span></span>
<span class="line"><span>echo &quot;本文件输入\\$结果为： $?&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示输入参数的个数</span></span>
<span class="line"><span>echo &quot;本文件输入#结果为： $#&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示所有输入的参数</span></span>
<span class="line"><span>echo &quot;本文件输入*结果为： $*&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令行输入./demo.sh param1 param2，输出结果为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>./demo.sh</span></span>
<span class="line"><span>param1</span></span>
<span class="line"><span>param2</span></span>
<span class="line"><span>本文件输入$结果为： 0</span></span>
<span class="line"><span>本文件输入#结果为： 2</span></span>
<span class="line"><span>本文件输入*结果为： param1 param2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然也可以在命令行直接shell变量。如下命令命令行输入， 返回表示变量0表示执行成功</p><blockquote><p>echo 123 $?<br> 输出 123 0</p></blockquote><p>但是在命令行中直接输入以下命令echo $?，表示命令行输入上一个命令是否成功。会返回非0值，表示执行失败</p><blockquote><p>echo $? 输出 127</p></blockquote><h2 id="_2-循环与文件读写" tabindex="-1"><a class="header-anchor" href="#_2-循环与文件读写"><span>2 循环与文件读写</span></a></h2><h3 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h3><p>shell脚本中for循环的语法如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>for 变量 in 字符串</span></span>
<span class="line"><span>do </span></span>
<span class="line"><span>    语句</span></span>
<span class="line"><span>done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令行输入下述命令可以遍历1到15</p><blockquote><p>seq 1 15</p></blockquote><p>输出</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>4</span></span>
<span class="line"><span>5</span></span>
<span class="line"><span>6</span></span>
<span class="line"><span>7</span></span>
<span class="line"><span>8</span></span>
<span class="line"><span>9</span></span>
<span class="line"><span>10</span></span>
<span class="line"><span>11</span></span>
<span class="line"><span>12</span></span>
<span class="line"><span>13</span></span>
<span class="line"><span>14</span></span>
<span class="line"><span>15</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过for循环可以获得同样功能。在shell脚本中引入反引号可以调用系统命令，反引号\`\`(位于按键1左边)括起来的字符串被shell解释为命令行，在执行时，shell首先执行该命令行，并以它的标准输出结果取代整个反引号（包括两个反引号）部分。 建立demo.sh文件，键入以下内容：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span>for i in \`seq 1 15\`</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>    echo &quot;当前数值 $i&quot;</span></span>
<span class="line"><span>done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>当前数值 1</span></span>
<span class="line"><span>当前数值 2</span></span>
<span class="line"><span>当前数值 3</span></span>
<span class="line"><span>当前数值 4</span></span>
<span class="line"><span>当前数值 5</span></span>
<span class="line"><span>当前数值 6</span></span>
<span class="line"><span>当前数值 7</span></span>
<span class="line"><span>当前数值 8</span></span>
<span class="line"><span>当前数值 9</span></span>
<span class="line"><span>当前数值 10</span></span>
<span class="line"><span>当前数值 11</span></span>
<span class="line"><span>当前数值 12</span></span>
<span class="line"><span>当前数值 13</span></span>
<span class="line"><span>当前数值 14</span></span>
<span class="line"><span>当前数值 15</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于shell脚本不能直接累加，需要使用expr命令。shell中expr命令是一个手工命令行计数器，命令行输入：</p><blockquote><p>expr 12+13</p></blockquote><p>结果如下：</p><blockquote><p>12+13</p></blockquote><p>expr后面需要加空格才能正确输出结果</p><blockquote><p>expr 12 + 13</p></blockquote><p>结果如下：</p><blockquote><p>25</p></blockquote><p>通过expr命令，可以进行累加计算，更改demo.sh内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span>j=0</span></span>
<span class="line"><span>for((i=0;i&lt;=100;i++))</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>    j=\`expr $i + $j\`</span></span>
<span class="line"><span>done</span></span>
<span class="line"><span>echo &quot;j的值为：&quot; $j</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>j的值为： 5050</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令行输入以下命令将当前所有文件打包为tgz文件</p><blockquote><p>tar czf all.tgz *</p></blockquote><p>通过以下命令查找后缀为.sh的文件</p><blockquote><p>find . -name &#39;*.sh&#39;</p></blockquote><p>但是不能压缩指定文件。编写shell脚本，可以将当前目录和子目录下所有.sh文件压缩到result.tgz中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span>for i in \`find . -name &quot;*.sh&quot;\`</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>    tar -uf result.tgz $i</span></span>
<span class="line"><span>done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环"><span>while循环</span></a></h3><p>shell脚本中while循环的语法如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>while 条件语句</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>    语句</span></span>
<span class="line"><span>done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环打印0到10的demo.sh内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span>i=0</span></span>
<span class="line"><span>while((i&lt;10))</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>    echo $i</span></span>
<span class="line"><span>    i=\`expr $i + 1\`</span></span>
<span class="line"><span>done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>4</span></span>
<span class="line"><span>5</span></span>
<span class="line"><span>6</span></span>
<span class="line"><span>7</span></span>
<span class="line"><span>8</span></span>
<span class="line"><span>9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外也可通过for循环和read命令，读取当前目录text.txt中的内容</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span>while read line</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>    echo $line</span></span>
<span class="line"><span>done&lt;./text.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hello</span></span>
<span class="line"><span>world</span></span>
<span class="line"><span>!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-if-语句" tabindex="-1"><a class="header-anchor" href="#_3-if-语句"><span>3 if 语句</span></a></h2><p>shell中if语句的语法有两种，分别如下：</p><ol><li>第一种</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>if(表达式);</span></span>
<span class="line"><span>fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>第二种<br> 语句之前要有tab键，不能是空格，空格在shell语句中代表分割的特殊语义。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>if(表达式);then</span></span>
<span class="line"><span>    语句</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>    语句</span></span>
<span class="line"><span>fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如判断两个变量大小的shell脚本实现如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 定义两个变量</span></span>
<span class="line"><span>NUM1=100</span></span>
<span class="line"><span>NUM2=200</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if(($NUM1&gt;$NUM2));then</span></span>
<span class="line"><span>	echo &quot;NUM1 &gt; NUM2&quot;</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>	echo &quot;NUM1 &lt; NUM2&quot;	</span></span>
<span class="line"><span>fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>NUM1 &lt; NUM2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>shell中还有很多逻辑运算符，具体如下：</p><table><thead><tr><th>形式</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>-f</td><td>判断文件是否存在</td><td></td></tr><tr><td>-d</td><td>判断目录是否存在</td><td></td></tr><tr><td>-eg</td><td>等于</td><td></td></tr><tr><td>-ne</td><td>不等于比较</td><td></td></tr><tr><td>-le</td><td>小于比较</td><td></td></tr><tr><td>-ge</td><td>大于或等于</td><td></td></tr><tr><td>-a</td><td>双方都成立</td><td></td></tr><tr><td>-o</td><td>单方成立</td><td></td></tr></tbody></table><p>例如判断指定目录是否存在，不存在就创建目录的shell脚本为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span>test=./test</span></span>
<span class="line"><span># 判断test目录是否存在</span></span>
<span class="line"><span>if [ ! -d test ];then</span></span>
<span class="line"><span>	# 创建文件夹</span></span>
<span class="line"><span>	mkdir -p ./test</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>	echo &quot;目录已经存在&quot;</span></span>
<span class="line"><span>fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中需要用[]表示条件判断。shell中各种括号用法见： <a href="https://blog.csdn.net/HappyRocking/article/details/90609554#_69" target="_blank" rel="noopener noreferrer">shell中各种括号(),[],(()),[[]],{}等的作用大全及示例 </a></p><h2 id="_4-运算符" tabindex="-1"><a class="header-anchor" href="#_4-运算符"><span>4 运算符</span></a></h2><h3 id="算法运算符" tabindex="-1"><a class="header-anchor" href="#算法运算符"><span>算法运算符</span></a></h3><p>常用算数运算符如下，注意运算符的表达式要放在[]里面，并且运算符前后要空格。</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th><th>备注</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>expr 1 + 2</td><td>结果为3</td></tr><tr><td>-</td><td>减法</td><td>expr 1 - 2</td><td>结果为-1</td></tr><tr><td>*</td><td>乘法</td><td>expr 1 * 2</td><td>结果为2</td></tr><tr><td>/</td><td>除法</td><td>expr 1 / 2</td><td>结果为0</td></tr><tr><td>%</td><td>取余</td><td>expr 1 % 2</td><td>结果为1</td></tr><tr><td>=</td><td>赋值</td><td>a=$b</td><td>把变量b的值赋给a</td></tr><tr><td>==</td><td>相等</td><td>&amp;a == $b</td><td>比较两个数字是否相等，返回true或者false</td></tr><tr><td>!=</td><td>不相等</td><td>&amp;a != $b</td><td>比较两个数字是否不同，返回true或者false</td></tr></tbody></table><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><p>常用算数运算符如下</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等</td></tr><tr><td>-ne</td><td>间隔两个数是否不相等</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边</td></tr><tr><td>-lt</td><td>检测右边的数是否大于左边</td></tr><tr><td>-ge</td><td>检测左边的数是否大于等于右边</td></tr><tr><td>-le</td><td>检测左边的数是否小于等于右边</td></tr></tbody></table><h3 id="布尔运算符与逻辑运算符" tabindex="-1"><a class="header-anchor" href="#布尔运算符与逻辑运算符"><span>布尔运算符与逻辑运算符</span></a></h3><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>!</td><td>非运算</td></tr><tr><td>-o</td><td>或运算</td></tr><tr><td>-a</td><td>与运算</td></tr><tr><td>&amp;&amp;</td><td>逻辑的AND</td></tr><tr><td>||</td><td>逻辑的OR</td></tr></tbody></table><h3 id="字符串运算符" tabindex="-1"><a class="header-anchor" href="#字符串运算符"><span>字符串运算符</span></a></h3><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等</td></tr><tr><td>！=</td><td>检测两个字符串是否不相等</td></tr><tr><td>-z</td><td>检测字符串长度是否为0</td></tr><tr><td>-n</td><td>检测字符串长度是否不为0</td></tr><tr><td>$</td><td>检测字符串是否为空</td></tr></tbody></table><h2 id="_5-重定向" tabindex="-1"><a class="header-anchor" href="#_5-重定向"><span>5 重定向</span></a></h2><p>重定向表示改变输入和输出的方式，重定向分为两种，一种输入重定向，一种是输出重定向。输出重定向的方式为&gt;，输入重定向的方式为&lt;。0代表从标准输入(默认键盘)，1代表标准输出(默认显示屏)，2代表错误输出(默认显示屏)。</p><p>比如下面命令表示将text.txt内容输入到屏幕0</p><blockquote><p>cat 0&lt; text.txt</p></blockquote><p>下面命令表示&quot;hello world&quot;输出到file.txt文件</p><blockquote><p>echo &quot;hello world&quot; &gt; file.txt</p></blockquote><h2 id="_6-函数" tabindex="-1"><a class="header-anchor" href="#_6-函数"><span>6 函数</span></a></h2><p>liunx shell中的函数和大部分编程语言中的函数一样将代码封装到函数，供其他地方调用。 定义函数有两种方式：</p><ul><li>方式1</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>name()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    command;</span></span>
<span class="line"><span>    command2;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式2</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[ function ] funname [()]</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    action;</span></span>
<span class="line"><span>    [return int;]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如定义一个test函数，打印hello world的shell脚本如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function test()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>	output=&quot;hello world&quot;</span></span>
<span class="line"><span>	echo $output</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 调用test函数</span></span>
<span class="line"><span>test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在shell中函数没有形参，我们可以通过$n获得传入的参数。如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function test()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>	# 读取传入的参数</span></span>
<span class="line"><span>	output=$1</span></span>
<span class="line"><span>	echo $output</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 调用test函数</span></span>
<span class="line"><span>test &quot;hello world&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算阶乘的函数的shell脚本如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span>n=1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>factorial(){</span></span>
<span class="line"><span>for((i=1;i&lt;=$1;i++))</span></span>
<span class="line"><span>do</span></span>
<span class="line"><span>	n=$[$n * $i]	</span></span>
<span class="line"><span>done</span></span>
<span class="line"><span></span></span>
<span class="line"><span>echo &quot;$1的阶乘是$n&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># $1从外界传入参数</span></span>
<span class="line"><span>factorial $1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行./demo.sh 3，结果为</p><blockquote><p>3的阶乘是6</p></blockquote><p>执行./demo.sh 10，结果为</p><blockquote><p>10的阶乘是3628800</p></blockquote><p>对于shell脚本的函数，只能返回状态码0到255。使用如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 只能返回状态码0到255</span></span>
<span class="line"><span>fun()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span># 从键盘读取输入的数值，将结果保存在num中</span></span>
<span class="line"><span>read -p &quot;请输入数值：&quot; num</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fun</span></span>
<span class="line"><span># $?表示上一条指令执行的结果</span></span>
<span class="line"><span>echo &quot;fun的返回值为：$?&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>请输入数值：10</span></span>
<span class="line"><span>fun的返回值为：0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是可以用return自定义返回结果，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 只能返回状态码0到255</span></span>
<span class="line"><span>fun()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span># 从键盘读取输入的数值，将结果保存在num中</span></span>
<span class="line"><span>read -p &quot;请输入数值：&quot; num</span></span>
<span class="line"><span>return $[ 2 * num ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fun</span></span>
<span class="line"><span># $?表示上一条指令执行的结果</span></span>
<span class="line"><span>echo &quot;fun的返回值为：$?&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>请输入数值：10</span></span>
<span class="line"><span>fun的返回值为：20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是自定义会返回值不能大于255，如执行函数</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>请输入数值：200</span></span>
<span class="line"><span>fun的返回值为：144</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-推荐阅读" tabindex="-1"><a class="header-anchor" href="#_7-推荐阅读"><span>7 推荐阅读</span></a></h2><ul><li><a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener noreferrer">Shell教程</a></li><li><a href="http://c.biancheng.net/linux_tutorial/100/" target="_blank" rel="noopener noreferrer">Shell基础详解</a></li><li><a href="https://www.jb51.net/article/161028.htm" target="_blank" rel="noopener noreferrer">Shell脚本编程30分钟入门(小结)</a></li></ul>`,127)]))}const r=n(l,[["render",d],["__file","2020-04-07-_常用工具_ shell脚本快速入门笔记.html.vue"]]),c=JSON.parse('{"path":"/blog/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/2020-04-07-_%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7_%20shell%E8%84%9A%E6%9C%AC%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0.html","title":"[常用工具] shell脚本快速入门笔记","lang":"zh-CN","frontmatter":{"date":"2020-04-07T09:05:47.000Z","category":["常用工具"],"tag":["常用工具"],"description":"[常用工具] shell脚本快速入门笔记 Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但要知道，shell 和 shell script 是两个不同的概念。 1 变量的定义和使用 常用...","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/2020-04-07-_%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7_%20shell%E8%84%9A%E6%9C%AC%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[常用工具] shell脚本快速入门笔记"}],["meta",{"property":"og:description","content":"[常用工具] shell脚本快速入门笔记 Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但要知道，shell 和 shell script 是两个不同的概念。 1 变量的定义和使用 常用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"常用工具"}],["meta",{"property":"article:published_time","content":"2020-04-07T09:05:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[常用工具] shell脚本快速入门笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-07T09:05:47.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"1 变量的定义和使用","slug":"_1-变量的定义和使用","link":"#_1-变量的定义和使用","children":[{"level":3,"title":"常用函数","slug":"常用函数","link":"#常用函数","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"常用变量","slug":"常用变量","link":"#常用变量","children":[]}]},{"level":2,"title":"2 循环与文件读写","slug":"_2-循环与文件读写","link":"#_2-循环与文件读写","children":[{"level":3,"title":"for循环","slug":"for循环","link":"#for循环","children":[]},{"level":3,"title":"while循环","slug":"while循环","link":"#while循环","children":[]}]},{"level":2,"title":"3 if 语句","slug":"_3-if-语句","link":"#_3-if-语句","children":[]},{"level":2,"title":"4 运算符","slug":"_4-运算符","link":"#_4-运算符","children":[{"level":3,"title":"算法运算符","slug":"算法运算符","link":"#算法运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"布尔运算符与逻辑运算符","slug":"布尔运算符与逻辑运算符","link":"#布尔运算符与逻辑运算符","children":[]},{"level":3,"title":"字符串运算符","slug":"字符串运算符","link":"#字符串运算符","children":[]}]},{"level":2,"title":"5 重定向","slug":"_5-重定向","link":"#_5-重定向","children":[]},{"level":2,"title":"6 函数","slug":"_6-函数","link":"#_6-函数","children":[]},{"level":2,"title":"7 推荐阅读","slug":"_7-推荐阅读","link":"#_7-推荐阅读","children":[]}],"git":{},"readingTime":{"minutes":8.25,"words":2476},"filePathRelative":"blog/常用工具/2020-04-07-[常用工具] shell脚本快速入门笔记.md","localizedDate":"2020年4月7日","excerpt":"\\n<p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但要知道，shell 和 shell script 是两个不同的概念。</p>\\n<h2>1 变量的定义和使用</h2>\\n<h3>常用函数</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>形式</th>\\n<th>说明</th>\\n<th>备注</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>#</td>\\n<td>注释</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>echo</td>\\n<td>用于向窗口输出文本</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>$0</td>\\n<td>显示当前程序的名称</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>$*</td>\\n<td>显示所有输入的参数</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>$n</td>\\n<td>显示程序输入第n个参数</td>\\n<td>如输入n=1，表示输入的第一个参数</td>\\n</tr>\\n<tr>\\n<td>$#</td>\\n<td>显示输入参数的个数</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>$?</td>\\n<td>显示命令执行的状态</td>\\n<td>返回0代表成功，返回其他代表失败</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{r as comp,c as data};
