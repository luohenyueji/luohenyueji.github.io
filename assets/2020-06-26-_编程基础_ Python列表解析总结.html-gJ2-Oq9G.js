import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as p,c as t,a as n,b as o,d as c,e as i}from"./app-MsA2k2kn.js";const l={},u=i(`<h1 id="编程基础-python列表解析总结" tabindex="-1"><a class="header-anchor" href="#编程基础-python列表解析总结" aria-hidden="true">#</a> [编程基础] Python列表解析总结</h1><p>在本教程中，我们将学习使用Python列表解析(list comprehensions)相关知识</p><h2 id="_1-使用介绍" tabindex="-1"><a class="header-anchor" href="#_1-使用介绍" aria-hidden="true">#</a> 1 使用介绍</h2><p>列表解析是一种基于现有列表创建列表的句法结构。列表解析提供了创建列表的简洁方法。通常需要创建新的列表，其中每个元素是应用于另一个序列或iterable的每个成员的某些操作的结果，或者创建满足特定条件的这些元素的子序列。 列表解析可以用于以下几个地方：</p><ul><li>转换列表</li><li>筛选列表</li></ul><p>列表解析的句法受集合的数学表示法的影响。Python语法的灵感来自Haskell编程语言。 如下是用于创建一组整数值的数学表示法。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>S = {x² : x in {0 ... 16}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的伪代码显示了列表解析的语法。它由三部分组成：for循环，可选条件和表达式。for循环遍历整个序列。对于每个循环，如果满足条件，则对表达式进行求值。如果计算出该值，它将被添加到新列表中。for循环和if条件可以有多个。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>L = [expression [if condition] for variable in sequence [if condition]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-1-python列表解析转换列表" tabindex="-1"><a class="header-anchor" href="#_1-1-python列表解析转换列表" aria-hidden="true">#</a> 1.1 Python列表解析转换列表</h3><p>下面的示例借助列表解析将一个列表转换为另一个列表。 在下面示例中，我们通过将每个元素乘以2从现有列表中创建一个新列表。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token comment"># for e in a 循环遍历列表a,然后e每个元素都乘以2，然后将结果添加到新b列表中</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span>e <span class="token operator">*</span> <span class="token number">2</span> <span class="token keyword">for</span> e <span class="token keyword">in</span> a<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[2, 4, 6, 8, 10, 12]
</code></pre><h3 id="_1-2-从摄氏度计算华氏温度" tabindex="-1"><a class="header-anchor" href="#_1-2-从摄氏度计算华氏温度" aria-hidden="true">#</a> 1.2 从摄氏度计算华氏温度</h3><p>以下示例显示有摄氏温度的列表。我们要创建一个新的温度表，以华氏温度表示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>celsius <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">]</span>

fahr <span class="token operator">=</span> <span class="token punctuation">[</span>e <span class="token operator">*</span> <span class="token number">9</span><span class="token operator">/</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">32</span> <span class="token keyword">for</span> e <span class="token keyword">in</span> celsius<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fahr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[71.6, 82.4, 91.4, 107.6, 125.6]
</code></pre><h3 id="_1-3-python列表解析过滤列表" tabindex="-1"><a class="header-anchor" href="#_1-3-python列表解析过滤列表" aria-hidden="true">#</a> 1.3 Python列表解析过滤列表</h3><p>在下面的示例中，我们将使用列表解析来过滤列表。以下示例显示一个整数列表。通过过滤创建一个仅包含正整数的新列表。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>

<span class="token comment"># 为了只包括正数，使用一个if条件，该条件适用于每个元素。仅当满足条件的元素才包含在新列表中。</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span>e <span class="token keyword">for</span> e <span class="token keyword">in</span> a <span class="token keyword">if</span> e <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[2, 12]
</code></pre><p>下一个示例按元素类型过滤元素。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># 创建一个只有整数的列表</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span>e <span class="token keyword">for</span> e <span class="token keyword">in</span> a <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">]</span>
<span class="token comment"># 创建一个只有字符串的列表</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span>e <span class="token keyword">for</span> e <span class="token keyword">in</span> a <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[2, 12, 3]
[&#39;a&#39;, &#39;c&#39;, &#39;d&#39;]
</code></pre><h3 id="_1-4-python列表逻辑委托函数" tabindex="-1"><a class="header-anchor" href="#_1-4-python列表逻辑委托函数" aria-hidden="true">#</a> 1.4 Python列表逻辑委托函数</h3><p>以下示例通过设定过滤函数获得句子中所有元音单词。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">is_vowel</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>

    vowels <span class="token operator">=</span> <span class="token string">&#39;aeiou&#39;</span>

    <span class="token keyword">if</span> c <span class="token keyword">in</span> vowels<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>


sentence <span class="token operator">=</span> <span class="token string">&#39;There are eagles in the sky.&#39;</span>

<span class="token comment"># if将逻辑委托给is_vowel()</span>
vowels <span class="token operator">=</span> <span class="token punctuation">[</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> sentence <span class="token keyword">if</span> is_vowel<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>vowels<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[&#39;e&#39;, &#39;e&#39;, &#39;a&#39;, &#39;e&#39;, &#39;e&#39;, &#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;e&#39;]
</code></pre><h3 id="_1-5-前置if条件判断" tabindex="-1"><a class="header-anchor" href="#_1-5-前置if条件判断" aria-hidden="true">#</a> 1.5 前置if条件判断</h3><p>该if条件也可以放在前面。这样可以转换数据。在以下示例中，我们使用列表解析将值转换为&quot;even&quot; 和&quot;odd&quot;。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># i能整除2为even否则是odd</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;even&quot;</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">&quot;odd&quot;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[&#39;even&#39;, &#39;odd&#39;, &#39;even&#39;, &#39;odd&#39;, &#39;even&#39;, &#39;odd&#39;, &#39;even&#39;]
</code></pre><h3 id="_1-6-python列表解析处理多if条件" tabindex="-1"><a class="header-anchor" href="#_1-6-python列表解析处理多if条件" aria-hidden="true">#</a> 1.6 Python列表解析处理多if条件</h3><p>在Python列表解析中可以使用多个if条件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span>

<span class="token comment"># 选择大于10小于20的数</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span>e <span class="token keyword">for</span> e <span class="token keyword">in</span> a <span class="token keyword">if</span> e <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token keyword">if</span> e <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[18, 14, 11, 19]
</code></pre><h3 id="_1-7-python列表解析处理多个for循环" tabindex="-1"><a class="header-anchor" href="#_1-7-python列表解析处理多个for循环" aria-hidden="true">#</a> 1.7 Python列表解析处理多个for循环</h3><p>Python列表解析中可能有多个for循环。以下示例创建两个列表的笛卡尔乘积。列表解析中多个for循环类似于以下条件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>for i in a:
    for j in b:
        print(i,j)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span>

c <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> j <span class="token keyword">for</span> i <span class="token keyword">in</span> a <span class="token keyword">for</span> j <span class="token keyword">in</span> b<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[&#39;1A&#39;, &#39;1B&#39;, &#39;1C&#39;, &#39;2A&#39;, &#39;2B&#39;, &#39;2C&#39;, &#39;3A&#39;, &#39;3B&#39;, &#39;3C&#39;]
</code></pre><p>以下示例为使用多for循环展平列表</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment"># 第一个循环遍历外部列表；第二个for循环遍历嵌套列表。</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span> e <span class="token keyword">for</span> num <span class="token keyword">in</span> nums <span class="token keyword">for</span> e <span class="token keyword">in</span> num<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 3, 4, 5, 6, 7, 8]
</code></pre><h3 id="_1-8-python嵌套列表解析" tabindex="-1"><a class="header-anchor" href="#_1-8-python嵌套列表解析" aria-hidden="true">#</a> 1.8 Python嵌套列表解析</h3><p>Python列表解析中的初始表达式可以是另一个列表解析结果。以下示例定义了一个矩阵，列表解析从原始矩阵创建一个转置矩阵。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>M1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

M1_tr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> M1<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>M1_tr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</code></pre><h3 id="_1-9-埃拉托色尼筛选法" tabindex="-1"><a class="header-anchor" href="#_1-9-埃拉托色尼筛选法" aria-hidden="true">#</a> 1.9 埃拉托色尼筛选法</h3><p>埃拉托色尼筛选法Sieve of Eratosthenes是一种古老的计算素数的算法，素数（或素数）是一个大于1的自然数，除了1和它本身之外没有正除数。以下示例计算值不大于的100的素数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个非素数的列表</span>
no_primes <span class="token operator">=</span> <span class="token punctuation">[</span>j <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment"># 素数就是那些不包含在无素数列表中的数。</span>
primes <span class="token operator">=</span> <span class="token punctuation">[</span>e <span class="token keyword">for</span> e <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> e <span class="token keyword">not</span> <span class="token keyword">in</span> no_primes<span class="token punctuation">]</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>primes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
</code></pre><h2 id="_2-参考" tabindex="-1"><a class="header-anchor" href="#_2-参考" aria-hidden="true">#</a> 2 参考</h2>`,53),r={href:"http://zetcode.com/python/listcomprehensions/",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const s=e("ExternalLinkIcon");return p(),t("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[o("http://zetcode.com/python/listcomprehensions/"),c(s)])])])])}const h=a(l,[["render",d],["__file","2020-06-26-_编程基础_ Python列表解析总结.html.vue"]]);export{h as default};
