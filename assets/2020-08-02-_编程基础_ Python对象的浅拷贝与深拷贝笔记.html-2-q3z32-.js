const t=JSON.parse('{"key":"v-03900ff8","path":"/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-08-02-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20Python%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%AC%94%E8%AE%B0.html","title":"[编程基础] Python对象的浅拷贝与深拷贝笔记","lang":"zh-CN","frontmatter":{"date":"2020-08-02T11:06:25.000Z","category":["编程基础"],"tag":["Python","编程基础"],"description":"[编程基础] Python对象的浅拷贝与深拷贝笔记 Python中的赋值语句不创建对象的副本，它们只将名称绑定到对象。对于不可变的对象，这通常没有什么区别。但是对于处理可变对象或可变对象的集合，您可能需要寻找一种方法来创建这些对象的“真实副本”或“克隆”。从本质上讲，您有时会希望拷贝可以在不自动修改原始副本的情况下进行修改。在本文中，我将向您简要介绍如何在Python3中复制或“克隆”对象，以及一些相关的注意事项。此外，在复制对象方面，Python 2和3之间没有什么区别。 让我们先看看如何复制Python的内置集合。Python内置的可变集合，如列表、字典和集合，可以通过在现有集合上调用它们的工厂函数来复制:","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-08-02-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20Python%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[编程基础] Python对象的浅拷贝与深拷贝笔记"}],["meta",{"property":"og:description","content":"[编程基础] Python对象的浅拷贝与深拷贝笔记 Python中的赋值语句不创建对象的副本，它们只将名称绑定到对象。对于不可变的对象，这通常没有什么区别。但是对于处理可变对象或可变对象的集合，您可能需要寻找一种方法来创建这些对象的“真实副本”或“克隆”。从本质上讲，您有时会希望拷贝可以在不自动修改原始副本的情况下进行修改。在本文中，我将向您简要介绍如何在Python3中复制或“克隆”对象，以及一些相关的注意事项。此外，在复制对象方面，Python 2和3之间没有什么区别。 让我们先看看如何复制Python的内置集合。Python内置的可变集合，如列表、字典和集合，可以通过在现有集合上调用它们的工厂函数来复制:"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"落痕月极"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"编程基础"}],["meta",{"property":"article:published_time","content":"2020-08-02T11:06:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[编程基础] Python对象的浅拷贝与深拷贝笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-02T11:06:25.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"１浅拷贝与深拷贝","slug":"_1浅拷贝与深拷贝","link":"#_1浅拷贝与深拷贝","children":[{"level":3,"title":"1.1 进行浅拷贝","slug":"_1-1-进行浅拷贝","link":"#_1-1-进行浅拷贝","children":[]},{"level":3,"title":"1.2 进行深拷贝","slug":"_1-2-进行深拷贝","link":"#_1-2-进行深拷贝","children":[]}]},{"level":2,"title":"2 复制任意Python对象","slug":"_2-复制任意python对象","link":"#_2-复制任意python对象","children":[]},{"level":2,"title":"3 总结","slug":"_3-总结","link":"#_3-总结","children":[]},{"level":2,"title":"4 参考","slug":"_4-参考","link":"#_4-参考","children":[]}],"git":{},"readingTime":{"minutes":8.01,"words":2404},"filePathRelative":"blog/编程基础/学习笔记/2020-08-02-[编程基础] Python对象的浅拷贝与深拷贝笔记.md","localizedDate":"2020年8月2日","excerpt":"<h1> [编程基础] Python对象的浅拷贝与深拷贝笔记</h1>\\n<p>Python中的赋值语句不创建对象的副本，它们只将名称绑定到对象。对于不可变的对象，这通常没有什么区别。但是对于处理可变对象或可变对象的集合，您可能需要寻找一种方法来创建这些对象的“真实副本”或“克隆”。从本质上讲，您有时会希望拷贝可以在不自动修改原始副本的情况下进行修改。在本文中，我将向您简要介绍如何在Python3中复制或“克隆”对象，以及一些相关的注意事项。此外，在复制对象方面，Python 2和3之间没有什么区别。</p>\\n<p>让我们先看看如何复制Python的内置集合。Python内置的可变集合，如列表、字典和集合，可以通过在现有集合上调用它们的工厂函数来复制:</p>","autoDesc":true}');export{t as data};
