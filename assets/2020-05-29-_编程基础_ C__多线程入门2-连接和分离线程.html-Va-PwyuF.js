const t=JSON.parse('{"key":"v-00c3e313","path":"/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/2020-05-29-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A82-%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%88%86%E7%A6%BB%E7%BA%BF%E7%A8%8B.html","title":"[编程基础] C++多线程入门2-连接和分离线程","lang":"zh-CN","frontmatter":{"date":"2020-05-29T16:42:33.000Z","category":["编程基础"],"tag":["编程基础"],"description":"[编程基础] C++多线程入门2-连接和分离线程 原始C++标准仅支持单线程编程。新的C++标准(称为C++11或C++0x)于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++11标准。 2 连接和分离线程 在本章中，我们将讨论std::thread的连接和分离。 2.1 用std:🧵:join()连接线程 一旦启动一个线程，则另一个线程可以等待该新线程完成。为此，还需要在std::thread对象上调用join()函数，即 std::thread th(funcPtr); // Some Code th.join();","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/2020-05-29-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A82-%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%88%86%E7%A6%BB%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[编程基础] C++多线程入门2-连接和分离线程"}],["meta",{"property":"og:description","content":"[编程基础] C++多线程入门2-连接和分离线程 原始C++标准仅支持单线程编程。新的C++标准(称为C++11或C++0x)于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++11标准。 2 连接和分离线程 在本章中，我们将讨论std::thread的连接和分离。 2.1 用std:🧵:join()连接线程 一旦启动一个线程，则另一个线程可以等待该新线程完成。为此，还需要在std::thread对象上调用join()函数，即 std::thread th(funcPtr); // Some Code th.join();"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"落痕月极"}],["meta",{"property":"article:tag","content":"编程基础"}],["meta",{"property":"article:published_time","content":"2020-05-29T16:42:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[编程基础] C++多线程入门2-连接和分离线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-29T16:42:33.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"2 连接和分离线程","slug":"_2-连接和分离线程","link":"#_2-连接和分离线程","children":[{"level":3,"title":"2.1 用std:🧵:join()连接线程","slug":"_2-1-用std-join-连接线程","link":"#_2-1-用std-join-连接线程","children":[]},{"level":3,"title":"2.2 使用std:🧵:detach()分离线程","slug":"_2-2-使用std-detach-分离线程","link":"#_2-2-使用std-detach-分离线程","children":[]},{"level":3,"title":"2.3 参考","slug":"_2-3-参考","link":"#_2-3-参考","children":[]}]}],"git":{},"readingTime":{"minutes":3.78,"words":1135},"filePathRelative":"blog/编程基础/C++多线程入门/2020-05-29-[编程基础] C++多线程入门2-连接和分离线程.md","localizedDate":"2020年5月30日","excerpt":"<h1> [编程基础] C++多线程入门2-连接和分离线程</h1>\\n<p>原始C++标准仅支持单线程编程。新的C++标准(称为C++11或C++0x)于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++11标准。</p>\\n<h2> 2 连接和分离线程</h2>\\n<p>在本章中，我们将讨论std::thread的连接和分离。</p>\\n<h3> 2.1 用std:🧵:join()连接线程</h3>\\n<p>一旦启动一个线程，则另一个线程可以等待该新线程完成。为此，还需要在std::thread对象上调用join()函数，即</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>std::thread th(funcPtr);\\n// Some Code\\nth.join();\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
