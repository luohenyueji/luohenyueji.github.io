import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as l,c as p,a as n,d as e,b as s,e as t}from"./app-MsA2k2kn.js";const c={},u=n("h1",{id:"机器学习-yellowbrick使用笔记7-聚类可视化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#机器学习-yellowbrick使用笔记7-聚类可视化","aria-hidden":"true"},"#"),s(" [机器学习] Yellowbrick使用笔记7-聚类可视化")],-1),r=n("p",null,"聚类模型是试图检测未标记数据中模式的无监督方法。聚类算法主要有两类：聚集聚类将相似的数据点连接在一起，而质心聚类则试图在数据中找到中心或分区。Yellowbrick提供yellowbrick.cluster用于可视化和评估群集行为的模块。目前，我们提供了几种可视化工具来评估质心机制，特别是K均值聚类，帮助我们发现聚类度量中的最佳K参数。",-1),d={href:"https://github.com/luohenyueji/Python-Study-Notes/tree/master/Documents/Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"代码下载",-1),m=t(`<p>主要方法如下：</p><ul><li>Elbow Method：根据某个评分函数对聚类进行可视化，在曲线中寻找“Elbow”。</li><li>Silhouette Visualize：在一个模型中可视化每个集群的轮廓分数。</li><li>Intercluster Distance：可视化簇的相对距离和大小。</li></ul><p>本文如果数据集下载不下来，查看下面地址，然后放入yellowbrick安装目录\\datasets\\fixtures文件夹:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;bikeshare&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/bikeshare.zip&quot;,
    &quot;signature&quot;: &quot;4ed07a929ccbe0171309129e6adda1c4390190385dd6001ba9eecc795a21eef2&quot;
  },
  &quot;hobbies&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/hobbies.zip&quot;,
    &quot;signature&quot;: &quot;6114e32f46baddf049a18fb05bad3efa98f4e6a0fe87066c94071541cb1e906f&quot;
  },
  &quot;concrete&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/concrete.zip&quot;,
    &quot;signature&quot;: &quot;5807af2f04e14e407f61e66a4f3daf910361a99bb5052809096b47d3cccdfc0a&quot;
  },
  &quot;credit&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/credit.zip&quot;,
    &quot;signature&quot;: &quot;2c6f5821c4039d70e901cc079d1404f6f49c3d6815871231c40348a69ae26573&quot;
  },
  &quot;energy&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/energy.zip&quot;,
    &quot;signature&quot;: &quot;174eca3cd81e888fc416c006de77dbe5f89d643b20319902a0362e2f1972a34e&quot;
  },
  &quot;game&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/game.zip&quot;,
    &quot;signature&quot;: &quot;ce799d1c55fcf1985a02def4d85672ac86c022f8f7afefbe42b20364fba47d7a&quot;
  },
  &quot;mushroom&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/mushroom.zip&quot;,
    &quot;signature&quot;: &quot;f79fdbc33b012dabd06a8f3cb3007d244b6aab22d41358b9aeda74417c91f300&quot;
  },
  &quot;occupancy&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/occupancy.zip&quot;,
    &quot;signature&quot;: &quot;0b390387584586a05f45c7da610fdaaf8922c5954834f323ae349137394e6253&quot;
  },
  &quot;spam&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/spam.zip&quot;,
    &quot;signature&quot;: &quot;000309ac2b61090a3001de3e262a5f5319708bb42791c62d15a08a2f9f7cb30a&quot;
  },
  &quot;walking&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/walking.zip&quot;,
    &quot;signature&quot;: &quot;7a36615978bc3bb74a2e9d5de216815621bd37f6a42c65d3fc28b242b4d6e040&quot;
  },
  &quot;nfl&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/nfl.zip&quot;,
    &quot;signature&quot;: &quot;4989c66818ea18217ee0fe3a59932b963bd65869928c14075a5c50366cb81e1f&quot;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 多行输出</span>
<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>core<span class="token punctuation">.</span>interactiveshell <span class="token keyword">import</span> InteractiveShell
InteractiveShell<span class="token punctuation">.</span>ast_node_interactivity <span class="token operator">=</span> <span class="token string">&quot;all&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[toc]</p><h2 id="_1-elbow-method" tabindex="-1"><a class="header-anchor" href="#_1-elbow-method" aria-hidden="true">#</a> 1 Elbow Method</h2><p>KElbowVisualizer实现了“肘部”方法，以帮助数据科学家通过用K的一系列值拟合模型来选择最佳的簇数。如果折线图类似于手臂，则“肘部”（曲线上的拐点）是一个很好的指示，表明基础模型在该点最适合。在可视化工具中，“弯头”将用虚线注释。</p><table><thead><tr><th>可视化器</th><th>KElbowVisualizer</th></tr></thead><tbody><tr><td>快速使用方法</td><td>kelbow_visualizer()</td></tr><tr><td>模型</td><td>聚类</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><p>为了证明这一点，在下面的例子中，KElbowVisualizer在一个包含8个随机点簇的二维数据集上拟合KMeans模型，该模型的K值范围从4到11。当模型适合8个簇时，我们可以看到一条线在图中注释“弯头”，在本例中我们知道这是最佳数目。</p><h3 id="_1-1-基础使用" tabindex="-1"><a class="header-anchor" href="#_1-1-基础使用" aria-hidden="true">#</a> 1.1 基础使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> make_blobs

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KElbowVisualizer

<span class="token comment"># Generate synthetic dataset with 8 random clusters</span>
<span class="token comment"># 建立具有8个随机点簇中心的数据</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> make_blobs<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> centers<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># Instantiate the clustering model and visualizer</span>
model <span class="token operator">=</span> KMeans<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 可视化</span>
visualizer <span class="token operator">=</span> KElbowVisualizer<span class="token punctuation">(</span>model<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token comment"># Fit the data to the visualizer</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment"># Finalize and render the figure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Figure size 800x550 with 2 Axes&gt;
</code></pre><p>默认情况下，评分参数度量metric设置为distortion，这将计算从每个点到其指定中心的平方距离之和。 但是，KElbowVisualizer还可以使用另外两个指标-sihouette和calinski_harabasz。 silhouette计算所有采样的平均轮廓系数，而calinski_harabasz分数计算簇之间和簇内的分散率。</p><p>KElbowVisualizer还将每K训练聚类模型的时间量显示为一条绿色虚线，但可以通过设置timings=False来隐藏。在下面的示例中，我们将使用calinski_harabasz分数并隐藏时间以适合模型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> make_blobs

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KElbowVisualizer

<span class="token comment"># Generate synthetic dataset with 8 random clusters</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> make_blobs<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> centers<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># Instantiate the clustering model and visualizer</span>
model <span class="token operator">=</span> KMeans<span class="token punctuation">(</span><span class="token punctuation">)</span>
visualizer <span class="token operator">=</span> KElbowVisualizer<span class="token punctuation">(</span>
    model<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metric<span class="token operator">=</span><span class="token string">&#39;calinski_harabasz&#39;</span><span class="token punctuation">,</span> timings<span class="token operator">=</span><span class="token boolean">False</span>
<span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token comment"># Fit the data to the visualizer</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment"># Finalize and render the figure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记7-聚类可视化/output_6_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure>`,17),v={href:"https://github.com/arvkevi/kneed",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> make_blobs

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KElbowVisualizer

<span class="token comment"># Generate synthetic dataset with 8 random clusters</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> make_blobs<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> centers<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># Instantiate the clustering model and visualizer</span>
model <span class="token operator">=</span> KMeans<span class="token punctuation">(</span><span class="token punctuation">)</span>
visualizer <span class="token operator">=</span> KElbowVisualizer<span class="token punctuation">(</span>
    model<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metric<span class="token operator">=</span><span class="token string">&#39;calinski_harabasz&#39;</span><span class="token punctuation">,</span> timings<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> locate_elbow<span class="token operator">=</span><span class="token boolean">False</span>
<span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token comment"># Fit the data to the visualizer</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment"># Finalize and render the figure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记7-聚类可视化/output_8_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>重要的是要记住，如果数据不是非常聚集，那么“肘部”方法就不能很好地工作。在这种情况下，您可能会看到一条平滑的曲线，而K的最佳值将不清楚。</p><h3 id="_1-2-快速方法" tabindex="-1"><a class="header-anchor" href="#_1-2-快速方法" aria-hidden="true">#</a> 1.2 快速方法</h3><p>上面的相同功能可以通过关联的快速方法来实现kelbow_visualizer。此方法将KElbowVisualizer使用关联的参数构建对象，将其拟合，然后（可选）立即显示可视化效果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>elbow <span class="token keyword">import</span> kelbow_visualizer
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>loaders <span class="token keyword">import</span> load_nfl

X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_nfl<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Use the quick method and immediately show the figure</span>
kelbow_visualizer<span class="token punctuation">(</span>KMeans<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记7-聚类可视化/output_11_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_2-silhouette-visualiz" tabindex="-1"><a class="header-anchor" href="#_2-silhouette-visualiz" aria-hidden="true">#</a> 2 Silhouette Visualiz</h2><p>当数据集的实际情况未知时，使用轮廓系数来计算聚类密度。通过平均每个样本的轮廓系数来计算得分，计算为每个样本的平均簇内距离和平均最近聚类距离之间的差，用最大值归一化。这将产生一个介于1和-1之间的分数，其中1是高度密集的簇，而-1是完全不正确的聚类。</p><table><thead><tr><th>可视化器</th><th>SilhouetteVisualizer</th></tr></thead><tbody><tr><td>快速使用方法</td><td>silhouette_visualizer()</td></tr><tr><td>模型</td><td>聚类</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><h3 id="_2-1-基础使用" tabindex="-1"><a class="header-anchor" href="#_2-1-基础使用" aria-hidden="true">#</a> 2.1 基础使用</h3><p>红线表示平均Silhouette分数，纵坐标表示当前特征的分数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> SilhouetteVisualizer
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_nfl

<span class="token comment"># Load a clustering dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_nfl<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Specify the features to use for clustering</span>
<span class="token comment"># 指定某五个特征</span>
features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Rec&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Yds&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TD&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Fmb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ctch_Rate&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># 挑选这些特征重tgb&gt;20的数据</span>
X <span class="token operator">=</span> X<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">&#39;Tgt &gt;= 20&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span>features<span class="token punctuation">]</span>

<span class="token comment"># Instantiate the clustering model and visualizer</span>
model <span class="token operator">=</span> KMeans<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>
visualizer <span class="token operator">=</span> SilhouetteVisualizer<span class="token punctuation">(</span>model<span class="token punctuation">,</span> colors<span class="token operator">=</span><span class="token string">&#39;yellowbrick&#39;</span><span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token comment"># Fit the data to the visualizer</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment"># Finalize and render the figure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记7-聚类可视化/output_14_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_2-2-快速方法" tabindex="-1"><a class="header-anchor" href="#_2-2-快速方法" aria-hidden="true">#</a> 2.2 快速方法</h3><p>上面的相同功能可以通过关联的快速方法silhouette_visualizer来实现。此方法将使用关联的参数构建Silhouette Visualizer对象，将其拟合，然后（可选）立即显示它。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> silhouette_visualizer
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_credit

<span class="token comment"># Load a clustering dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_credit<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Specify rows to cluster: under 40 y/o and have either graduate or university education</span>
X <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token string">&#39;edu&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># Use the quick method and immediately show the figure</span>
silhouette_visualizer<span class="token punctuation">(</span>KMeans<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">,</span> colors<span class="token operator">=</span><span class="token string">&#39;yellowbrick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记7-聚类可视化/output_16_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_3-intercluster-distance" tabindex="-1"><a class="header-anchor" href="#_3-intercluster-distance" aria-hidden="true">#</a> 3 Intercluster Distance</h2><p>簇间距离图在保留到其他中心的距离的情况下，在2维中显示簇中心的嵌入。 例如，可视化中元素离中心越近，它们在原始特征空间中的距离就越近。 根据评分度量调整群集的大小。 默认情况下，它们的大小取决于membership，例如，属于每个中心的实例数量。 这让人感觉到集群的相对重要性。 但是，请注意，由于两个簇在2D空间中重叠，这并不意味着它们在原始特征空间中重叠。</p><table><thead><tr><th>可视化器</th><th>InterclusterDistance</th></tr></thead><tbody><tr><td>快速使用方法</td><td>intercluster_distance()</td></tr><tr><td>模型</td><td>聚类</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><h3 id="_3-1-基础使用" tabindex="-1"><a class="header-anchor" href="#_3-1-基础使用" aria-hidden="true">#</a> 3.1 基础使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> make_blobs

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> InterclusterDistance

<span class="token comment"># Generate synthetic dataset with 12 random clusters</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> make_blobs<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> centers<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># Instantiate the clustering model and visualizer</span>
<span class="token comment"># 六个簇类</span>
model <span class="token operator">=</span> KMeans<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
visualizer <span class="token operator">=</span> InterclusterDistance<span class="token punctuation">(</span>model<span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token comment"># Fit the data to the visualizer|</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment"># Finalize and render the figure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记7-聚类可视化/output_19_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_3-2-快速方法" tabindex="-1"><a class="header-anchor" href="#_3-2-快速方法" aria-hidden="true">#</a> 3.2 快速方法</h3><p>上面的相同功能可以通过关联的快速方法intercluster_distance实现。此方法将InterclusterDistance使用关联的参数构建对象，将其拟合，然后（可选）立即显示它。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_nfl
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> MiniBatchKMeans
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> intercluster_distance


X<span class="token punctuation">,</span> _ <span class="token operator">=</span> load_nfl<span class="token punctuation">(</span><span class="token punctuation">)</span>
intercluster_distance<span class="token punctuation">(</span>MiniBatchKMeans<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">777</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记7-聚类可视化/output_21_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_4-参考" tabindex="-1"><a class="header-anchor" href="#_4-参考" aria-hidden="true">#</a> 4 参考</h2>`,29),h={href:"https://www.scikit-yb.org/en/latest/api/cluster/elbow.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.scikit-yb.org/en/latest/api/cluster/silhouette.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.scikit-yb.org/en/latest/api/cluster/icdm.html#yellowbrick.cluster.icdm.InterclusterDistance",target:"_blank",rel:"noopener noreferrer"};function _(y,f){const a=i("ExternalLinkIcon");return l(),p("div",null,[u,r,n("p",null,[n("a",d,[k,e(a)])]),m,n("p",null,[s("默认情况下，参数locate_elbow设置为True，使用“elbow检测算法”自动找到可能与k的最佳值相对应的“肘”。但是，用户可以通过设置关闭功能locate_elbow=False。您可以在 Kevin Arvai的"),n("a",v,[s("Knee point detection in Python"),e(a)]),s("中阅读有关此算法的实现的信息。")]),b,n("ul",null,[n("li",null,[n("a",h,[s("https://www.scikit-yb.org/en/latest/api/cluster/elbow.html"),e(a)])]),n("li",null,[n("a",g,[s("https://www.scikit-yb.org/en/latest/api/cluster/silhouette.html"),e(a)])]),n("li",null,[n("a",w,[s("https://www.scikit-yb.org/en/latest/api/cluster/icdm.html#yellowbrick.cluster.icdm.InterclusterDistance"),e(a)])])])])}const x=o(c,[["render",_],["__file","2020-07-25-_机器学习_ Yellowbrick使用笔记7-聚类可视化.html.vue"]]);export{x as default};
