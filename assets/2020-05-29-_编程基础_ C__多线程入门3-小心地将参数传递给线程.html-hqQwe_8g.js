const t=JSON.parse('{"key":"v-a75db554","path":"/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/2020-05-29-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A83-%E5%B0%8F%E5%BF%83%E5%9C%B0%E5%B0%86%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%BB%99%E7%BA%BF%E7%A8%8B.html","title":"[编程基础] C++多线程入门3-小心地将参数传递给线程","lang":"zh-CN","frontmatter":{"date":"2020-05-29T16:46:39.000Z","category":["编程基础"],"tag":["编程基础"],"description":"[编程基础] C++多线程入门3-小心地将参数传递给线程 原始C++标准仅支持单线程编程。新的C++标准(称为c++11或c++0x)于2011年发布。在c++11中，引入了新的线程库。因此运行本文程序需要C++至少符合c++11标准。 3 小心地将参数传递给线程 要将参数传递给线程的关联可调用对象或函数，只需将其他参数传递给std::thread构造函数。默认情况下，所有参数都复制到新线程的内部存储中。让我们看一个例子： 3.1 在c++11中将简单参数传递给std::thread #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;thread&gt; void threadCallback(int x, std::string str) { \\tstd::cout &lt;&lt; \\"Passed Number = \\" &lt;&lt; x &lt;&lt; std::endl; \\tstd::cout &lt;&lt; \\"Passed String = \\" &lt;&lt; str &lt;&lt; std::endl; } int main() { \\tint x = 10; \\tstd::string str = \\"Sample String\\"; \\tstd::thread threadObj(threadCallback, x, str); \\tthreadObj.join(); \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/2020-05-29-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A83-%E5%B0%8F%E5%BF%83%E5%9C%B0%E5%B0%86%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%BB%99%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[编程基础] C++多线程入门3-小心地将参数传递给线程"}],["meta",{"property":"og:description","content":"[编程基础] C++多线程入门3-小心地将参数传递给线程 原始C++标准仅支持单线程编程。新的C++标准(称为c++11或c++0x)于2011年发布。在c++11中，引入了新的线程库。因此运行本文程序需要C++至少符合c++11标准。 3 小心地将参数传递给线程 要将参数传递给线程的关联可调用对象或函数，只需将其他参数传递给std::thread构造函数。默认情况下，所有参数都复制到新线程的内部存储中。让我们看一个例子： 3.1 在c++11中将简单参数传递给std::thread #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;thread&gt; void threadCallback(int x, std::string str) { \\tstd::cout &lt;&lt; \\"Passed Number = \\" &lt;&lt; x &lt;&lt; std::endl; \\tstd::cout &lt;&lt; \\"Passed String = \\" &lt;&lt; str &lt;&lt; std::endl; } int main() { \\tint x = 10; \\tstd::string str = \\"Sample String\\"; \\tstd::thread threadObj(threadCallback, x, str); \\tthreadObj.join(); \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"落痕月极"}],["meta",{"property":"article:tag","content":"编程基础"}],["meta",{"property":"article:published_time","content":"2020-05-29T16:46:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[编程基础] C++多线程入门3-小心地将参数传递给线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-29T16:46:39.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"3 小心地将参数传递给线程","slug":"_3-小心地将参数传递给线程","link":"#_3-小心地将参数传递给线程","children":[{"level":3,"title":"3.1 在c++11中将简单参数传递给std::thread","slug":"_3-1-在c-11中将简单参数传递给std-thread","link":"#_3-1-在c-11中将简单参数传递给std-thread","children":[]},{"level":3,"title":"3.2 如何不将参数传递给c++11中的线程","slug":"_3-2-如何不将参数传递给c-11中的线程","link":"#_3-2-如何不将参数传递给c-11中的线程","children":[]},{"level":3,"title":"3.3 如何在c++11中传递对std::thread的引用","slug":"_3-3-如何在c-11中传递对std-thread的引用","link":"#_3-3-如何在c-11中传递对std-thread的引用","children":[]},{"level":3,"title":"3.4 将指向类成员函数的指针分配为线程函数","slug":"_3-4-将指向类成员函数的指针分配为线程函数","link":"#_3-4-将指向类成员函数的指针分配为线程函数","children":[]},{"level":3,"title":"3.5 参考","slug":"_3-5-参考","link":"#_3-5-参考","children":[]}]}],"git":{},"readingTime":{"minutes":3.43,"words":1030},"filePathRelative":"blog/编程基础/C++多线程入门/2020-05-29-[编程基础] C++多线程入门3-小心地将参数传递给线程.md","localizedDate":"2020年5月30日","excerpt":"<h1> [编程基础] C++多线程入门3-小心地将参数传递给线程</h1>\\n<p>原始C++标准仅支持单线程编程。新的C++标准(称为c++11或c++0x)于2011年发布。在c++11中，引入了新的线程库。因此运行本文程序需要C++至少符合c++11标准。</p>\\n<h2> 3 小心地将参数传递给线程</h2>\\n<p>要将参数传递给线程的关联可调用对象或函数，只需将其他参数传递给std::thread构造函数。默认情况下，所有参数都复制到新线程的内部存储中。让我们看一个例子：</p>\\n<h3> 3.1 在c++11中将简单参数传递给std::thread</h3>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>#include &lt;iostream&gt;\\n#include &lt;string&gt;\\n#include &lt;thread&gt;\\n\\nvoid threadCallback(int x, std::string str)\\n{\\n\\tstd::cout &lt;&lt; \\"Passed Number = \\" &lt;&lt; x &lt;&lt; std::endl;\\n\\tstd::cout &lt;&lt; \\"Passed String = \\" &lt;&lt; str &lt;&lt; std::endl;\\n}\\nint main()\\n{\\n\\tint x = 10;\\n\\tstd::string str = \\"Sample String\\";\\n\\tstd::thread threadObj(threadCallback, x, str);\\n\\tthreadObj.join();\\n\\treturn 0;\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
