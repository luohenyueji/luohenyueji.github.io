import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as e,c as o,a as n,b as s,d as c,e as i}from"./app-MsA2k2kn.js";const l={},u=n("h1",{id:"python-mxnet60分钟入门gluon教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python-mxnet60分钟入门gluon教程","aria-hidden":"true"},"#"),s(" [python] mxnet60分钟入门Gluon教程")],-1),r={href:"https://github.com/luohenyueji/Python-Study-Notes/blob/master/mxnet/A%2060-minute%20Gluon%20Crash%20Course.ipynb",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),k=n("br",null,null,-1),m=i(`<h2 id="_1-在mxnet中使用ndarray处理数据" tabindex="-1"><a class="header-anchor" href="#_1-在mxnet中使用ndarray处理数据" aria-hidden="true">#</a> 1 在mxnet中使用ndarray处理数据</h2><p>ndarray类似numpy,在mxnet下通过ndarray处理数据，ndarry类似与numpy。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># pip install -U mxnet 安装mxnet库</span>
<span class="token comment"># 如</span>
<span class="token keyword">from</span> mxnet <span class="token keyword">import</span> nd
<span class="token comment"># jupyter 多行输出</span>
<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>core<span class="token punctuation">.</span>interactiveshell <span class="token keyword">import</span> InteractiveShell
InteractiveShell<span class="token punctuation">.</span>ast_node_interactivity <span class="token operator">=</span> <span class="token string">&quot;all&quot;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-started" tabindex="-1"><a class="header-anchor" href="#get-started" aria-hidden="true">#</a> Get started</h3><p>基本操作</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 建立2行3列的矩阵</span>
nd<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[1. 2. 3.]
 [5. 6. 7.]]
&lt;NDArray 2x3 @cpu(0)&gt;
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 建立2行3列的矩阵，用1填充</span>
x <span class="token operator">=</span> nd<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[1. 1. 1.]
 [1. 1. 1.]]
&lt;NDArray 2x3 @cpu(0)&gt;
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 建立2行3列的矩阵，用随机数填充</span>
y <span class="token operator">=</span> nd<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[0.09762704 0.18568921 0.43037868]
 [0.6885315  0.20552671 0.71589124]]
&lt;NDArray 2x3 @cpu(0)&gt;
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 建立2行3列的矩阵，用2.0填充</span>
x <span class="token operator">=</span> nd<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span>
x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[2. 2. 2.]
 [2. 2. 2.]]
&lt;NDArray 2x3 @cpu(0)&gt;
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 查看变量x的维度，大小，类型</span>
<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> x<span class="token punctuation">.</span>size<span class="token punctuation">,</span> x<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>((2, 3), 6, numpy.float32)
</code></pre><h3 id="operations" tabindex="-1"><a class="header-anchor" href="#operations" aria-hidden="true">#</a> Operations</h3><p>运算</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 对应元素相乘</span>
x <span class="token operator">*</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[0.19525409 0.37137842 0.86075735]
 [1.377063   0.41105342 1.4317825 ]]
&lt;NDArray 2x3 @cpu(0)&gt;
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 返回e的y幂次方</span>
y<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[1.1025515 1.204048  1.5378398]
 [1.9907899 1.2281718 2.0460093]]
&lt;NDArray 2x3 @cpu(0)&gt;
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将y转置后进行x,y矩阵乘法</span>
nd<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">.</span>T<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[1.4273899 3.219899 ]
 [1.4273899 3.219899 ]]
&lt;NDArray 2x2 @cpu(0)&gt;
</code></pre><h3 id="indexing" tabindex="-1"><a class="header-anchor" href="#indexing" aria-hidden="true">#</a> indexing</h3><p>切片</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 读取第2第3个数的值，nd序号从0开始</span>
y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[0.71589124]
&lt;NDArray 1 @cpu(0)&gt;
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 读取第2列到第3列的值</span>
y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[0.18568921 0.43037868]
 [0.20552671 0.71589124]]
&lt;NDArray 2x2 @cpu(0)&gt;
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 读取第2列到第3列的值，并将赋值为4</span>
y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[0.09762704 4.         4.        ]
 [0.6885315  4.         4.        ]]
&lt;NDArray 2x3 @cpu(0)&gt;
</code></pre><h3 id="converting-between-mxnet-ndarray-and-numpy" tabindex="-1"><a class="header-anchor" href="#converting-between-mxnet-ndarray-and-numpy" aria-hidden="true">#</a> Converting between MXNet NDArray and NumPy</h3><p>mxnet的ndarry与numpy互相转换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将x转换为numpy格式</span>
a <span class="token operator">=</span> x<span class="token punctuation">.</span>asnumpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>(numpy.ndarray, array([[2., 2., 2.],
        [2., 2., 2.]], dtype=float32))
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将numpy数组转换ndarray格式</span>
nd<span class="token punctuation">.</span>array<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[2. 2. 2.]
 [2. 2. 2.]]
&lt;NDArray 2x3 @cpu(0)&gt;
</code></pre><h2 id="_2-通过mxnet的gluon模块建立网络" tabindex="-1"><a class="header-anchor" href="#_2-通过mxnet的gluon模块建立网络" aria-hidden="true">#</a> 2 通过mxnet的Gluon模块建立网络</h2><p>Gluon包是MXNet的高级封装接口，易于使用，同时保持了底层API的大部分灵活性。Gluon包为深入学习提供了一个清晰、简洁、简单的API。它使得在不牺牲训练速度的情况下，使得建立和训练深度学习模型更加容易。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mxnet <span class="token keyword">import</span> nd
<span class="token comment"># 载入gluon包</span>
<span class="token keyword">from</span> mxnet<span class="token punctuation">.</span>gluon <span class="token keyword">import</span> nn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-your-neural-network-s-first-layer" tabindex="-1"><a class="header-anchor" href="#create-your-neural-network-s-first-layer" aria-hidden="true">#</a> Create your neural network’s first layer</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 建立输出节点为2的全连接层(dense层，类似keras)</span>
layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
layer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>Dense(None -&gt; 2, linear)
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用默认的方法初始权重</span>
layer<span class="token punctuation">.</span>initialize<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 生成3行4列的矩阵</span>
x <span class="token operator">=</span> nd<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 输入x到layer层</span>
layer<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[ 0.0009278  -0.00674768]
 [-0.02683341  0.00671751]
 [ 0.00798804  0.02131375]]
&lt;NDArray 3x2 @cpu(0)&gt;
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 打印权重数据</span>
layer<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[-0.01631819 -0.00312688  0.0408415   0.04370362]
 [ 0.00404529 -0.0028032   0.00952624 -0.01501013]]
&lt;NDArray 2x4 @cpu(0)&gt;
</code></pre><h3 id="chain-layers-into-a-neural-network" tabindex="-1"><a class="header-anchor" href="#chain-layers-into-a-neural-network" aria-hidden="true">#</a> Chain layers into a neural network</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 建立一个Sequential序贯模型</span>
<span class="token comment"># nn.Sequential用法类似与nn.Dense，但都是nn.Block的子类</span>
net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># Add a sequence of layers.</span>
<span class="token comment"># lenet，用到了卷积层，池化层，全连接层</span>
net<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token comment"># Similar to Dense, it is not necessary to specify the input channels</span>
        <span class="token comment"># by the argument \`in_channels\`, which will be  automatically inferred</span>
        <span class="token comment"># in the first forward pass. Also, we apply a relu activation on the</span>
        <span class="token comment"># output. In addition, we can use a tuple to specify a  non-square</span>
        <span class="token comment"># kernel size, such as \`kernel_size=(2,4)\`</span>
        nn<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;relu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment"># One can also use a tuple to specify non-symmetric pool and stride sizes</span>
        nn<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>channels<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;relu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment"># The dense layer will automatically reshape the 4-D output of last</span>
        <span class="token comment"># max pooling layer into the 2-D shape: (x.shape[0], x.size/x.shape[0])</span>
        nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>Sequential(
  (0): Conv2D(None -&gt; 6, kernel_size=(5, 5), stride=(1, 1), Activation(relu))
  (1): MaxPool2D(size=(2, 2), stride=(2, 2), padding=(0, 0), ceil_mode=False, global_pool=False, pool_type=max, layout=NCHW)
  (2): Conv2D(None -&gt; 16, kernel_size=(3, 3), stride=(1, 1), Activation(relu))
  (3): MaxPool2D(size=(2, 2), stride=(2, 2), padding=(0, 0), ceil_mode=False, global_pool=False, pool_type=max, layout=NCHW)
  (4): Dense(None -&gt; 120, Activation(relu))
  (5): Dense(None -&gt; 84, Activation(relu))
  (6): Dense(None -&gt; 10, linear)
)
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 初始化网络</span>
net<span class="token punctuation">.</span>initialize<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># Input shape is (batch_size, color_channels, height, width)</span>
x <span class="token operator">=</span> nd<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
y<span class="token punctuation">.</span>shape
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>(4, 10)
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 输出第一层权重的维度以及第6层偏置的维度</span>
<span class="token punctuation">(</span>net<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">,</span> net<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bias<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>((6, 1, 5, 5), (84,))
</code></pre><h3 id="create-a-neural-network-flexibly" tabindex="-1"><a class="header-anchor" href="#create-a-neural-network-flexibly" aria-hidden="true">#</a> Create a neural network flexibly</h3><p>通过nn.Block创建一个更加灵活的神经网络结构，主要有两部分：</p><ul><li>__ init __ create the layers 创建层</li><li>forward define the forward function 确定前向传播层函数功能</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MixMLP</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Block<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Run \`nn.Block\`&#39;s init method</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>MixMLP<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>blk <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>blk<span class="token punctuation">.</span>add<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;relu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;relu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>dense <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        y <span class="token operator">=</span> nd<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>blk<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dense<span class="token punctuation">(</span>y<span class="token punctuation">)</span>

net <span class="token operator">=</span> MixMLP<span class="token punctuation">(</span><span class="token punctuation">)</span>
net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>MixMLP(
  (blk): Sequential(
    (0): Dense(None -&gt; 3, Activation(relu))
    (1): Dense(None -&gt; 4, Activation(relu))
  )
  (dense): Dense(None -&gt; 5, linear)
)
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 初始化网络</span>
net<span class="token punctuation">.</span>initialize<span class="token punctuation">(</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> nd<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[0. 0. 0. 0.]
 [0. 0. 0. 0.]]
&lt;NDArray 2x4 @cpu(0)&gt;






[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
&lt;NDArray 2x5 @cpu(0)&gt;
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 打印权重</span>
net<span class="token punctuation">.</span>blk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[-0.02634858  0.05334064  0.02748809]
 [ 0.06669661 -0.01711474  0.01647211]
 [-0.04485548  0.00594983 -0.06654498]
 [ 0.04964591 -0.06058505  0.03413684]]
&lt;NDArray 4x3 @cpu(0)&gt;
</code></pre><h2 id="_3-训练神经网络" tabindex="-1"><a class="header-anchor" href="#_3-训练神经网络" aria-hidden="true">#</a> 3 训练神经网络</h2><p>本节我们将导入数据，建立网络模型，并进行训练。最后通过matplotlib进行绘图和基准测试benchmarking</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Uncomment the following line if matplotlib is not installed.</span>
<span class="token comment"># !pip install matplotlib</span>

<span class="token keyword">from</span> mxnet <span class="token keyword">import</span> nd<span class="token punctuation">,</span> gluon<span class="token punctuation">,</span> init<span class="token punctuation">,</span> autograd
<span class="token keyword">from</span> mxnet<span class="token punctuation">.</span>gluon <span class="token keyword">import</span> nn
<span class="token keyword">from</span> mxnet<span class="token punctuation">.</span>gluon<span class="token punctuation">.</span>data<span class="token punctuation">.</span>vision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> transforms
<span class="token keyword">from</span> IPython <span class="token keyword">import</span> display
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> time
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-data" tabindex="-1"><a class="header-anchor" href="#get-data" aria-hidden="true">#</a> Get data</h3><p>手写数字mnist数据集是深度学习中最常用的数据集之一。但要得到99%的准确度太简单了。这里我们使用了一个类似但稍微复杂的数据集，叫做FashionMNIST。目标不再是对数字进行分类，而是对服装类型进行分类。数据集可以通过Gluon的data.vision.datases模块自动下载。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mnist_train <span class="token operator">=</span> datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> mnist_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment">#FashioniMMIST图像为28*28d的灰度图，y为类别标签</span>
<span class="token punctuation">(</span><span class="token string">&#39;X shape: &#39;</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">&#39;X dtype&#39;</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> <span class="token string">&#39;y:&#39;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>(&#39;X shape: &#39;, (28, 28, 1), &#39;X dtype&#39;, numpy.uint8, &#39;y:&#39;, 2)
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># text_labels为分类名</span>
text_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;t-shirt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;trouser&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pullover&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dress&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;coat&#39;</span><span class="token punctuation">,</span>
               <span class="token string">&#39;sandal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shirt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sneaker&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ankle boot&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># 提取前十个数据</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> mnist_train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token comment"># plot images</span>
<span class="token comment"># 以png格式显示图片</span>
display<span class="token punctuation">.</span>set_matplotlib_formats<span class="token punctuation">(</span><span class="token string">&#39;png&#39;</span><span class="token punctuation">)</span>
_<span class="token punctuation">,</span> figs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> f<span class="token punctuation">,</span>x<span class="token punctuation">,</span>yi <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>figs<span class="token punctuation">,</span> X<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 3D-&gt;2D by removing the last channel dim</span>
    f<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asnumpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ax <span class="token operator">=</span> f<span class="token punctuation">.</span>axes
    ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>text_labels<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>yi<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>title<span class="token punctuation">.</span>set_fontsize<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>get_xaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>get_yaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbHVtaW5pb3VzL2FydGljbGVfcGljdHVyZV93YXJlaG91c2UvcmF3L21hc3Rlci9QeXRob24tU3R1ZHktTm90ZXMvbXhuZXQvQSUyMDYwLW1pbnV0ZSUyMEdsdW9uJTIwQ3Jhc2glMjBDb3Vyc2Uvb3V0cHV0XzM5XzAucG5n" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>为了将图像输入Gulon模型，我们用ToTensor将图像转换为浮点数据，同时对其进行标准化，标准化均值和方差分别为0.13和0.31</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>transformer <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>
    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token number">0.13</span><span class="token punctuation">,</span> <span class="token number">0.31</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
mnist_train <span class="token operator">=</span> mnist_train<span class="token punctuation">.</span>transform_first<span class="token punctuation">(</span>transformer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使得训练效果更好，我们将打乱数据，同时设定num_workers=4即四个线程来设置读取数据的进程数，目的是：用多进程加速数据的读取</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>batch_size <span class="token operator">=</span> <span class="token number">256</span>
train_data <span class="token operator">=</span> gluon<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>
    mnist_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的train_data是一个包含图像和其对应标签的iterable object</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 打印数据</span>
<span class="token keyword">for</span> data<span class="token punctuation">,</span> label <span class="token keyword">in</span> train_data<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> label<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>(256, 1, 28, 28) (256,)
</code></pre><p>最后我们创建验证集数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mnist_valid <span class="token operator">=</span> gluon<span class="token punctuation">.</span>data<span class="token punctuation">.</span>vision<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
valid_data <span class="token operator">=</span> gluon<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>
    mnist_valid<span class="token punctuation">.</span>transform_first<span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">,</span>
    batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="define-the-model" tabindex="-1"><a class="header-anchor" href="#define-the-model" aria-hidden="true">#</a> Define the model</h3><p>我们建立一个模型，用常用的Xavier法来初始化</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>
net<span class="token punctuation">.</span>add<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;relu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>channels<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;relu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
net<span class="token punctuation">.</span>initialize<span class="token punctuation">(</span>init<span class="token operator">=</span>init<span class="token punctuation">.</span>Xavier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义loss</span>
softmax_cross_entropy <span class="token operator">=</span> gluon<span class="token punctuation">.</span>loss<span class="token punctuation">.</span>SoftmaxCrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义训练器，设定学习率为0.1</span>
trainer <span class="token operator">=</span> gluon<span class="token punctuation">.</span>Trainer<span class="token punctuation">(</span>net<span class="token punctuation">.</span>collect_params<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;sgd&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;learning_rate&#39;</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="training" tabindex="-1"><a class="header-anchor" href="#training" aria-hidden="true">#</a> Training</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 我们创造一个辅助函数来计算精度</span>
<span class="token keyword">def</span> <span class="token function">acc</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># output: (batch, num_output) float32 ndarray</span>
    <span class="token comment"># label: (batch, ) int32 ndarray</span>
    <span class="token comment"># asscalar()表示返回值的标量</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> label<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&#39;float32&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asscalar<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 训练网络2个epochs</span>
<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    train_loss<span class="token punctuation">,</span> train_acc<span class="token punctuation">,</span> valid_acc <span class="token operator">=</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span>
    tic <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> data<span class="token punctuation">,</span> label <span class="token keyword">in</span> train_data<span class="token punctuation">:</span>
        <span class="token comment"># forward + backward</span>
        <span class="token keyword">with</span> autograd<span class="token punctuation">.</span>record<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            output <span class="token operator">=</span> net<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
            loss <span class="token operator">=</span> softmax_cross_entropy<span class="token punctuation">(</span>output<span class="token punctuation">,</span> label<span class="token punctuation">)</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># update parameters</span>
        trainer<span class="token punctuation">.</span>step<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span>
        <span class="token comment"># calculate training metrics</span>
        <span class="token comment"># 计算loss</span>
        train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asscalar<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 计算acc</span>
        train_acc <span class="token operator">+=</span> acc<span class="token punctuation">(</span>output<span class="token punctuation">,</span> label<span class="token punctuation">)</span>
    <span class="token comment"># calculate validation accuracy</span>
    <span class="token keyword">for</span> data<span class="token punctuation">,</span> label <span class="token keyword">in</span> valid_data<span class="token punctuation">:</span>
        valid_acc <span class="token operator">+=</span> acc<span class="token punctuation">(</span>net<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Epoch %d: loss %.3f, train acc %.3f, test acc %.3f, in %.1f sec&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>
            epoch<span class="token punctuation">,</span> train_loss<span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token punctuation">,</span> train_acc<span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token punctuation">,</span>
            valid_acc<span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>valid_data<span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>tic<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>Epoch 0: loss 0.730, train acc 0.728, test acc 0.812, in 18.5 sec
Epoch 1: loss 0.463, train acc 0.828, test acc 0.856, in 18.6 sec
</code></pre><h3 id="save-the-model" tabindex="-1"><a class="header-anchor" href="#save-the-model" aria-hidden="true">#</a> Save the model</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 保存模型参数</span>
net<span class="token punctuation">.</span>save_parameters<span class="token punctuation">(</span><span class="token string">&#39;net.params&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="载入模型进行推理" tabindex="-1"><a class="header-anchor" href="#载入模型进行推理" aria-hidden="true">#</a> 载入模型进行推理</h3><h4 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mxnet <span class="token keyword">import</span> nd
<span class="token keyword">from</span> mxnet <span class="token keyword">import</span> gluon
<span class="token keyword">from</span> mxnet<span class="token punctuation">.</span>gluon <span class="token keyword">import</span> nn
<span class="token keyword">from</span> mxnet<span class="token punctuation">.</span>gluon<span class="token punctuation">.</span>data<span class="token punctuation">.</span>vision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> transforms
<span class="token keyword">from</span> IPython <span class="token keyword">import</span> display
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入网络结构</span>
net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>
net<span class="token punctuation">.</span>add<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;relu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span>channels<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;relu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        nn<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入模型</span>
net<span class="token punctuation">.</span>load_parameters<span class="token punctuation">(</span><span class="token string">&#39;net.params&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="predict" tabindex="-1"><a class="header-anchor" href="#predict" aria-hidden="true">#</a> Predict</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 设置训练数据的处理信息</span>
transformer <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>
    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token number">0.13</span><span class="token punctuation">,</span> <span class="token number">0.31</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 图像预测</span>
mnist_valid <span class="token operator">=</span> datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> mnist_valid<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>
preds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> X<span class="token punctuation">:</span>
    x <span class="token operator">=</span> transformer<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    pred <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&#39;int32&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asscalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 可视化预测结果</span>
_<span class="token punctuation">,</span> figs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
text_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;t-shirt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;trouser&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pullover&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dress&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;coat&#39;</span><span class="token punctuation">,</span>
               <span class="token string">&#39;sandal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shirt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sneaker&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ankle boot&#39;</span><span class="token punctuation">]</span>
display<span class="token punctuation">.</span>set_matplotlib_formats<span class="token punctuation">(</span><span class="token string">&#39;png&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> f<span class="token punctuation">,</span>x<span class="token punctuation">,</span>yi<span class="token punctuation">,</span>pyi <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>figs<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> preds<span class="token punctuation">)</span><span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asnumpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ax <span class="token operator">=</span> f<span class="token punctuation">.</span>axes
    ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>text_labels<span class="token punctuation">[</span>yi<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&#39;\\n&#39;</span><span class="token operator">+</span>text_labels<span class="token punctuation">[</span>pyi<span class="token punctuation">]</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>title<span class="token punctuation">.</span>set_fontsize<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>get_xaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    ax<span class="token punctuation">.</span>get_yaxis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_visible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbHVtaW5pb3VzL2FydGljbGVfcGljdHVyZV93YXJlaG91c2UvcmF3L21hc3Rlci9QeXRob24tU3R1ZHktTm90ZXMvbXhuZXQvQSUyMDYwLW1pbnV0ZSUyMEdsdW9uJTIwQ3Jhc2glMjBDb3Vyc2Uvb3V0cHV0XzY1XzAucG5n" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h4 id="predict-with-models-from-gluon-model-zoo" tabindex="-1"><a class="header-anchor" href="#predict-with-models-from-gluon-model-zoo" aria-hidden="true">#</a> Predict with models from Gluon model zoo</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mxnet<span class="token punctuation">.</span>gluon<span class="token punctuation">.</span>model_zoo <span class="token keyword">import</span> vision <span class="token keyword">as</span> models
<span class="token keyword">from</span> mxnet<span class="token punctuation">.</span>gluon<span class="token punctuation">.</span>utils <span class="token keyword">import</span> download
<span class="token keyword">from</span> mxnet <span class="token keyword">import</span> image
<span class="token comment"># 从预训练的Gluon模型预测图像</span>
net <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet50_v2<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 获得标签文件</span>
url <span class="token operator">=</span> <span class="token string">&#39;http://data.mxnet.io/models/imagenet/synset.txt&#39;</span>
fname <span class="token operator">=</span> download<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    text_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>l<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> l <span class="token keyword">in</span> f<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 随机下载狗的文件</span>
url <span class="token operator">=</span> &#39;https<span class="token punctuation">:</span><span class="token operator">//</span>upload<span class="token punctuation">.</span>wikimedia<span class="token punctuation">.</span>org<span class="token operator">/</span>wikipedia<span class="token operator">/</span>commons<span class="token operator">/</span>thumb<span class="token operator">/</span>b<span class="token operator">/</span>b5<span class="token operator">/</span>\\
Golden_Retriever_medium<span class="token operator">-</span>to<span class="token operator">-</span>light<span class="token operator">-</span>coat<span class="token punctuation">.</span>jpg<span class="token operator">/</span>\\
365px<span class="token operator">-</span>Golden_Retriever_medium<span class="token operator">-</span>to<span class="token operator">-</span>light<span class="token operator">-</span>coat<span class="token punctuation">.</span>jpg&#39;
fname <span class="token operator">=</span> download<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
x <span class="token operator">=</span> image<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>fname<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将获得的图像变为224大小</span>
x <span class="token operator">=</span> image<span class="token punctuation">.</span>resize_short<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span>
x<span class="token punctuation">,</span> _ <span class="token operator">=</span> image<span class="token punctuation">.</span>center_crop<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>x<span class="token punctuation">.</span>asnumpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbHVtaW5pb3VzL2FydGljbGVfcGljdHVyZV93YXJlaG91c2UvcmF3L21hc3Rlci9QeXRob24tU3R1ZHktTm90ZXMvbXhuZXQvQSUyMDYwLW1pbnV0ZSUyMEdsdW9uJTIwQ3Jhc2glMjBDb3Vyc2Uvb3V0cHV0XzcwXzAucG5n" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 设置数据处理方式</span>
<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> data<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    rgb_mean <span class="token operator">=</span> nd<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    rgb_std <span class="token operator">=</span> nd<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&#39;float32&#39;</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span> <span class="token operator">-</span> rgb_mean<span class="token punctuation">)</span> <span class="token operator">/</span> rgb_std
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 结果分类，并输出top5结果</span>
prob <span class="token operator">=</span> net<span class="token punctuation">(</span>transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>softmax<span class="token punctuation">(</span><span class="token punctuation">)</span>
idx <span class="token operator">=</span> prob<span class="token punctuation">.</span>topk<span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> idx<span class="token punctuation">:</span>
    i <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>asscalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;With prob = %.5f, it contains %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>
        prob<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>asscalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text_labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>With prob = 0.98240, it contains golden retriever
With prob = 0.00809, it contains English setter
With prob = 0.00262, it contains Irish setter, red setter
With prob = 0.00223, it contains cocker spaniel, English cocker spaniel, cocker
With prob = 0.00177, it contains Labrador retriever
</code></pre>`,112);function v(b,h){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",r,[s("代码下载"),c(a)]),s("，适合做过深度学习的人使用。入门教程地址："),d,s(" https://beta.mxnet.io/guide/getting-started/crash-course/index.html"),k,s(" mxnet安装方法：pip install mxnet**")]),m])}const x=t(l,[["render",v],["__file","2019-08-13-_python_ mxnet60分钟入门Gluon教程.html.vue"]]);export{x as default};
