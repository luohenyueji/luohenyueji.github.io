const e=JSON.parse('{"key":"v-d41e9c36","path":"/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/2020-05-29-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A84-%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%E5%92%8C%E8%B5%84%E6%BA%90%E7%AB%9E%E4%BA%89.html","title":"[编程基础] C++多线程入门4-数据共享和资源竞争","lang":"zh-CN","frontmatter":{"date":"2020-05-29T16:51:33.000Z","category":["编程基础"],"tag":["编程基础"],"description":"[编程基础] C++多线程入门4-数据共享和资源竞争 原始C++标准仅支持单线程编程。新的C++标准(称为C++11或C++0x)于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++ 11标准。 4 数据共享和资源竞争 在多线程环境中，线程之间的数据共享非常容易。但是，这种易于共享的数据可能会导致应用程序出现问题。这样的问题之一就是资源竞争。 4.1 资源竞争 竞争条件是多线程应用程序中出现的一种错误。当两个或多个线程并行执行一组操作时，它们将访问同一内存位置。同样，其中的一个或多个线程会修改该内存位置中的数据，这有时会导致意外结果。这称为竞争条件。 竞赛条件通常不会每次都出现，因此通常很难找到和复制。仅当两个或多个线程的相对执行顺序导致意外结果时，它们才会发生。让我们通过一个例子来理解。 让我们创建一个Wallet类，它在内部维护money并提供一个服务/功能，即addMoney()。此成员函数按指定的计数递增钱包对象的内部货币。","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/2020-05-29-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A84-%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%E5%92%8C%E8%B5%84%E6%BA%90%E7%AB%9E%E4%BA%89.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[编程基础] C++多线程入门4-数据共享和资源竞争"}],["meta",{"property":"og:description","content":"[编程基础] C++多线程入门4-数据共享和资源竞争 原始C++标准仅支持单线程编程。新的C++标准(称为C++11或C++0x)于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++ 11标准。 4 数据共享和资源竞争 在多线程环境中，线程之间的数据共享非常容易。但是，这种易于共享的数据可能会导致应用程序出现问题。这样的问题之一就是资源竞争。 4.1 资源竞争 竞争条件是多线程应用程序中出现的一种错误。当两个或多个线程并行执行一组操作时，它们将访问同一内存位置。同样，其中的一个或多个线程会修改该内存位置中的数据，这有时会导致意外结果。这称为竞争条件。 竞赛条件通常不会每次都出现，因此通常很难找到和复制。仅当两个或多个线程的相对执行顺序导致意外结果时，它们才会发生。让我们通过一个例子来理解。 让我们创建一个Wallet类，它在内部维护money并提供一个服务/功能，即addMoney()。此成员函数按指定的计数递增钱包对象的内部货币。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"落痕月极"}],["meta",{"property":"article:tag","content":"编程基础"}],["meta",{"property":"article:published_time","content":"2020-05-29T16:51:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[编程基础] C++多线程入门4-数据共享和资源竞争\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-29T16:51:33.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"4 数据共享和资源竞争","slug":"_4-数据共享和资源竞争","link":"#_4-数据共享和资源竞争","children":[{"level":3,"title":"4.1 资源竞争","slug":"_4-1-资源竞争","link":"#_4-1-资源竞争","children":[]},{"level":3,"title":"4.2 如何解决比赛条件？","slug":"_4-2-如何解决比赛条件","link":"#_4-2-如何解决比赛条件","children":[]},{"level":3,"title":"4.3 参考","slug":"_4-3-参考","link":"#_4-3-参考","children":[]}]}],"git":{},"readingTime":{"minutes":3.69,"words":1107},"filePathRelative":"blog/编程基础/C++多线程入门/2020-05-29-[编程基础] C++多线程入门4-数据共享和资源竞争.md","localizedDate":"2020年5月30日","excerpt":"<h1> [编程基础] C++多线程入门4-数据共享和资源竞争</h1>\\n<p>原始C++标准仅支持单线程编程。新的C++标准(称为C++11或C++0x)于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++ 11标准。</p>\\n<h2> 4 数据共享和资源竞争</h2>\\n<p>在多线程环境中，线程之间的数据共享非常容易。但是，这种易于共享的数据可能会导致应用程序出现问题。这样的问题之一就是资源竞争。</p>\\n<h3> 4.1 资源竞争</h3>\\n<p>竞争条件是多线程应用程序中出现的一种错误。当两个或多个线程并行执行一组操作时，它们将访问同一内存位置。同样，其中的一个或多个线程会修改该内存位置中的数据，这有时会导致意外结果。这称为竞争条件。\\n竞赛条件通常不会每次都出现，因此通常很难找到和复制。仅当两个或多个线程的相对执行顺序导致意外结果时，它们才会发生。让我们通过一个例子来理解。\\n让我们创建一个Wallet类，它在内部维护money并提供一个服务/功能，即addMoney()。此成员函数按指定的计数递增钱包对象的内部货币。</p>","autoDesc":true}');export{e as data};
