import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-MsA2k2kn.js";const u={},l=n("h1",{id:"python-基于gradio可视化部署机器学习应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python-基于gradio可视化部署机器学习应用","aria-hidden":"true"},"#"),s(" [python] 基于Gradio可视化部署机器学习应用")],-1),r=n("p",null,"Gradio是一个开源的Python库，用于构建机器学习和数据科学演示应用。有了Gradio，你可以围绕你的机器学习模型或数据科学工作流程快速创建一个简单漂亮的用户界面。Gradio适用于以下情况：",-1),k=n("ul",null,[n("li",null,[n("p",null,"为客户/合作者/用户/学生演示你的机器学习模型。")]),n("li",null,[n("p",null,"通过自动共享链接快速部署你的模型，并获得对模型性能的反馈。")]),n("li",null,[n("p",null,"在开发过程中使用内置的操作和解释工具交互式地调试你的模型。")])],-1),d={href:"https://github.com/gradio-app/gradio",target:"_blank",rel:"noopener noreferrer"},v={href:"https://gradio.app/docs/",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"如果在使用中遇到问题，多查查官方文档",-1),b={href:"https://gradio.app/demos/",target:"_blank",rel:"noopener noreferrer"},g=p(`<blockquote><p>pip install gradio</p></blockquote><p>[toc]</p><h2 id="_1-基础使用" tabindex="-1"><a class="header-anchor" href="#_1-基础使用" aria-hidden="true">#</a> 1 基础使用</h2><p>Gradio只需要几行代码就可以建立一个展示应用，一些基础应用搭建示例将在本章进行介绍。</p><h3 id="_1-1-快速入门" tabindex="-1"><a class="header-anchor" href="#_1-1-快速入门" aria-hidden="true">#</a> 1.1 快速入门</h3><h4 id="_1-1-1-interface构建应用" tabindex="-1"><a class="header-anchor" href="#_1-1-1-interface构建应用" aria-hidden="true">#</a> 1.1.1 Interface构建应用</h4><p>通过Interface类可以快速构建应用。</p><p><strong>简单应用</strong></p><p>下面的示例建立了对输入文本进行简单处理的应用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token comment"># 输入文本处理程序</span>
<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span>

<span class="token comment"># 接口创建函数</span>
<span class="token comment"># fn设置处理函数，inputs设置输入接口组件，outputs设置输出接口组件</span>
<span class="token comment"># fn,inputs,outputs都是必填函数</span>
demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>fn<span class="token operator">=</span>greet<span class="token punctuation">,</span> inputs<span class="token operator">=</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序后，打开http://localhost:7860即可看到网页效果。左边是文本输入框，右边是结果展示框。Clear按钮用于重置网页状态，Submit按钮用于执行处理程序，Flag按钮用于保存结果到本地。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[python] 基于Gradio可视化部署机器学习应用/image/img1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在上面的示例中，我们看到了一个简单的基于文本的函数，但该函数可以是任何函数，从音乐生成器到税务计算器，再到机器学习模型的预测函数。核心的Interface类被初始化，有三个必要的参数。</p><ul><li>fn: 围绕用户界面的函数</li><li>输入：用于输入的组件（例如：&quot;text&quot;、&quot;image）。</li><li>输出：用于输出的组件（例如：&quot;text&quot;、&quot;image）。</li></ul><p><strong>自定义输入组件</strong></p><p>以下代码展示了如何自定义输入组件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span>

demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>
    fn<span class="token operator">=</span>greet<span class="token punctuation">,</span>
    <span class="token comment"># 自定义输入框</span>
    <span class="token comment"># 具体设置方法查看官方文档</span>
    inputs<span class="token operator">=</span>gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>lines<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> placeholder<span class="token operator">=</span><span class="token string">&quot;Name Here...&quot;</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">&quot;my input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    outputs<span class="token operator">=</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多输入和多输出组件设置</strong></p><p>对于复杂程序，输入列表中的每个组件按顺序对应于函数的一个参数。输出列表中的每个组件按顺序排列对应于函数返回的一个值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token comment"># 该函数有3个输入参数和2个输出参数</span>
<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> is_morning<span class="token punctuation">,</span> temperature<span class="token punctuation">)</span><span class="token punctuation">:</span>
    salutation <span class="token operator">=</span> <span class="token string">&quot;Good morning&quot;</span> <span class="token keyword">if</span> is_morning <span class="token keyword">else</span> <span class="token string">&quot;Good evening&quot;</span>
    greeting <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>salutation<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">. It is </span><span class="token interpolation"><span class="token punctuation">{</span>temperature<span class="token punctuation">}</span></span><span class="token string"> degrees today&quot;</span></span>
    celsius <span class="token operator">=</span> <span class="token punctuation">(</span>temperature <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">9</span>
    <span class="token keyword">return</span> greeting<span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>celsius<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>
    fn<span class="token operator">=</span>greet<span class="token punctuation">,</span>
    <span class="token comment"># 按照处理程序设置输入组件</span>
    inputs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;checkbox&quot;</span><span class="token punctuation">,</span> gr<span class="token punctuation">.</span>Slider<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment"># 按照处理程序设置输出组件</span>
    outputs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码运行处理结果如下图所示：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[python] 基于Gradio可视化部署机器学习应用/image/img2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>图像组件</strong></p><p>Gradio支持许多类型的组件，如image、dataframe、video。使用示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr


<span class="token keyword">def</span> <span class="token function">sepia</span><span class="token punctuation">(</span>input_img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token comment"># 处理图像</span>
    sepia_filter <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token number">0.393</span><span class="token punctuation">,</span> <span class="token number">0.769</span><span class="token punctuation">,</span> <span class="token number">0.189</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token punctuation">[</span><span class="token number">0.349</span><span class="token punctuation">,</span> <span class="token number">0.686</span><span class="token punctuation">,</span> <span class="token number">0.168</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token punctuation">[</span><span class="token number">0.272</span><span class="token punctuation">,</span> <span class="token number">0.534</span><span class="token punctuation">,</span> <span class="token number">0.131</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    sepia_img <span class="token operator">=</span> input_img<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>sepia_filter<span class="token punctuation">.</span>T<span class="token punctuation">)</span>
    sepia_img <span class="token operator">/=</span> sepia_img<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> sepia_img

<span class="token comment"># shape设置输入图像大小</span>
demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>sepia<span class="token punctuation">,</span> gr<span class="token punctuation">.</span>Image<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用Image组件作为输入时，函数将收到一个维度为（w,h,3)的numpy数组，按照RGB的通道顺序排列。要注意的是，我们的输入图像组件带有一个编辑按钮🖉，可以对图像进行裁剪和放大。以这种方式处理图像可以帮助揭示机器学习模型中的偏差或隐藏的缺陷。此外对于输入组件有个shape参数，指的设置输入图像大小。但是处理方式是保持长宽比的情况下，将图像最短边缩放为指定长度，然后按照中心裁剪方式裁剪最长边到指定长度。当图像不大的情况，一种更好的方式是不设置shape，这样直接传入原图。输入组件Image也可以设置输入类型type，比如type=filepath设置传入处理图像的路径。具体可以查看官方文档，😁文档写的很清楚。 代码运行处理结果如下图所示：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[python] 基于Gradio可视化部署机器学习应用/image/img3.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-1-2-blocks构建应用" tabindex="-1"><a class="header-anchor" href="#_1-1-2-blocks构建应用" aria-hidden="true">#</a> 1.1.2 Blocks构建应用</h4><p>相比Interface，Blocks提供了一个低级别的API，用于设计具有更灵活布局和数据流的网络应用。Blocks允许控制组件在页面上出现的位置，处理复杂的数据流（例如，输出可以作为其他函数的输入），并根据用户交互更新组件的属性可见性。</p><p><strong>简单应用</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span>

<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    <span class="token comment"># 设置输入组件</span>
    name <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 设置输出组件</span>
    output <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Output Box&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 设置按钮</span>
    greet_btn <span class="token operator">=</span> gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;Greet&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 设置按钮点击事件</span>
    greet_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span>fn<span class="token operator">=</span>greet<span class="token punctuation">,</span> inputs<span class="token operator">=</span>name<span class="token punctuation">,</span> outputs<span class="token operator">=</span>output<span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Blocks方式需要with语句添加组件，如果不设置布局方式，那么组件将按照创建的顺序垂直出现在应用程序中，运行界面如下图示：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[python] 基于Gradio可视化部署机器学习应用/image/img4.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>多模块应用</strong></p><p>该例子介绍了一个多模块应用，其中各个模块的使用可以查看官方文档。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">def</span> <span class="token function">flip_text</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">flip_image</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>fliplr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    <span class="token comment"># 用markdown语法编辑输出一段话</span>
    gr<span class="token punctuation">.</span>Markdown<span class="token punctuation">(</span><span class="token string">&quot;Flip text or image files using this demo.&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 设置tab选项卡</span>
    <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Tab<span class="token punctuation">(</span><span class="token string">&quot;Flip Text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">#  Blocks特有组件，设置所有子组件按垂直排列</span>
        <span class="token comment"># 垂直排列是默认情况，不加也没关系</span>
        <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Column<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            text_input <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span><span class="token punctuation">)</span>
            text_output <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span><span class="token punctuation">)</span>
            text_button <span class="token operator">=</span> gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;Flip&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Tab<span class="token punctuation">(</span><span class="token string">&quot;Flip Image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Blocks特有组件，设置所有子组件按水平排列</span>
        <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Row<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            image_input <span class="token operator">=</span> gr<span class="token punctuation">.</span>Image<span class="token punctuation">(</span><span class="token punctuation">)</span>
            image_output <span class="token operator">=</span> gr<span class="token punctuation">.</span>Image<span class="token punctuation">(</span><span class="token punctuation">)</span>
        image_button <span class="token operator">=</span> gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;Flip&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># 设置折叠内容</span>
    <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Accordion<span class="token punctuation">(</span><span class="token string">&quot;Open for More!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        gr<span class="token punctuation">.</span>Markdown<span class="token punctuation">(</span><span class="token string">&quot;Look at me...&quot;</span><span class="token punctuation">)</span>

    text_button<span class="token punctuation">.</span>click<span class="token punctuation">(</span>flip_text<span class="token punctuation">,</span> inputs<span class="token operator">=</span>text_input<span class="token punctuation">,</span> outputs<span class="token operator">=</span>text_output<span class="token punctuation">)</span>
    image_button<span class="token punctuation">.</span>click<span class="token punctuation">(</span>flip_image<span class="token punctuation">,</span> inputs<span class="token operator">=</span>image_input<span class="token punctuation">,</span> outputs<span class="token operator">=</span>image_output<span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-关键特性" tabindex="-1"><a class="header-anchor" href="#_1-2-关键特性" aria-hidden="true">#</a> 1.2 关键特性</h3><p><strong>示例输入</strong></p><p>下面的代码提供了创建一个简单计算器的模板。该程序运行后，点击flag按钮会在运行目录下指定flagged/logs.csv保存输入记录。保存目录的修改和相关信息设置查看官方文档flagging项。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token comment"># 一个简单计算器</span>
<span class="token keyword">def</span> <span class="token function">calculator</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> operation<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> operation <span class="token operator">==</span> <span class="token string">&quot;add&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
    <span class="token keyword">elif</span> operation <span class="token operator">==</span> <span class="token string">&quot;subtract&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2
    <span class="token keyword">elif</span> operation <span class="token operator">==</span> <span class="token string">&quot;multiply&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> num1 <span class="token operator">*</span> num2
    <span class="token keyword">elif</span> operation <span class="token operator">==</span> <span class="token string">&quot;divide&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> num2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment"># 设置报错弹窗</span>
            <span class="token keyword">raise</span> gr<span class="token punctuation">.</span>Error<span class="token punctuation">(</span><span class="token string">&quot;Cannot divide by zero!&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> num1 <span class="token operator">/</span> num2

demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>
    calculator<span class="token punctuation">,</span>
    <span class="token comment"># 设置输入</span>
    <span class="token punctuation">[</span>
        <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span> 
        gr<span class="token punctuation">.</span>Radio<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;subtract&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;multiply&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;divide&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&quot;number&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment"># 设置输出</span>
    <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>
    <span class="token comment"># 设置输入参数示例</span>
    examples<span class="token operator">=</span><span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;divide&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;multiply&quot;</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;subtract&quot;</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment"># 设置网页标题</span>
    title<span class="token operator">=</span><span class="token string">&quot;Toy Calculator&quot;</span><span class="token punctuation">,</span>
    <span class="token comment"># 左上角的描述文字</span>
    description<span class="token operator">=</span><span class="token string">&quot;Here&#39;s a sample toy calculator. Enjoy!&quot;</span><span class="token punctuation">,</span>
    <span class="token comment"># 左下角的文字</span>
    article <span class="token operator">=</span> <span class="token string">&quot;Check out the examples&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>样式和排队</strong></p>`,41),h={href:"https://gradio.app/docs/",target:"_blank",rel:"noopener noreferrer"},y=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>img <span class="token operator">=</span> gr<span class="token punctuation">.</span>Image<span class="token punctuation">(</span><span class="token string">&quot;lion.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">(</span>height<span class="token operator">=</span><span class="token string">&#39;24&#39;</span><span class="token punctuation">,</span> rounded<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果函数推理时间较长，比如目标检测；或者应用程序处理流量过大，则需要使用queue方法进行排队。queue方法使用websockets，可以防止网络超时。使用方式如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 或</span>
<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    <span class="token comment">#...</span>
demo<span class="token punctuation">.</span>queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>生成器</strong></p><p>在某些情况下，你可能想显示一连串的输出，而不是单一的输出。例如，你可能有一个图像生成模型，如果你想显示在每个步骤中生成的图像，从而得到最终的图像。在这种情况下，你可以向Gradio提供一个生成器函数，而不是一个常规函数。下面是一个生成器的例子，每隔1秒返回1张图片。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> time

<span class="token comment"># 生成steps张图片，每隔1秒钟返回</span>
<span class="token keyword">def</span> <span class="token function">fake_diffusion</span><span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>steps<span class="token punctuation">)</span><span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        image <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">yield</span> image

demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>fake_diffusion<span class="token punctuation">,</span> 
                    <span class="token comment"># 设置滑窗，最小值为1，最大值为10，初始值为3，每次改动增减1位</span>
                    inputs<span class="token operator">=</span>gr<span class="token punctuation">.</span>Slider<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                    outputs<span class="token operator">=</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 生成器必须要queue函数</span>
demo<span class="token punctuation">.</span>queue<span class="token punctuation">(</span><span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-应用分享" tabindex="-1"><a class="header-anchor" href="#_1-3-应用分享" aria-hidden="true">#</a> 1.3 应用分享</h3><p><strong>互联网分享</strong></p><p>如果运行环境能够连接互联网，在launch函数中设置share参数为True，那么运行程序后。Gradio的服务器会提供XXXXX.gradio.app地址。通过其他设备，比如手机或者笔记本电脑，都可以访问该应用。这种方式下该链接只是本地服务器的代理，不会存储通过本地应用程序发送的任何数据。这个链接在有效期内是免费的，好处就是不需要自己搭建服务器，坏处就是太慢了，毕竟数据经过别人的服务器。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span>share<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Hugging Face托管</strong></p>`,11),q={href:"https://gradio.app/sharing_your_app/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://gradio.app/using_hugging_face_integrations/",target:"_blank",rel:"noopener noreferrer"},_=p(`<p><strong>局域网分享</strong></p><p>通过设置server_name=&#39;0.0.0.0&#39;（表示使用本机ip）,server_port（可不改，默认值是7860）。那么可以通过本机ip:端口号在局域网内分享应用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># show_error为True表示在控制台显示错误信息。</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span>server_name<span class="token operator">=</span><span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">,</span> server_port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> show_error<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>密码验证</strong></p><p>在首次打开网页前，可以设置账户密码。比如auth参数为（账户，密码）的元组数据。这种模式下不能够使用queue函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span>auth<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pass1234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想设置更为复杂的账户密码和密码提示，可以通过函数设置校验规则。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 账户和密码相同就可以通过
def same_auth(username, password):
    return username == password
demo.launch(auth=same_auth,auth_message=&quot;username and password must be the same&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-进阶使用" tabindex="-1"><a class="header-anchor" href="#_2-进阶使用" aria-hidden="true">#</a> 2 进阶使用</h2><h3 id="_2-1-interface进阶使用" tabindex="-1"><a class="header-anchor" href="#_2-1-interface进阶使用" aria-hidden="true">#</a> 2.1 interface进阶使用</h3><h4 id="_2-1-1-interface状态" tabindex="-1"><a class="header-anchor" href="#_2-1-1-interface状态" aria-hidden="true">#</a> 2.1.1 interface状态</h4><p><strong>全局变量</strong></p><p>全局变量的好处就是在调用函数后仍然能够保存，例如在机器学习中通过全局变量从外部加载一个大型模型，并在函数内部使用它，以便每次函数调用都不需要重新加载模型。下面就展示了全局变量使用的好处。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">track_score</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">:</span>
    scores<span class="token punctuation">.</span>append<span class="token punctuation">(</span>score<span class="token punctuation">)</span>
    <span class="token comment"># 返回分数top3</span>
    top_scores <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>scores<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> top_scores

demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>
    track_score<span class="token punctuation">,</span> 
    gr<span class="token punctuation">.</span>Number<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Score&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    gr<span class="token punctuation">.</span>JSON<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Top Scores&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>会话状态</strong></p><p>Gradio支持的另一种数据持久性是会话状态，数据在一个页面会话中的多次提交中持久存在。然而，数据不会在你模型的不同用户之间共享。会话状态的典型例子就是聊天机器人，你想访问用户之前提交的信息，但你不能将聊天记录存储在一个全局变量中，因为那样的话，聊天记录会在不同的用户之间乱成一团。注意该状态会在每个页面内的提交中持续存在，但如果您在另一个标签页中加载该演示（或刷新页面），该演示将不会共享聊天历史。</p><p>要在会话状态下存储数据，你需要做三件事。</p><ul><li>在你的函数中传入一个额外的参数，它代表界面的状态。</li><li>在函数的最后，将状态的更新值作为一个额外的返回值返回。</li><li>在添加输入和输出时添加state组件。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">def</span> <span class="token function">chat</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> history<span class="token punctuation">)</span><span class="token punctuation">:</span>
    history <span class="token operator">=</span> history <span class="token keyword">or</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    message <span class="token operator">=</span> message<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> message<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;how many&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> message<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;how&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Great&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Good&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Okay&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bad&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> message<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&quot;where&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Here&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;There&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Somewhere&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> <span class="token string">&quot;I don&#39;t know&quot;</span>
    history<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> history<span class="token punctuation">,</span> history

<span class="token comment"># 设置一个对话窗</span>
chatbot <span class="token operator">=</span> gr<span class="token punctuation">.</span>Chatbot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">(</span>color_map<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pink&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>
    chat<span class="token punctuation">,</span>
    <span class="token comment"># 添加state组件</span>
    <span class="token punctuation">[</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;state&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>chatbot<span class="token punctuation">,</span> <span class="token string">&quot;state&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment"># 设置没有保存数据的按钮</span>
    allow_flagging<span class="token operator">=</span><span class="token string">&quot;never&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2-interface交互" tabindex="-1"><a class="header-anchor" href="#_2-1-2-interface交互" aria-hidden="true">#</a> 2.1.2 interface交互</h4><p><strong>实时变化</strong></p><p>在Interface中设置live=True，则输出会跟随输入实时变化。这个时候界面不会有submit按钮，因为不需要手动提交输入。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">def</span> <span class="token function">calculator</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> operation<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> operation <span class="token operator">==</span> <span class="token string">&quot;add&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
    <span class="token keyword">elif</span> operation <span class="token operator">==</span> <span class="token string">&quot;subtract&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2
    <span class="token keyword">elif</span> operation <span class="token operator">==</span> <span class="token string">&quot;multiply&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> num1 <span class="token operator">*</span> num2
    <span class="token keyword">elif</span> operation <span class="token operator">==</span> <span class="token string">&quot;divide&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> num1 <span class="token operator">/</span> num2

demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>
    calculator<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>
        gr<span class="token punctuation">.</span>Radio<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;subtract&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;multiply&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;divide&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&quot;number&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;number&quot;</span><span class="token punctuation">,</span>
    live<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>流模式</strong></p><p>在许多情形下，我们的输入是实时视频流或者音频流，那么意味这数据不停地发送到后端，这是可以采用streaming模式处理数据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token keyword">def</span> <span class="token function">flip</span><span class="token punctuation">(</span>im<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>flipud<span class="token punctuation">(</span>im<span class="token punctuation">)</span>

demo <span class="token operator">=</span> gr<span class="token punctuation">.</span>Interface<span class="token punctuation">(</span>
    flip<span class="token punctuation">,</span> 
    gr<span class="token punctuation">.</span>Image<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&quot;webcam&quot;</span><span class="token punctuation">,</span> streaming<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token string">&quot;image&quot;</span><span class="token punctuation">,</span>
    live<span class="token operator">=</span><span class="token boolean">True</span>
<span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-blocks进阶使用" tabindex="-1"><a class="header-anchor" href="#_2-2-blocks进阶使用" aria-hidden="true">#</a> 2.2 Blocks进阶使用</h3><h4 id="_2-2-1-blocks事件" tabindex="-1"><a class="header-anchor" href="#_2-2-1-blocks事件" aria-hidden="true">#</a> 2.2.1 Blocks事件</h4><p><strong>可交互设置</strong></p><p>任何输入的组件内容都是可编辑的，而输出组件默认是不能编辑的。如果想要使得输出组件内容可编辑，设置interactive=True即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span>

<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    name <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 不可交互</span>
    <span class="token comment"># output = gr.Textbox(label=&quot;Output Box&quot;)</span>
    <span class="token comment"># 可交互</span>
    output <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Output&quot;</span><span class="token punctuation">,</span> interactive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    greet_btn <span class="token operator">=</span> gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;Greet&quot;</span><span class="token punctuation">)</span>
    greet_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span>fn<span class="token operator">=</span>greet<span class="token punctuation">,</span> inputs<span class="token operator">=</span>name<span class="token punctuation">,</span> outputs<span class="token operator">=</span>output<span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>事件设置</strong></p><p>我们可以为不同的组件设置不同事件，如为输入组件添加change事件。可以进一步查看官方文档，看看组件还有哪些事件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">def</span> <span class="token function">welcome</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Welcome to Gradio, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span>

<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    gr<span class="token punctuation">.</span>Markdown<span class="token punctuation">(</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    # Hello World!
    Start typing below to see the output.
    &quot;&quot;&quot;</span><span class="token punctuation">)</span>
    inp <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>placeholder<span class="token operator">=</span><span class="token string">&quot;What is your name?&quot;</span><span class="token punctuation">)</span>
    out <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 设置change事件</span>
    inp<span class="token punctuation">.</span>change<span class="token punctuation">(</span>fn <span class="token operator">=</span> welcome<span class="token punctuation">,</span> inputs <span class="token operator">=</span> inp<span class="token punctuation">,</span> outputs <span class="token operator">=</span> out<span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多个数据流</strong></p><p>如果想处理多个数据流，只要设置相应的输入输出组件即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">def</span> <span class="token function">increase</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">1</span>

<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    a <span class="token operator">=</span> gr<span class="token punctuation">.</span>Number<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
    b <span class="token operator">=</span> gr<span class="token punctuation">.</span>Number<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 要想b&gt;a，则使得b = a+1</span>
    atob <span class="token operator">=</span> gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;b &gt; a&quot;</span><span class="token punctuation">)</span>
    atob<span class="token punctuation">.</span>click<span class="token punctuation">(</span>increase<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token comment"># 要想a&gt;b，则使得a = b+1</span>
    btoa <span class="token operator">=</span> gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;a &gt; b&quot;</span><span class="token punctuation">)</span>
    btoa<span class="token punctuation">.</span>click<span class="token punctuation">(</span>increase<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多输出值处理</strong></p><p>下面的例子展示了输出多个值时，以列表形式表现的处理方式。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    food_box <span class="token operator">=</span> gr<span class="token punctuation">.</span>Number<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&quot;Food Count&quot;</span><span class="token punctuation">)</span>
    status_box <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> food <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> food <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;full&quot;</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;hungry&quot;</span>
    gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;EAT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span>
        fn<span class="token operator">=</span>eat<span class="token punctuation">,</span> 
        inputs<span class="token operator">=</span>food_box<span class="token punctuation">,</span>
        <span class="token comment"># 根据返回值改变输入组件和输出组件</span>
        outputs<span class="token operator">=</span><span class="token punctuation">[</span>food_box<span class="token punctuation">,</span> status_box<span class="token punctuation">]</span>
    <span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的例子展示了输出多个值时，以字典形式表现的处理方式。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr


<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    food_box <span class="token operator">=</span> gr<span class="token punctuation">.</span>Number<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&quot;Food Count&quot;</span><span class="token punctuation">)</span>
    status_box <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> food <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>food_box<span class="token punctuation">:</span> food <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> status_box<span class="token punctuation">:</span> <span class="token string">&quot;full&quot;</span><span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>status_box<span class="token punctuation">:</span> <span class="token string">&quot;hungry&quot;</span><span class="token punctuation">}</span>
    gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;EAT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span>
        fn<span class="token operator">=</span>eat<span class="token punctuation">,</span> 
        inputs<span class="token operator">=</span>food_box<span class="token punctuation">,</span>
        outputs<span class="token operator">=</span><span class="token punctuation">[</span>food_box<span class="token punctuation">,</span> status_box<span class="token punctuation">]</span>
    <span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组件配置修改</strong></p><p>事件监听器函数的返回值通常是相应的输出组件的更新值。有时我们也想更新组件的配置，比如说可见性。在这种情况下，我们可以通过返回update函数更新组件的配置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">def</span> <span class="token function">change_textbox</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 根据不同输入对输出控件进行更新</span>
    <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">&quot;short&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> gr<span class="token punctuation">.</span>update<span class="token punctuation">(</span>lines<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> visible<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&quot;Short story: &quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">&quot;long&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> gr<span class="token punctuation">.</span>update<span class="token punctuation">(</span>lines<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> visible<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&quot;Long story...&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> gr<span class="token punctuation">.</span>update<span class="token punctuation">(</span>visible<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    radio <span class="token operator">=</span> gr<span class="token punctuation">.</span>Radio<span class="token punctuation">(</span>
        <span class="token punctuation">[</span><span class="token string">&quot;short&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;long&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&quot;Essay Length to Write?&quot;</span>
    <span class="token punctuation">)</span>
    text <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>lines<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> interactive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    radio<span class="token punctuation">.</span>change<span class="token punctuation">(</span>fn<span class="token operator">=</span>change_textbox<span class="token punctuation">,</span> inputs<span class="token operator">=</span>radio<span class="token punctuation">,</span> outputs<span class="token operator">=</span>text<span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-blocks布局" tabindex="-1"><a class="header-anchor" href="#_2-2-2-blocks布局" aria-hidden="true">#</a> 2.2.2 Blocks布局</h4><p>Blocks应用的是html中的flexbox模型布局，默认情况下组件垂直排列。</p><p><strong>组件水平排列</strong></p><p>使用Row函数会将组件按照水平排列，但是在Row函数块里面的组件都会保持同等高度。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr
<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Row<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        img1 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Image<span class="token punctuation">(</span><span class="token punctuation">)</span>
        text1 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Text<span class="token punctuation">(</span><span class="token punctuation">)</span>
    btn1 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组件垂直排列与嵌套</strong></p><p>组件通常是垂直排列，我们可以通过Row函数和Column函数生成不同复杂的布局。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Row<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        text1 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span>
        slider2 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;s2&quot;</span><span class="token punctuation">)</span>
        drop3 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Dropdown<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&quot;d3&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Row<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># scale与相邻列相比的相对宽度。例如，如果列A的比例为2，列B的比例为1，则A的宽度将是B的两倍。</span>
        <span class="token comment"># min_width设置最小宽度，防止列太窄</span>
        <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>scale<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_width<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            text1 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;prompt 1&quot;</span><span class="token punctuation">)</span>
            text2 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;prompt 2&quot;</span><span class="token punctuation">)</span>
            inbtw <span class="token operator">=</span> gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;Between&quot;</span><span class="token punctuation">)</span>
            text4 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;prompt 1&quot;</span><span class="token punctuation">)</span>
            text5 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;prompt 2&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>scale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> min_width<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            img1 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Image<span class="token punctuation">(</span><span class="token string">&quot;test.jpg&quot;</span><span class="token punctuation">)</span>
            btn <span class="token operator">=</span> gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;Go&quot;</span><span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组件可视化</strong></p><p>如下所示，我们可以通过visible和update函数构建更为复杂的应用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    <span class="token comment"># 出错提示框</span>
    error_box <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span> visible<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token comment"># 输入框</span>
    name_box <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>
    age_box <span class="token operator">=</span> gr<span class="token punctuation">.</span>Number<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Age&quot;</span><span class="token punctuation">)</span>
    symptoms_box <span class="token operator">=</span> gr<span class="token punctuation">.</span>CheckboxGroup<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Cough&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fever&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Runny Nose&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    submit_btn <span class="token operator">=</span> gr<span class="token punctuation">.</span>Button<span class="token punctuation">(</span><span class="token string">&quot;Submit&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># 输出不可见</span>
    <span class="token keyword">with</span> gr<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>visible<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">as</span> output_col<span class="token punctuation">:</span>
        diagnosis_box <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Diagnosis&quot;</span><span class="token punctuation">)</span>
        patient_summary_box <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Patient Summary&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> symptoms<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>error_box<span class="token punctuation">:</span> gr<span class="token punctuation">.</span>update<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;Enter name&quot;</span><span class="token punctuation">,</span> visible<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> age <span class="token operator">&gt;</span> <span class="token number">200</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>error_box<span class="token punctuation">:</span> gr<span class="token punctuation">.</span>update<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;Enter valid age&quot;</span><span class="token punctuation">,</span> visible<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            output_col<span class="token punctuation">:</span> gr<span class="token punctuation">.</span>update<span class="token punctuation">(</span>visible<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            diagnosis_box<span class="token punctuation">:</span> <span class="token string">&quot;covid&quot;</span> <span class="token keyword">if</span> <span class="token string">&quot;Cough&quot;</span> <span class="token keyword">in</span> symptoms <span class="token keyword">else</span> <span class="token string">&quot;flu&quot;</span><span class="token punctuation">,</span>
            patient_summary_box<span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string"> y/o&quot;</span></span>
        <span class="token punctuation">}</span>

    submit_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span>
        submit<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>name_box<span class="token punctuation">,</span> age_box<span class="token punctuation">,</span> symptoms_box<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>error_box<span class="token punctuation">,</span> diagnosis_box<span class="token punctuation">,</span> patient_summary_box<span class="token punctuation">,</span> output_col<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组件渲染</strong></p><p>在某些情况下，您可能希望在实际在UI中呈现组件之前定义组件。例如，您可能希望在相应的gr.Textbox输入上方显示使用gr.examples的示例部分。由于gr.Examples需要输入组件对象作为参数，因此您需要先定义输入组件，然后在定义gr.Exmples对象后再进行渲染。解决方法是在gr.Blocks()范围外定义gr.Textbox，并在UI中希望放置的任何位置使用组件的.render()方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

input_textbox <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    <span class="token comment"># 提供示例输入给input_textbox，示例输入以嵌套列表形式设置</span>
    gr<span class="token punctuation">.</span>Examples<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bonjour&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;merhaba&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> input_textbox<span class="token punctuation">)</span>
    <span class="token comment"># render函数渲染input_textbox</span>
    input_textbox<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-样式修改" tabindex="-1"><a class="header-anchor" href="#_2-2-3-样式修改" aria-hidden="true">#</a> 2.2.3 样式修改</h4><p><strong>自定义css</strong></p><p>要获得额外的样式功能，您可以设置行内css属性将任何样式给应用程序。如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token comment"># 修改blocks的背景颜色</span>
<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span>css<span class="token operator">=</span><span class="token string">&quot;.gradio-container {background-color: red}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    box1 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;Good Job&quot;</span><span class="token punctuation">)</span>
    box2 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;Failure&quot;</span><span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>元素选择</strong></p><p>您可以向任何组件添加HTML元素。通过elem_id选择对应的css元素。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gradio <span class="token keyword">as</span> gr

<span class="token comment"># 这里用的是id属性设置</span>
<span class="token keyword">with</span> gr<span class="token punctuation">.</span>Blocks<span class="token punctuation">(</span>css<span class="token operator">=</span><span class="token string">&quot;#warning {background-color: red}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> demo<span class="token punctuation">:</span>
    box1 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;Good Job&quot;</span><span class="token punctuation">,</span> elem_id<span class="token operator">=</span><span class="token string">&quot;warning&quot;</span><span class="token punctuation">)</span>
    box2 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;Failure&quot;</span><span class="token punctuation">)</span>
    box3 <span class="token operator">=</span> gr<span class="token punctuation">.</span>Textbox<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;None&quot;</span><span class="token punctuation">,</span> elem_id<span class="token operator">=</span><span class="token string">&quot;warning&quot;</span><span class="token punctuation">)</span>
demo<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-参考" tabindex="-1"><a class="header-anchor" href="#_3-参考" aria-hidden="true">#</a> 3 参考</h2>`,67),x={href:"https://github.com/gradio-app/gradio",target:"_blank",rel:"noopener noreferrer"},f={href:"https://gradio.app/docs/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://gradio.app/sharing_your_app/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://gradio.app/demos/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://gradio.app/using_hugging_face_integrations/",target:"_blank",rel:"noopener noreferrer"};function I(N,C){const a=e("ExternalLinkIcon");return c(),i("div",null,[l,r,k,n("p",null,[s("Gradio官方仓库为："),n("a",d,[s("Gradio官方仓库"),t(a)]),s("。Gradio官方文档见："),n("a",v,[s("Gradio官方文档"),t(a)]),s("。"),m,s("。参考"),n("a",b,[s("Gradio-demo"),t(a)]),s("可以获得不同的Gradio应用示例。 Gradio需要Python3.7及以上版本才能运行，安装指令如下：")]),g,n("p",null,[s("在"),n("a",h,[s("Gradio官方文档"),t(a)]),s("，搜索不同的组件加.style（如image.style），可以获取该组件的样式参数设置样例。例如image组件的设置如下：")]),y,n("p",null,[s("如果想长期免费分享应用，可以在Hugging Face中托管应用或者其他的一些方式，详细使用见"),n("a",q,[s("分享Gradio应用"),t(a)]),s("。Hugging Face提供了多个基于Gradio搭建应用的demo，详情使用见"),n("a",w,[s("Using Hugging Face Integrations"),t(a)]),s("。")]),_,n("ul",null,[n("li",null,[n("a",x,[s("Gradio官方仓库"),t(a)])]),n("li",null,[n("a",f,[s("Gradio官方文档"),t(a)])]),n("li",null,[n("a",T,[s("分享Gradio应用"),t(a)])]),n("li",null,[n("a",B,[s("Gradio-demo"),t(a)])]),n("li",null,[n("a",G,[s("Using Hugging Face Integrations "),t(a)])])])])}const E=o(u,[["render",I],["__file","2022-10-24-_python_ 基于Gradio可视化部署机器学习应用.html.vue"]]);export{E as default};
