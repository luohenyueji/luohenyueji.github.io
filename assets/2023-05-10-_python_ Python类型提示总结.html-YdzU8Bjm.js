const t=JSON.parse('{"key":"v-09ddc5a1","path":"/blog/python/python%E5%AD%A6%E4%B9%A0/2023-05-10-_python_%20Python%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA%E6%80%BB%E7%BB%93.html","title":"[python] Python类型提示总结","lang":"zh-CN","frontmatter":{"date":"2023-05-10T11:41:11.000Z","category":["Python"],"tag":["Python","编程基础"],"description":"[python] Python类型提示总结 Python3.5 版本引入了类型提示（Type Hints），它允许开发者在代码中显式地声明变量、函数、方法等的类型信息。这种类型声明不会影响 Python 解释器的运行，但可以让 IDE 和静态分析工具更好地理解代码，同时提高代码的可读性和可维护性。然而，由于 Python 支持动态类型，类型提示并不能完全确保代码的正确性。本文仅介绍 Python 类型提示的初步使用。如果需要更详细的使用说明，请参考以下文章：typing、Python 类型提示简介和Type Hints 入门教程。","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/python/python%E5%AD%A6%E4%B9%A0/2023-05-10-_python_%20Python%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[python] Python类型提示总结"}],["meta",{"property":"og:description","content":"[python] Python类型提示总结 Python3.5 版本引入了类型提示（Type Hints），它允许开发者在代码中显式地声明变量、函数、方法等的类型信息。这种类型声明不会影响 Python 解释器的运行，但可以让 IDE 和静态分析工具更好地理解代码，同时提高代码的可读性和可维护性。然而，由于 Python 支持动态类型，类型提示并不能完全确保代码的正确性。本文仅介绍 Python 类型提示的初步使用。如果需要更详细的使用说明，请参考以下文章：typing、Python 类型提示简介和Type Hints 入门教程。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"落痕月极"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"编程基础"}],["meta",{"property":"article:published_time","content":"2023-05-10T11:41:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[python] Python类型提示总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-10T11:41:11.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"1 类型提升","slug":"_1-类型提升","link":"#_1-类型提升","children":[]},{"level":2,"title":"2 类型声明","slug":"_2-类型声明","link":"#_2-类型声明","children":[{"level":3,"title":"2.1 基本类型","slug":"_2-1-基本类型","link":"#_2-1-基本类型","children":[]},{"level":3,"title":"2.2 嵌套类型","slug":"_2-2-嵌套类型","link":"#_2-2-嵌套类型","children":[]},{"level":3,"title":"2.3 自定义类型","slug":"_2-3-自定义类型","link":"#_2-3-自定义类型","children":[]},{"level":3,"title":"2.4 复合类型","slug":"_2-4-复合类型","link":"#_2-4-复合类型","children":[]},{"level":3,"title":"2.5 类型提示的别名","slug":"_2-5-类型提示的别名","link":"#_2-5-类型提示的别名","children":[]}]},{"level":2,"title":"3 参考","slug":"_3-参考","link":"#_3-参考","children":[]}],"git":{},"readingTime":{"minutes":12.02,"words":3606},"filePathRelative":"blog/python/python学习/2023-05-10-[python] Python类型提示总结.md","localizedDate":"2023年5月10日","excerpt":"<h1> [python] Python类型提示总结</h1>\\n<p>Python3.5 版本引入了类型提示（Type Hints），它允许开发者在代码中显式地声明变量、函数、方法等的类型信息。这种类型声明不会影响 Python 解释器的运行，但可以让 IDE 和静态分析工具更好地理解代码，同时提高代码的可读性和可维护性。然而，由于 Python 支持动态类型，类型提示并不能完全确保代码的正确性。本文仅介绍 Python 类型提示的初步使用。如果需要更详细的使用说明，请参考以下文章：<a href=\\"https://docs.python.org/3/library/typing.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">typing</a>、<a href=\\"https://fastapi.tiangolo.com/zh/python-types/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Python 类型提示简介</a>和<a href=\\"https://zhuanlan.zhihu.com/p/519335398\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Type Hints 入门教程</a>。</p>","autoDesc":true}');export{t as data};
