import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as r,a as n,b as s,d as e,e as t}from"./app-MsA2k2kn.js";const i={},l=n("h1",{id:"自然语言处理-基于pycorrector实现文本纠错",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#自然语言处理-基于pycorrector实现文本纠错","aria-hidden":"true"},"#"),s(" [自然语言处理] 基于pycorrector实现文本纠错")],-1),u=n("p",null,"文本纠错（Text Error Correction）技术旨在自动修正输入文本中的拼写、语法、标点符号等错误，以提高文本的准确性、通顺性和规范性。该技术可以通过自然语言处理技术实现，基于上下文和语言规则对文本进行分析和推断，发现其中的错误，并给出正确的替换或修改建议。",-1),d={href:"https://github.com/shibing624/pycorrector",target:"_blank",rel:"noopener noreferrer"},k=n("blockquote",null,[n("p",null,"pip install -U pycorrector")],-1),m={href:"https://zhuanlan.zhihu.com/p/138981644",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>[toc]</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## jupyter notebook环境去除warning</span>
<span class="token keyword">import</span> warnings
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">&quot;ignore&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-pycorrector相关背景" tabindex="-1"><a class="header-anchor" href="#_1-pycorrector相关背景" aria-hidden="true">#</a> 1 pycorrector相关背景</h2>`,3),h={href:"https://github.com/shibing624/pycorrector/wiki/pycorrector%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E7%9B%B4%E6%92%AD%E5%88%86%E4%BA%AB",target:"_blank",rel:"noopener noreferrer"},v=t('<p><strong>应用背景</strong></p><p>中文文本纠错任务的应用背景和常见错误类型如下图所示，pycorrector专注于解决&quot;音似、形字、语法、专名错误&quot;等类型的错误。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/NLP/[自然语言处理] 基于pycorrector实现文本纠错/image/img1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>数据集</strong></p><p>在文本纠错任务中，数据集的质量和数量往往比模型本身更为重要。这也是许多实际场景任务所面临的共同问题。因为模型之间的差别并不大，文本纠错模型的精度更多取决于训练数据规模。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/NLP/[自然语言处理] 基于pycorrector实现文本纠错/image/img2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>技术思路</strong></p><p>一般文本纠错任务有两种技术实现方式：基于规则的文本纠错和基于机器学习/深度学习的文本纠错。由于大语言模型效果很好，所以现有文本纠错方法了解即可。</p><p>基于规则的中文文本纠错技术思路如下：</p><ol><li>分词：首先使用分词工具将输入的文本进行分词处理，将句子拆分成一个个词语。</li><li>错误检测：使用规则匹配的方式，对分词后的文本进行错误检测。常见的错误包括拼写错误、词序错误、词语冗余等。例如，可以使用字典或语料库来匹配常用词汇，如果某个词不在字典或语料库中，则认为它是一个可能的错误。</li><li>错误纠正：一旦发现错误，可以根据规则进行纠正。纠错的方法包括拼写纠正、词序调整、词语替换等。例如，可以利用编辑距离或拼音近似匹配算法来进行拼写纠正；可以使用语言模型预测概率来判断词序是否正确；可以使用同义词词典来进行词语替换。</li></ol><p>基于机器学习/深度学习的文本纠错技术思路如下：</p><ol><li>基于Sequence-to-Sequence模型：使用编码器-解码器结构的序列到序列模型，将输入的错误文本作为源序列，目标文本（正确文本）作为目标序列进行训练。通过最小化误差来调整模型的参数，实现对错误文本的纠错。</li><li>基于Transformer模型：Transformer模型是一种注意力机制的深度学习模型，广泛应用于自然语言处理任务中，如机器翻译和文本生成。在文本纠错任务中，可以使用Transformer模型将错误文本转化为正确文本，通过损失函数进行训练和优化。</li><li>基于语言模型的强化学习方法：使用语言模型来生成候选纠错结果，并通过强化学习算法来评估和选择最佳的纠错建议。这种方法可以通过与外部环境进行交互，不断提升纠错性能。</li><li>基于预训练模型，如GPT系列模型或BERT模型。其中BERT是一种预训练语言模型，具有良好的上下文理解能力。在文本纠错中，可以使用BERT模型进行编码和解码操作，通过自监督学习来训练模型，使其具备纠正错误文本的能力。</li></ol><p><strong>工业解决方案</strong></p><p>尽管以GPT为代表的大语言模型在文本纠错方面展现出潜力，但其计算资源要求较高，需要训练数据和强大的计算能力。目前，工业界已有的文本纠错技术仍然具备优势和广泛应用场景。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/NLP/[自然语言处理] 基于pycorrector实现文本纠错/image/img3.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/NLP/[自然语言处理] 基于pycorrector实现文本纠错/image/img4.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/NLP/[自然语言处理] 基于pycorrector实现文本纠错/image/img5.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-pycorrector使用说明" tabindex="-1"><a class="header-anchor" href="#_2-pycorrector使用说明" aria-hidden="true">#</a> 2 pycorrector使用说明</h2><h3 id="_2-1-基于规则的中文文本纠错" tabindex="-1"><a class="header-anchor" href="#_2-1-基于规则的中文文本纠错" aria-hidden="true">#</a> 2.1 基于规则的中文文本纠错</h3><p>pycorrector中基于规则的中文文本纠错接口默认使用Kenlm模型。具体来说，pycorrector基于Kenlm统计语言模型工具训练了中文NGram语言模型，结合规则方法、混淆集可以快速纠正中文拼写错误，但效果一般。</p><p><strong>文本纠错</strong></p>',21),b=n("code",null,"~/.pycorrector/datasets/zh_giga.no_cna_cmn.prune01244.klm",-1),_={href:"https://deepspeech.bj.bcebos.com/zh_lm/zh_giga.no_cna_cmn.prune01244.klm",target:"_blank",rel:"noopener noreferrer"},y=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pycorrector
<span class="token comment">## include_symbol: 是否包含标点符号，默认为True</span>
<span class="token comment">## threshold: 纠错阈值，默认为57</span>
corrected_sent<span class="token punctuation">,</span> detail <span class="token operator">=</span> pycorrector<span class="token punctuation">.</span>correct<span class="token punctuation">(</span><span class="token string">&quot;人群穿流不息，少先队员因该为老人让坐!&quot;</span><span class="token punctuation">,</span>include_symbol<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>threshold<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span>
<span class="token comment">## corrected_sent: 纠错后的句子</span>
<span class="token comment">## detail: 纠错信息，[wrong, right, begin_pos, end_pos]</span>
corrected_sent<span class="token punctuation">,</span> detail
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>(&#39;人群川流不息，少先队员应该为老人让座!&#39;,
 [(&#39;穿流不息&#39;, &#39;川流不息&#39;, 2, 6), (&#39;因该&#39;, &#39;应该&#39;, 11, 13), (&#39;坐&#39;, &#39;座&#39;, 17, 18)])
</code></pre><p><strong>错误检测</strong></p><p>pycorrector提供detect函数来检测并返回输入文本中可能存在的语言错误和错误类型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pycorrector

idx_errors <span class="token operator">=</span> pycorrector<span class="token punctuation">.</span>detect<span class="token punctuation">(</span><span class="token string">&#39;人群穿流不息，少先队员因该为老人让坐!&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>idx_errors<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[[&#39;穿流不息&#39;, 2, 6, &#39;proper&#39;], [&#39;因该&#39;, 11, 13, &#39;word&#39;], [&#39;坐&#39;, 17, 18, &#39;char&#39;]]
</code></pre><p><strong>成语、专名纠错</strong></p><p>pycorrector提供了专门用于对成语和专名进行纠错的函数，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pycorrector<span class="token punctuation">.</span>proper_corrector <span class="token keyword">import</span> ProperCorrector
<span class="token keyword">from</span> pycorrector <span class="token keyword">import</span> config

m <span class="token operator">=</span> ProperCorrector<span class="token punctuation">(</span>proper_name_path<span class="token operator">=</span>config<span class="token punctuation">.</span>proper_name_path<span class="token punctuation">)</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;这块名表带带相传&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;这块名表代代相传&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;这场比赛我甘败下风&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;这场比赛我甘拜下封&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;早上在拼哆哆上买了点葡桃&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">&#39; -&gt; &#39;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>proper_correct<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>这块名表带带相传  -&gt;  (&#39;这块名表代代相传&#39;, [(&#39;带带相传&#39;, &#39;代代相传&#39;, 4, 8)])
这块名表代代相传  -&gt;  (&#39;这块名表代代相传&#39;, [])
这场比赛我甘败下风  -&gt;  (&#39;这场比赛我甘拜下风&#39;, [(&#39;甘败下风&#39;, &#39;甘拜下风&#39;, 5, 9)])
这场比赛我甘拜下封  -&gt;  (&#39;这场比赛我甘拜下风&#39;, [(&#39;甘拜下封&#39;, &#39;甘拜下风&#39;, 5, 9)])
早上在拼哆哆上买了点葡桃  -&gt;  (&#39;早上在拼多多上买了点葡桃&#39;, [(&#39;拼哆哆&#39;, &#39;拼多多&#39;, 3, 6)])
</code></pre><p><strong>自定义混淆集</strong></p><p>pycorrector通过加载自定义混淆集，支持用户纠正已知的错误，实际就是字符串替换。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pycorrector <span class="token keyword">import</span> ConfusionCorrector<span class="token punctuation">,</span> Corrector

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    error_sentences <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;买iphonex，要多少钱&#39;</span><span class="token punctuation">,</span>  <span class="token comment">## 漏召回</span>
        <span class="token string">&#39;哪里卖苹果吧？请大叔给我让坐&#39;</span><span class="token punctuation">,</span>  <span class="token comment">## 漏召回</span>
        <span class="token string">&#39;共同实际控制人萧华、霍荣铨、张旗康&#39;</span><span class="token punctuation">,</span>  <span class="token comment">## 误杀</span>
        <span class="token string">&#39;上述承诺内容系本人真实意思表示&#39;</span><span class="token punctuation">,</span>  <span class="token comment">## 正常</span>
        <span class="token string">&#39;大家一哄而伞怎么回事&#39;</span><span class="token punctuation">,</span>  <span class="token comment">## 成语</span>
    <span class="token punctuation">]</span>
    m <span class="token operator">=</span> Corrector<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> error_sentences<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">&#39; -&gt; &#39;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>detect<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>correct<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span> <span class="token operator">*</span> <span class="token number">42</span><span class="token punctuation">)</span>
    
    <span class="token comment">## 自定义混淆集</span>
    custom_confusion <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;得事&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;的事&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;天地无垠&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;天地无限&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;交通先行&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;交通限行&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;苹果吧&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;苹果八&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;iphonex&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;iphoneX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小明同学&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;小茗同学&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;萧华&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;萧华&#39;</span><span class="token punctuation">,</span>
                        <span class="token string">&#39;张旗康&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;张旗康&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;一哄而伞&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;一哄而散&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;happt&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;happen&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shylock&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;shylock&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;份额&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;份额&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;天俺门&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;天安门&#39;</span><span class="token punctuation">}</span>
    m <span class="token operator">=</span> ConfusionCorrector<span class="token punctuation">(</span>custom_confusion_path_or_dict<span class="token operator">=</span>custom_confusion<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> error_sentences<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">&#39; -&gt; &#39;</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>confusion_correct<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>买iphonex，要多少钱  -&gt;  [[&#39;钱&#39;, 12, 13, &#39;char&#39;]] (&#39;买iphonex，要多少钱&#39;, [])
哪里卖苹果吧？请大叔给我让坐  -&gt;  [] (&#39;哪里卖苹果吧？请大叔给我让坐&#39;, [])
共同实际控制人萧华、霍荣铨、张旗康  -&gt;  [[&#39;霍荣铨&#39;, 10, 13, &#39;word&#39;], [&#39;张旗康&#39;, 14, 17, &#39;word&#39;]] (&#39;共同实际控制人萧华、霍荣铨、张启康&#39;, [(&#39;张旗康&#39;, &#39;张启康&#39;, 14, 17)])
上述承诺内容系本人真实意思表示  -&gt;  [[&#39;系&#39;, 6, 7, &#39;char&#39;]] (&#39;上述承诺内容系本人真实意思表示&#39;, [])
大家一哄而伞怎么回事  -&gt;  [[&#39;一哄&#39;, 2, 4, &#39;word&#39;], [&#39;伞&#39;, 5, 6, &#39;char&#39;]] (&#39;大家一哄而散怎么回事&#39;, [(&#39;伞&#39;, &#39;散&#39;, 5, 6)])
******************************************
买iphonex，要多少钱  -&gt;  (&#39;买iphoneX，要多少钱&#39;, [[&#39;iphonex&#39;, &#39;iphoneX&#39;, 1, 8]])
哪里卖苹果吧？请大叔给我让坐  -&gt;  (&#39;哪里卖苹果八？请大叔给我让坐&#39;, [[&#39;苹果吧&#39;, &#39;苹果八&#39;, 3, 6]])
共同实际控制人萧华、霍荣铨、张旗康  -&gt;  (&#39;共同实际控制人萧华、霍荣铨、张旗康&#39;, [[&#39;萧华&#39;, &#39;萧华&#39;, 7, 9], [&#39;张旗康&#39;, &#39;张旗康&#39;, 14, 17]])
上述承诺内容系本人真实意思表示  -&gt;  (&#39;上述承诺内容系本人真实意思表示&#39;, [])
大家一哄而伞怎么回事  -&gt;  (&#39;大家一哄而散怎么回事&#39;, [[&#39;一哄而伞&#39;, &#39;一哄而散&#39;, 2, 6]])
</code></pre><p><strong>自定义语言模型</strong></p><p>pycorrector提供了用于加载自定义语言模型的代码，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>## 自定义模型路径
lm_path = &#39;./custom.klm&#39;
model = Corrector(language_model_path=lm_path)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>英文拼写纠错</strong></p><p>pycorrector也提供英文拼写纠错，效果很一般。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sent <span class="token operator">=</span> <span class="token string">&quot;what happending? how to speling it, can you gorrect it?&quot;</span>
corrected_text<span class="token punctuation">,</span> details <span class="token operator">=</span> pycorrector<span class="token punctuation">.</span>en_correct<span class="token punctuation">(</span>sent<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sent<span class="token punctuation">,</span> <span class="token string">&#39;=&gt;&#39;</span><span class="token punctuation">,</span> corrected_text<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>what happending? how to speling it, can you gorrect it? =&gt; what happening? how to spelling it, can you correct it?
[(&#39;happending&#39;, &#39;happening&#39;, 5, 15), (&#39;speling&#39;, &#39;spelling&#39;, 24, 31), (&#39;gorrect&#39;, &#39;correct&#39;, 44, 51)]
</code></pre><p>pycorrect也支持自定义的词频字典设置，以防止误纠错。如下所示，shylock被纠错为shock，可以设置shylock出现频率比shock高来避免纠错。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pycorrector<span class="token punctuation">.</span>en_spell <span class="token keyword">import</span> EnSpell

<span class="token comment">## ## 定义一个字符串变量</span>
sent <span class="token operator">=</span> <span class="token string">&quot;what is your name? shylock?&quot;</span>  
<span class="token comment">## 创建一个EnSpell类的实例对象</span>
spell <span class="token operator">=</span> EnSpell<span class="token punctuation">(</span><span class="token punctuation">)</span>  
corrected_text<span class="token punctuation">,</span> details <span class="token operator">=</span> spell<span class="token punctuation">.</span>correct<span class="token punctuation">(</span>sent<span class="token punctuation">)</span> 
<span class="token comment">## shylock被纠错为shock</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sent<span class="token punctuation">,</span> <span class="token string">&#39;=&gt;&#39;</span><span class="token punctuation">,</span> corrected_text<span class="token punctuation">,</span> details<span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">42</span><span class="token punctuation">)</span> 

<span class="token comment">## 定义一个包含词频信息的字典</span>
<span class="token comment">## 设置shylock出现频次比shock高</span>
my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;your&#39;</span><span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;is&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;shock&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;shylock&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;what&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span> 
<span class="token comment">## 创建一个EnSpell类的实例对象，并传入自定义词频字典</span>
spell <span class="token operator">=</span> EnSpell<span class="token punctuation">(</span>word_freq_dict<span class="token operator">=</span>my_dict<span class="token punctuation">)</span>  
corrected_text<span class="token punctuation">,</span> details <span class="token operator">=</span> spell<span class="token punctuation">.</span>correct<span class="token punctuation">(</span>sent<span class="token punctuation">)</span>  
<span class="token keyword">print</span><span class="token punctuation">(</span>sent<span class="token punctuation">,</span> <span class="token string">&#39;=&gt;&#39;</span><span class="token punctuation">,</span> corrected_text<span class="token punctuation">,</span> details<span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>what is your name? shylock? =&gt; what is your name? shock? [(&#39;shylock&#39;, &#39;shock&#39;, 19, 26)]
------------------------------------------
what is your name? shylock? =&gt; what is your name? shylock? []
</code></pre><p><strong>中文简繁互换</strong></p><p>pycorrector支持中文简体和繁体的互换，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pycorrector

traditional_sentence <span class="token operator">=</span> <span class="token string">&#39;學而時習之，不亦說乎&#39;</span>
simplified_sentence <span class="token operator">=</span> pycorrector<span class="token punctuation">.</span>traditional2simplified<span class="token punctuation">(</span>traditional_sentence<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>traditional_sentence<span class="token punctuation">,</span> <span class="token string">&#39;=&gt;&#39;</span><span class="token punctuation">,</span> simplified_sentence<span class="token punctuation">)</span>

simplified_sentence <span class="token operator">=</span> <span class="token string">&#39;学而时习之，不亦说乎&#39;</span>
traditional_sentence <span class="token operator">=</span> pycorrector<span class="token punctuation">.</span>simplified2traditional<span class="token punctuation">(</span>simplified_sentence<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>simplified_sentence<span class="token punctuation">,</span> <span class="token string">&#39;=&gt;&#39;</span><span class="token punctuation">,</span> traditional_sentence<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>學而時習之，不亦說乎 =&gt; 学而时习之，不亦说乎
学而时习之，不亦说乎 =&gt; 學而時習之，不亦說乎
</code></pre><h3 id="_2-2-基于深度学习的中文文本纠错" tabindex="-1"><a class="header-anchor" href="#_2-2-基于深度学习的中文文本纠错" aria-hidden="true">#</a> 2.2 基于深度学习的中文文本纠错</h3><p>pycorrector提供多个基于深度学习的中文文本纠错模型，一般而言，使用深度学习进行中文文本纠错可以获得比基于规则纠错更好的效果。pycorrector在SIGHAN2015数据集数据集下对各种深度学习模型进行了评测，SIGHAN2015数据集是一个经典公开的用于中文文本纠错任务的数据集，并得出以下结论：</p>`,30),f=n("strong",null,"MacBert-CSC",-1),w=n("em",null,"shibing624/macbert4csc-base-chinese",-1),x={href:"https://huggingface.co/shibing624/macbert4csc-base-chinese",target:"_blank",rel:"noopener noreferrer"},q=n("strong",null,"BART-CSC",-1),P=n("em",null,"shibing624/bart4csc-base-chinese",-1),E={href:"https://huggingface.co/shibing624/bart4csc-base-chinese",target:"_blank",rel:"noopener noreferrer"},C=n("strong",null,"Mengzi-T5-CSC",-1),B=n("em",null,"shibing624/mengzi-t5-base-chinese-correction",-1),N={href:"https://huggingface.co/shibing624/mengzi-t5-base-chinese-correction",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"SIGHAN 2015",-1),A=n("em",null,"shibing624/chatglm-6b-csc-zh-lora",-1),T={href:"https://huggingface.co/shibing624/chatglm-6b-csc-zh-lora",target:"_blank",rel:"noopener noreferrer"},z={href:"https://huggingface.co/shibing624/macbert4csc-base-chinese",target:"_blank",rel:"noopener noreferrer"},L=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pycorrector<span class="token punctuation">.</span>macbert<span class="token punctuation">.</span>macbert_corrector <span class="token keyword">import</span> MacBertCorrector
<span class="token keyword">from</span> pycorrector <span class="token keyword">import</span> ConfusionCorrector

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    error_sentences <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;少先队员因该为老人让坐&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;机七学习是人工智能领遇最能体现智能的一个分知&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>

    m <span class="token operator">=</span> MacBertCorrector<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">## add confusion corrector for postprocess</span>
    confusion_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;喝小明同学&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;喝小茗同学&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;老人让坐&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;老人让座&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;平净&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;平静&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;分知&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;分支&quot;</span><span class="token punctuation">}</span>
    cm <span class="token operator">=</span> ConfusionCorrector<span class="token punctuation">(</span>custom_confusion_path_or_dict<span class="token operator">=</span>confusion_dict<span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> error_sentences<span class="token punctuation">:</span>
        correct_sent<span class="token punctuation">,</span> err <span class="token operator">=</span> m<span class="token punctuation">.</span>macbert_correct<span class="token punctuation">(</span>line<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;query:{} =&gt; {} err:{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> correct_sent<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
        correct_sent<span class="token punctuation">,</span> err <span class="token operator">=</span> cm<span class="token punctuation">.</span>confusion_correct<span class="token punctuation">(</span>correct_sent<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;added confusion: {} err: {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>correct_sent<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j={href:"https://github.com/PaddlePaddle/PaddleNLP",target:"_blank",rel:"noopener noreferrer"},G=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> paddlenlp <span class="token keyword">import</span> Taskflow
corrector <span class="token operator">=</span> Taskflow<span class="token punctuation">(</span><span class="token string">&quot;text_correction&quot;</span><span class="token punctuation">)</span>

<span class="token comment">## 单条输入</span>
corrector<span class="token punctuation">(</span><span class="token string">&#39;遇到逆竟时，我们必须勇于面对，而且要愈挫愈勇。&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[{&#39;source&#39;: &#39;遇到逆竟时，我们必须勇于面对，而且要愈挫愈勇。&#39;,
  &#39;target&#39;: &#39;遇到逆境时，我们必须勇于面对，而且要愈挫愈勇。&#39;,
  &#39;errors&#39;: [{&#39;position&#39;: 3, &#39;correction&#39;: {&#39;竟&#39;: &#39;境&#39;}}]}]
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 批量预测</span>
corrector<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;遇到逆竟时，我们必须勇于面对，而且要愈挫愈勇。&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;人生就是如此，经过磨练才能让自己更加拙壮，才能使自己更加乐观。&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[{&#39;source&#39;: &#39;遇到逆竟时，我们必须勇于面对，而且要愈挫愈勇。&#39;,
  &#39;target&#39;: &#39;遇到逆境时，我们必须勇于面对，而且要愈挫愈勇。&#39;,
  &#39;errors&#39;: [{&#39;position&#39;: 3, &#39;correction&#39;: {&#39;竟&#39;: &#39;境&#39;}}]},
 {&#39;source&#39;: &#39;人生就是如此，经过磨练才能让自己更加拙壮，才能使自己更加乐观。&#39;,
  &#39;target&#39;: &#39;人生就是如此，经过磨炼才能让自己更加茁壮，才能使自己更加乐观。&#39;,
  &#39;errors&#39;: [{&#39;position&#39;: 10, &#39;correction&#39;: {&#39;练&#39;: &#39;炼&#39;}},
   {&#39;position&#39;: 18, &#39;correction&#39;: {&#39;拙&#39;: &#39;茁&#39;}}]}]
</code></pre><p>实际上，无论是基于规则的中文文本纠错算法还是其他基于深度学习模型的文本纠错算法，它们的效果都不如深度学习大模型（例如ChatGPT）。即使是PaddleNLP提供的纠错模型，在中文自然语言处理任务中也有相当高的精度，但面对一些简单的纠错案例时，效果也可能不佳。如下所示，“穿流不息”被错误地纠正为“传流不息”。因此，在实际应用时，应该根据具体场景定制相应的模型。如果是工业应用，在算力要求不高的情况下，应该尽可能选择开源大语言模型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>corrector<span class="token punctuation">(</span><span class="token string">&#39;人群穿流不息，少先队员因该为老人让坐&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>[{&#39;source&#39;: &#39;人群穿流不息，少先队员因该为老人让坐&#39;,
  &#39;target&#39;: &#39;人群传流不息，少先队员应该为老人让坐&#39;,
  &#39;errors&#39;: [{&#39;position&#39;: 2, &#39;correction&#39;: {&#39;穿&#39;: &#39;传&#39;}},
   {&#39;position&#39;: 11, &#39;correction&#39;: {&#39;因&#39;: &#39;应&#39;}}]}]
</code></pre><h2 id="_3-参考" tabindex="-1"><a class="header-anchor" href="#_3-参考" aria-hidden="true">#</a> 3 参考</h2>`,8),R={href:"https://github.com/shibing624/pycorrector",target:"_blank",rel:"noopener noreferrer"},M={href:"https://zhuanlan.zhihu.com/p/138981644",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/shibing624/pycorrector/wiki/pycorrector%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E7%9B%B4%E6%92%AD%E5%88%86%E4%BA%AB",target:"_blank",rel:"noopener noreferrer"},V={href:"https://deepspeech.bj.bcebos.com/zh_lm/zh_giga.no_cna_cmn.prune01244.klm",target:"_blank",rel:"noopener noreferrer"},H={href:"https://huggingface.co/shibing624/macbert4csc-base-chinese",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/PaddlePaddle/PaddleNLP",target:"_blank",rel:"noopener noreferrer"};function X(D,F){const a=p("ExternalLinkIcon");return c(),r("div",null,[l,u,n("p",null,[s("pycorrector是一个开源中文文本纠错工具，它支持对中文文本进行音似、形似和语法错误的纠正。此工具是使用Python3进行开发的，并整合了Kenlm、ConvSeq2Seq、BERT、MacBERT、ELECTRA、ERNIE、Transformer等多种模型来实现文本纠错功能。pycorrector官方仓库地址为："),n("a",d,[s("pycorrector"),e(a)]),s("。pycorrector安装命令如下：")]),k,n("p",null,[s("本文旨在介绍如何调用pycorrector提供的函数接口来进行文本纠错。事实上，pycorrector官方仓库已经提供了详尽的使用教程，可进一步深入了解pycorrector的使用方法。此外，文章"),n("a",m,[s("PyCorrector文本纠错工具实践和代码详解"),e(a)]),s("也系统性地介绍了pycorrector的使用。")]),g,n("p",null,[s("本节一些内容和图片来自："),n("a",h,[s("pycorrector源码解读"),e(a)]),s("。")]),v,n("p",null,[s("用于文本纠错的correct函数会从路径"),b,s("加载kenlm语言模型文件，如果检测没有该文件， 则模型会自动联网下载。当然也可以手动下载"),n("a",_,[s("klm模型文件"),e(a)]),s("(2.8G)并放置于该位置。")]),y,n("ul",null,[n("li",null,[s("中文拼写纠错模型效果最好的是"),f,s("，模型名称是"),w,s("，huggingface model："),n("a",x,[s("shibing624/macbert4csc-base-chinese"),e(a)])]),n("li",null,[s("中文语法纠错模型效果最好的是"),q,s("，模型名称是"),P,s("，huggingface model："),n("a",E,[s("shibing624/bart4csc-base-chinese"),e(a)])]),n("li",null,[s("最具潜力的模型是"),C,s("，模型名称是"),B,s("，huggingface model："),n("a",N,[s("shibing624/mengzi-t5-base-chinese-correction"),e(a)]),s("，未改变模型结构，仅fine-tune中文纠错数据集，已经在"),S,s("取得接近SOTA的效果")]),n("li",null,[s("基于ChatGLM-6B的纠错微调模型效果也不错，模型名称是"),A,s("，huggingface model："),n("a",T,[s("shibing624/chatglm-6b-csc-zh-lora"),e(a)]),s("，大模型不仅能改错还能润色句子，但是模型太大，推理速度慢")])]),n("p",null,[s("在pycorrector中调用MacBert-CSC模型进行文本纠错的代码如下，该代码将自动加载"),n("a",z,[s("macbert4csc-base-chinese"),e(a)]),s("提供的纠错模型。")]),L,n("p",null,[s("此外，pycorrector也推荐使用PaddleNLP进行文本纠错。PaddleNLP提供了覆盖包括文本纠错在内的多个产业级NLP预置模型。关于PaddleNLP的安装和使用见其官方仓库："),n("a",j,[s("PaddleNLP"),e(a)]),s("。")]),G,n("ul",null,[n("li",null,[n("a",R,[s("pycorrector"),e(a)])]),n("li",null,[n("a",M,[s("PyCorrector文本纠错工具实践和代码详解"),e(a)])]),n("li",null,[n("a",I,[s("pycorrector源码解读"),e(a)])]),n("li",null,[n("a",V,[s("klm模型文件"),e(a)])]),n("li",null,[n("a",H,[s("macbert4csc-base-chinese"),e(a)])]),n("li",null,[n("a",K,[s("PaddleNLP"),e(a)])])])])}const J=o(i,[["render",X],["__file","2023-09-24-_自然语言处理_ 基于pycorrector实现文本纠错.html.vue"]]);export{J as default};
