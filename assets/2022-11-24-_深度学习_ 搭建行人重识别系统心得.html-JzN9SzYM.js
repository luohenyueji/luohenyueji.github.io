import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as l,c as s,a as e,b as r,d as o,e as i}from"./app-MsA2k2kn.js";const _={},c=i('<h1 id="深度学习-搭建行人重识别系统心得" tabindex="-1"><a class="header-anchor" href="#深度学习-搭建行人重识别系统心得" aria-hidden="true">#</a> [深度学习] 搭建行人重识别系统心得</h1><p>普通的行人reid，分为特征提取和向量检索两大部分。其他一些商用技术是普通项目接触不到，大概用这两部分，再搜集数据，换换检测模型，提高reid模型就可以了。</p><h2 id="_1-特征提取" tabindex="-1"><a class="header-anchor" href="#_1-特征提取" aria-hidden="true">#</a> 1 特征提取</h2><p>对于特征提取，通常步骤如下:</p><ol><li>目标检测 目标检测提取图像中的行人，一般会使用输入图像尺寸较大的yolo模型。</li><li>目标跟踪 仅仅使用目标检测往往会出现目标检测框不稳定的情况。所以会利用目标跟踪算法，跟踪行人以稳定行人识别结果。现有常用的reid目标跟踪算法有deepsort，bytetrack，oc-sort。这些目标跟踪算法分为两种情况： <ul><li>deepsort：这类算法会根据目标检测模型的行人检测框和其对应的行人图像特征来实现行人跟踪，这类算法会有一定的耗时而且需要计算对应的行人图像特征。</li><li>bytetrack/oc-sort：这两种算法直接根据目标检测模型的行人检测框来完成行人的多目标跟踪，所以对目标检测算法的精度要求较高。使用这类算法，再送入向量检索之前还需要提取行人特征。</li></ul></li><li>规则过滤 目标跟踪后会通过一些规则过滤行人，或者采用多镜头行人融合技术降低误报率。这一部分可有可无，看各家的技术。</li></ol><p>目标检测很耗时，通过会每隔几帧进行检测。没有目标检测的中间帧，则使用上一帧的结果进行目标跟踪即可。行人特征提取开源的项目常用的demo有：</p>',6),h={href:"https://github.com/PaddlePaddle/PaddleDetection/tree/release/2.5/deploy/pipeline",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/zengwb-lx/Yolov5-Deepsort-Fastreid",target:"_blank",rel:"noopener noreferrer"},p={href:"https://github.com/ifzhang/ByteTrack",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/HanGuangXin/ByteTrack_ReID",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/noahcao/OC_SORT",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"_2-向量检索",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-向量检索","aria-hidden":"true"},"#"),r(" 2 向量检索")],-1),b=e("p",null,"向量检索会涉及到很多东西，出库入库检索之类的。底库特别大会严重影响检索性能。不要自己写检索系统，用成熟的向量检索系统非常好，一方面可以方便管理，另外一方面可以加快检索速度。推荐两个：",-1),g={href:"https://github.com/milvus-io/milvus",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/milvus-io/bootcamp/tree/master/solutions/image/reverse_image_search",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/facebookresearch/faiss",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.csdn.net/LuohenYJ/article/details/125897842",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"向量检索库涉及很多内容，多看看官方文档。无脑就用milvus，想自己弄或者要求不多就用faiss。",-1);function B(T,D){const t=n("ExternalLinkIcon");return l(),s("div",null,[c,e("ul",null,[e("li",null,[e("p",null,[e("a",h,[r("PP-Human"),o(t)]),r("，这个项目提供reid的一键式特征提取方案，缺点是paddle的东西不稳定，而且代码修改难度很大。")])]),e("li",null,[e("p",null,[e("a",d,[r("Yolov5-Deepsort-Fastreid"),o(t)]),r("，这个项目通过yolov5识别行人，deepsort基于fastreid特征提取结果进行目标跟踪。这个项目较老，可以参考该项目搭建自己的特征提取项目。")])]),e("li",null,[e("p",null,[e("a",p,[r("ByteTrack"),o(t)]),r("、"),e("a",u,[r("ByteTrack_ReID"),o(t)]),r("、"),e("a",f,[r("OC-SORT"),o(t)]),r("。如果追求检测速度，可以看看这三个项目。")])])]),m,b,e("ol",null,[e("li",null,[e("a",g,[r("milvus"),o(t)]),r("，milvus是一个很完备的向量搜索引擎，能无脑搭建向量检索库，支持分布式处理，而且检索速度极快。缺点是，东西太多过于臃肿，搭建也不容易。可以照着milvus官方提供的"),e("a",k,[r("以图搜图系统案例"),o(t)]),r("，搭建自己的行人向量检索系统。")]),e("li",null,[e("a",v,[r("faiss"),o(t)]),r("，faiss是一个底层的向量检索库，提供一些基础的功能，但是得费点时间搭建向量检索库。不会用的话可以看看"),e("a",x,[r("向量检索库Faiss使用指北"),o(t)]),r("。")])]),y])}const N=a(_,[["render",B],["__file","2022-11-24-_深度学习_ 搭建行人重识别系统心得.html.vue"]]);export{N as default};
