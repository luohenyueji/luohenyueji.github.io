import{_ as s,c as a,a as n,o as l}from"./app-BNuIUq7T.js";const t={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="机器学习-yellowbrick使用笔记5-回归可视化" tabindex="-1"><a class="header-anchor" href="#机器学习-yellowbrick使用笔记5-回归可视化"><span>[机器学习] Yellowbrick使用笔记5-回归可视化</span></a></h1><p>回归模型试图预测连续空间中的目标。回归计分可视化工具显示模型空间中的实例，以便更好地理解模型是如何进行预测的。<a href="https://github.com/luohenyueji/Python-Study-Notes/tree/master/Documents/Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0" target="_blank" rel="noopener noreferrer"><strong>代码下载</strong></a></p><p>我们目前已经实施了三种回归评估：</p><ul><li>残差图Residuals Plot：绘制期望值与实际值之间的差</li><li>预测误差图Prediction Error Plot：在模型空间中绘制期望值与实际值</li><li>alpha选择：视觉调整正则化超参数</li><li>库克距离Cook’s Distance：描述了单个样本对整个回归模型的影响程度</li></ul><p>Estimator score Visualizer包装Scikit Learn estimators并公开Estimator API，以便它们具有fit（）、predict（）和score（）方法，这些方法在幕后调用适当的估计器方法。Score可视化工具可以包装一个估计器，并作为管道或VisualPipeline中的最后一步传入。 本文如果数据集下载不下来，查看下面地址，然后放入yellowbrick安装目录\\datasets\\fixtures文件夹:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;bikeshare&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/bikeshare.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;4ed07a929ccbe0171309129e6adda1c4390190385dd6001ba9eecc795a21eef2&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;hobbies&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/hobbies.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;6114e32f46baddf049a18fb05bad3efa98f4e6a0fe87066c94071541cb1e906f&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;concrete&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/concrete.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;5807af2f04e14e407f61e66a4f3daf910361a99bb5052809096b47d3cccdfc0a&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;credit&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/credit.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;2c6f5821c4039d70e901cc079d1404f6f49c3d6815871231c40348a69ae26573&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;energy&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/energy.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;174eca3cd81e888fc416c006de77dbe5f89d643b20319902a0362e2f1972a34e&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;game&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/game.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;ce799d1c55fcf1985a02def4d85672ac86c022f8f7afefbe42b20364fba47d7a&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;mushroom&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/mushroom.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;f79fdbc33b012dabd06a8f3cb3007d244b6aab22d41358b9aeda74417c91f300&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;occupancy&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/occupancy.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;0b390387584586a05f45c7da610fdaaf8922c5954834f323ae349137394e6253&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;spam&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/spam.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;000309ac2b61090a3001de3e262a5f5319708bb42791c62d15a08a2f9f7cb30a&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;walking&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/walking.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;7a36615978bc3bb74a2e9d5de216815621bd37f6a42c65d3fc28b242b4d6e040&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;nfl&quot;: {</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/nfl.zip&quot;,</span></span>
<span class="line"><span>    &quot;signature&quot;: &quot;4989c66818ea18217ee0fe3a59932b963bd65869928c14075a5c50366cb81e1f&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-残差图residuals-plot" tabindex="-1"><a class="header-anchor" href="#_1-残差图residuals-plot"><span>1 残差图Residuals Plot</span></a></h2><p>在回归模型的上下文中，残差是目标变量的观测值（y）与预测值（ŷ）之间的差，即预测的误差。残差图显示了垂直轴上的残差与水平轴上的因变量之间的差异，使您可以检测目标中可能会或多或少地产生误差的区域。</p><table><thead><tr><th>可视化器</th><th>ResidualsPlot</th></tr></thead><tbody><tr><td>快速使用方法</td><td>residuals_plot()</td></tr><tr><td>模型</td><td>回归</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 多行输出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IPython.core.interactiveshell </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> InteractiveShell</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">InteractiveShell.ast_node_interactivity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;all&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-基础使用" tabindex="-1"><a class="header-anchor" href="#_1-1-基础使用"><span>1.1 基础使用</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sklearn.model_selection </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> train_test_split</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sklearn.linear_model </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Ridge</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.datasets </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> load_concrete</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.regressor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ResidualsPlot</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Load a regression dataset</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X, y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> load_concrete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Create the train and test data</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 数据分离</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X_train, X_test, y_train, y_test </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> train_test_split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X, y, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">test_size</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">random_state</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Instantiate the linear model and visualizer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 初始化模型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">model </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Ridge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 残差可视化</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> ResidualsPlot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(model)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Fit the training data to the visualizer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X_train, y_train)  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Evaluate the model on the test data</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 评价模型</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X_test, y_test)  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Finalize and render the figure</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记5-回归可视化/output_4_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>残差图的常见用途是分析回归器的误差方差。如果这些点围绕水平轴随机分散，则通常适用于数据的线性回归模型；否则，非线性模型更为合适。在上述情况下，我们在二维图中看到相对于目标的残差相当随机，均匀的分布。这似乎表明我们的线性模型运行良好。从直方图中我们还可以看到，我们的误差通常在零附近分布，这通常也表明模型拟合良好。</p><p>请注意，如果不需要直方图，则可以使用hist=False标志将其关闭：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> ResidualsPlot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(model, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">hist</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X_train, y_train)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X_test, y_test)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记5-回归可视化/output_6_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_1-2-快速方法" tabindex="-1"><a class="header-anchor" href="#_1-2-快速方法"><span>1.2 快速方法</span></a></h3><p>使用关联的快速方法，可以在一行中实现与上述类似的功能residuals_plot。此方法将实例化ResidualsPlot可视化程序并将其适合于训练数据，然后将其在可选提供的测试数据（或未提供的训练数据）上评分</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sklearn.ensemble </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RandomForestRegressor</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sklearn.model_selection </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> train_test_split </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tts</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.regressor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> residuals_plot</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.datasets </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> load_concrete</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Load the dataset and split into train/test splits</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X, y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> load_concrete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X_train, X_test, y_train, y_test </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> tts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X, y, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">test_size</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">shuffle</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Create the visualizer, fit, score, and show it</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">viz </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> residuals_plot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">RandomForestRegressor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), X_train, y_train, X_test, y_test)</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/ensemble/forest.py:248: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  &quot;10 in version 0.20 to 100 in 0.22.&quot;, FutureWarning)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记5-回归可视化/output_8_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>预测误差图显示了数据集的实际目标与我们的模型生成的预测值之间的关系。这使我们可以看到模型中有多少方差。数据科学家可以通过与预测完全匹配模型的45度线进行比较，使用此图来诊断回归模型。</p><table><thead><tr><th>可视化器</th><th>PredictionError</th></tr></thead><tbody><tr><td>快速使用方法</td><td>prediction_error()</td></tr><tr><td>模型</td><td>回归</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sklearn.model_selection </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> train_test_split</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sklearn.linear_model </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Lasso</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.datasets </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> load_concrete</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.regressor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> PredictionError</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Load a regression dataset</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X, y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> load_concrete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Create the train and test data</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X_train, X_test, y_train, y_test </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> train_test_split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X, y, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">test_size</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">random_state</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Instantiate the linear model and visualizer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">model </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Lasso</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> PredictionError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(model)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Fit the training data to the visualizer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X_train, y_train)  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Evaluate the model on the test data</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X_test, y_test)  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Finalize and render the figure</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记5-回归可视化/output_10_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_2-2-快速方法" tabindex="-1"><a class="header-anchor" href="#_2-2-快速方法"><span>2.2 快速方法</span></a></h3><p>使用关联的快速方法可以实现相同的功能prediction_error。此方法将PredictionError使用关联的参数构建对象，将其拟合，然后（可选）立即显示可视化效果。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sklearn.model_selection </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> train_test_split</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sklearn.linear_model </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Lasso</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.datasets </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> load_concrete</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.regressor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> prediction_error</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Load a regression dataset</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X, y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> load_concrete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Create the train and test data</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X_train, X_test, y_train, y_test </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> train_test_split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X, y, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">test_size</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">random_state</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Instantiate the linear model and visualizer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">model </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Lasso</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> prediction_error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(model, X_train, y_train, X_test, y_test)</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记5-回归可视化/output_12_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_2-alpha选择" tabindex="-1"><a class="header-anchor" href="#_2-alpha选择"><span>2 alpha选择</span></a></h2><p>正则化设计用来惩罚模型的复杂性，因此alpha越高，模型的复杂性就越低，从而减少了因方差（过拟合）引起的误差。另一方面，过高的Alpha会由于偏差（欠拟合）而增加误差。因此，重要的是选择一个最佳的alpha，以使两个方向的误差最小。</p><p>AlphaSelection可视化工具演示了在线性模型正则化过程中，alpha的不同值是如何影响模型选择的。一般来说，正则化对α的影响更大。</p><table><thead><tr><th>可视化器</th><th>AlphaSelection</th></tr></thead><tbody><tr><td>快速使用方法</td><td>alphas()</td></tr><tr><td>模型</td><td>回归</td></tr><tr><td>工作流程</td><td>模型选择，超参数调整</td></tr></tbody></table><h3 id="_3-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-1-基本使用"><span>3.1 基本使用</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> numpy </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sklearn.linear_model </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> LassoCV</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.regressor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AlphaSelection</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.datasets </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> load_concrete</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Load the regression dataset</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 加载数据集</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X, y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> load_concrete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Create a list of alphas to cross-validate against</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建不同的alphas值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">alphas </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> np.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">logspace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">400</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Instantiate the linear model and visualizer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">model </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> LassoCV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">alphas</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">alphas)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> AlphaSelection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(model)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X, y)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1943: FutureWarning: You should specify a value for &#39;cv&#39; instead of relying on the default value. The default value will change from 3 to 5 in version 0.22.
  warnings.warn(CV_WARNING, FutureWarning)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记5-回归可视化/output_15_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_3-2-快速方法" tabindex="-1"><a class="header-anchor" href="#_3-2-快速方法"><span>3.2 快速方法</span></a></h3><p>上面的相同功能可以通过关联的快速方法alpha来实现。此方法将AlphaSelection使用关联的参数构建Visualizer对象，将其拟合，然后（可选）立即显示它。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sklearn.linear_model </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> LassoCV</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.regressor.alphas </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> alphas</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.datasets </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> load_energy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Load dataset</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X, y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> load_energy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Use the quick method and immediately show the figure</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">alphas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">LassoCV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">random_state</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), X, y)</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1943: FutureWarning: You should specify a value for &#39;cv&#39; instead of relying on the default value. The default value will change from 3 to 5 in version 0.22.
  warnings.warn(CV_WARNING, FutureWarning)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记5-回归可视化/output_17_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_3-库克距离cook-s-distance" tabindex="-1"><a class="header-anchor" href="#_3-库克距离cook-s-distance"><span>3 库克距离Cook’s Distance</span></a></h2><p>库克距离是对观察值或实例对线性回归的影响的度量。影响较大的实例可能是异常值，而具有大量高度影响点的数据集可能不是适合线性模型的良好预测指标。该CooksDistance可视化显示了索引的所有实例的干情节及其关联的距离分值，用启发式的阈值一起迅速显示该数据集的百分之多少可以影响OLS回归模型。库克距离具体介绍见： <a href="http://sofasofa.io/forum_main_post.php?postid=1000622" target="_blank" rel="noopener noreferrer">http://sofasofa.io/forum_main_post.php?postid=1000622</a></p><table><thead><tr><th>可视化器</th><th>CooksDistance</th></tr></thead><tbody><tr><td>快速使用方法</td><td>cooks_distance()</td></tr><tr><td>模型</td><td>通用线性模型</td></tr><tr><td>工作流程</td><td>数据集/灵敏度分析</td></tr></tbody></table><h3 id="_4-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_4-1-基本使用"><span>4.1 基本使用</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.regressor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CooksDistance</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.datasets </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> load_concrete</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Load the regression dataset</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X, y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> load_concrete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Instantiate and fit the visualizer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> CooksDistance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(X, y)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">visualizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记5-回归可视化/output_20_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_4-2-快速方法" tabindex="-1"><a class="header-anchor" href="#_4-2-快速方法"><span>4.2 快速方法</span></a></h3><p>使用关联的快速方法，可以在一行中实现与上述类似的功能class_prediction_error。此方法将实例化ClassPredictionError可视化程序并将其适合于训练数据，然后将其在可选提供的测试数据（或未提供的训练数据）上评分。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.datasets </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> load_concrete</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> yellowbrick.regressor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cooks_distance</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Load the regression dataset</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">X, y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> load_concrete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Instantiate and fit the visualizer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">cooks_distance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    X, y,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    draw_threshold</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    linefmt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;C0-&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">markerfmt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;,&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记5-回归可视化/output_22_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_4-参考" tabindex="-1"><a class="header-anchor" href="#_4-参考"><span>4 参考</span></a></h2><ul><li><a href="https://www.scikit-yb.org/en/latest/api/regressor/residuals.html" target="_blank" rel="noopener noreferrer">https://www.scikit-yb.org/en/latest/api/regressor/residuals.html</a></li><li><a href="https://www.scikit-yb.org/en/latest/api/regressor/peplot.html" target="_blank" rel="noopener noreferrer">https://www.scikit-yb.org/en/latest/api/regressor/peplot.html</a></li><li><a href="https://www.scikit-yb.org/en/latest/api/regressor/alphas.html" target="_blank" rel="noopener noreferrer">https://www.scikit-yb.org/en/latest/api/regressor/alphas.html</a></li><li><a href="https://www.scikit-yb.org/en/latest/api/regressor/influence.html" target="_blank" rel="noopener noreferrer">https://www.scikit-yb.org/en/latest/api/regressor/influence.html</a></li></ul>`,55)]))}const r=s(t,[["render",e],["__file","2020-07-25-_机器学习_ Yellowbrick使用笔记5-回归可视化.html.vue"]]),k=JSON.parse('{"path":"/blog/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/2020-07-25-_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0_%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96.html","title":"[机器学习] Yellowbrick使用笔记5-回归可视化","lang":"zh-CN","frontmatter":{"date":"2020-07-25T10:49:30.000Z","category":["机器学习"],"tag":["机器学习","Python","数据分析与可视化"],"description":"[机器学习] Yellowbrick使用笔记5-回归可视化 回归模型试图预测连续空间中的目标。回归计分可视化工具显示模型空间中的实例，以便更好地理解模型是如何进行预测的。代码下载 我们目前已经实施了三种回归评估： 残差图Residuals Plot：绘制期望值与实际值之间的差 预测误差图Prediction Error Plot：在模型空间中绘制期望值...","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/2020-07-25-_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0_%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[机器学习] Yellowbrick使用笔记5-回归可视化"}],["meta",{"property":"og:description","content":"[机器学习] Yellowbrick使用笔记5-回归可视化 回归模型试图预测连续空间中的目标。回归计分可视化工具显示模型空间中的实例，以便更好地理解模型是如何进行预测的。代码下载 我们目前已经实施了三种回归评估： 残差图Residuals Plot：绘制期望值与实际值之间的差 预测误差图Prediction Error Plot：在模型空间中绘制期望值..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5D%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96/output_4_0.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"机器学习"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"数据分析与可视化"}],["meta",{"property":"article:published_time","content":"2020-07-25T10:49:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[机器学习] Yellowbrick使用笔记5-回归可视化\\",\\"image\\":[\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5D%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96/output_4_0.png\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5D%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96/output_6_0.png\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5D%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96/output_8_1.png\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5D%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96/output_10_0.png\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5D%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96/output_12_0.png\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5D%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96/output_15_1.png\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5D%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96/output_17_1.png\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5D%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96/output_20_0.png\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%5D%20Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B05-%E5%9B%9E%E5%BD%92%E5%8F%AF%E8%A7%86%E5%8C%96/output_22_0.png\\"],\\"datePublished\\":\\"2020-07-25T10:49:30.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"1 残差图Residuals Plot","slug":"_1-残差图residuals-plot","link":"#_1-残差图residuals-plot","children":[{"level":3,"title":"1.1 基础使用","slug":"_1-1-基础使用","link":"#_1-1-基础使用","children":[]},{"level":3,"title":"1.2 快速方法","slug":"_1-2-快速方法","link":"#_1-2-快速方法","children":[]},{"level":3,"title":"2.2 快速方法","slug":"_2-2-快速方法","link":"#_2-2-快速方法","children":[]}]},{"level":2,"title":"2 alpha选择","slug":"_2-alpha选择","link":"#_2-alpha选择","children":[{"level":3,"title":"3.1 基本使用","slug":"_3-1-基本使用","link":"#_3-1-基本使用","children":[]},{"level":3,"title":"3.2 快速方法","slug":"_3-2-快速方法","link":"#_3-2-快速方法","children":[]}]},{"level":2,"title":"3 库克距离Cook’s Distance","slug":"_3-库克距离cook-s-distance","link":"#_3-库克距离cook-s-distance","children":[{"level":3,"title":"4.1 基本使用","slug":"_4-1-基本使用","link":"#_4-1-基本使用","children":[]},{"level":3,"title":"4.2 快速方法","slug":"_4-2-快速方法","link":"#_4-2-快速方法","children":[]}]},{"level":2,"title":"4 参考","slug":"_4-参考","link":"#_4-参考","children":[]}],"git":{},"readingTime":{"minutes":8.17,"words":2450},"filePathRelative":"blog/机器学习/Yellowbrick使用笔记/2020-07-25-[机器学习] Yellowbrick使用笔记5-回归可视化.md","localizedDate":"2020年7月25日","excerpt":"\\n<p>回归模型试图预测连续空间中的目标。回归计分可视化工具显示模型空间中的实例，以便更好地理解模型是如何进行预测的。<a href=\\"https://github.com/luohenyueji/Python-Study-Notes/tree/master/Documents/Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>代码下载</strong></a></p>\\n<p>我们目前已经实施了三种回归评估：</p>\\n<ul>\\n<li>残差图Residuals Plot：绘制期望值与实际值之间的差</li>\\n<li>预测误差图Prediction Error Plot：在模型空间中绘制期望值与实际值</li>\\n<li>alpha选择：视觉调整正则化超参数</li>\\n<li>库克距离Cook’s Distance：描述了单个样本对整个回归模型的影响程度</li>\\n</ul>","autoDesc":true}');export{r as comp,k as data};
