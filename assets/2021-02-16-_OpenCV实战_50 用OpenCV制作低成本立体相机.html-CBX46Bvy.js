import{_ as i,c as a,a as n,o as e}from"./app-HB0Nuzez.js";const l={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="opencv实战-50-用opencv制作低成本立体相机" tabindex="-1"><a class="header-anchor" href="#opencv实战-50-用opencv制作低成本立体相机"><span>[OpenCV实战]50 用OpenCV制作低成本立体相机</span></a></h1><p>本文主要讲述利用OpenCV制作低成本立体相机以及如何使用OpenCV创建3D视频，准确来说是模仿双目立体相机，我们通常说立体相机一般是指双目立体相机，就是带两个摄像头的那种（目就是指眼睛，双目就是两只眼睛），这种双目摄像机模仿人的视觉，所以应用很广泛（主要是工业机器人视觉）。双目摄像机也广泛应用于无人驾驶，比如特斯拉、图森未来，小鹏汽车在自家的无人驾驶汽车上都安载了立体相机，双目和多目的都有。另外双目视觉加上深度学习还蛮好水论文的。本文主要说的是低成本，实际上没人这样干，有专门的双目立体相机，已经非常成熟了，但是原理大差不差。专门的工业级双目立体相机价格大概5000多左右，家用的或者用来玩的最低1000能买到，有些双目立体摄像机还自带深度学习算法，所以本文看看就好。</p><p>本文主要参考<a href="https://learnopencv.com/making-a-low-cost-stereo-camera-using-opencv/" target="_blank" rel="noopener noreferrer">Making A Low-Cost Stereo Camera Using OpenCV</a>和<a href="https://www.cnblogs.com/zyly/p/9373991.html" target="_blank" rel="noopener noreferrer">双目视觉之空间坐标计算</a>。 本文所有代码见：</p><ul><li>github: <a href="https://github.com/luohenyueji/OpenCV-Practical-Exercise" target="_blank" rel="noopener noreferrer">OpenCV-Practical-Exercise</a></li><li>gitee(备份，主要是下载速度快): <a href="https://gitee.com/luohenyueji/OpenCV-Practical-Exercise-Gitee" target="_blank" rel="noopener noreferrer">OpenCV-Practical-Exercise-gitee</a></li></ul><h2 id="_1-相关介绍" tabindex="-1"><a class="header-anchor" href="#_1-相关介绍"><span>1 相关介绍</span></a></h2><h3 id="_1-1-背景" tabindex="-1"><a class="header-anchor" href="#_1-1-背景"><span>1.1 背景</span></a></h3><p>我们通常都使用下图所示的红青色3D眼镜来体验3D效果。它是如何工作的？当屏幕只是平面时，我们如何体验3D效果？这些是使用立体摄像机设置捕获的。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]50 用OpenCV制作低成本立体相机/image/1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在<a href="https://blog.csdn.net/LuohenYJ/article/details/113795379" target="_blank" rel="noopener noreferrer">[OpenCV实战]49 对极几何与立体视觉初探</a>文章中，我们了解了立体相机以及如何将其用于帮助计算机感知深度。在本文中，我们学习如何创建自己的立体相机，并了解如何将其用于创建3D视频。具体来说包括立体相机的创建，立体相机的校准以及自定义3D视频，主要是讲立体相机的校准。</p><h3 id="_1-2-创建双目立体相机" tabindex="-1"><a class="header-anchor" href="#_1-2-创建双目立体相机"><span>1.2 创建双目立体相机</span></a></h3><p>立体摄像头设置通常包含两个相同的摄像头，它们以固定的距离隔开。工业级标准立体摄像机设置使用一对相同的摄像机。说白了这里你需要一个自己的立体相机（双目立体相机），你可以买，也可以自己创造一个。但是保持两个摄像机严格固定和平行。关于立体相机型号可以看看<a href="https://rosindustrial.org/news/2016/1/13/3d-camera-survey" target="_blank" rel="noopener noreferrer">3D Camera Survey</a>。关于立体相机的原理见 <a href="https://www.sohu.com/a/203027140_100007727" target="_blank" rel="noopener noreferrer">深度相机原理揭秘--双目立体视觉 </a>。</p><p>如果是自己弄台双目立体相机，也不是不行。反正很多人也这样干。你可以看用文章<a href="http://www.gaohaipeng.com/1772.html" target="_blank" rel="noopener noreferrer">DIY 3D立体相机的帖子整理</a>用摄像头来自己搭建双目立体相机。或者也可以通过两部手机搭建双目立体相机，详情见<a href="https://jingyan.baidu.com/article/f3e34a12ce89ecf5eb65351c.html" target="_blank" rel="noopener noreferrer">低成本DIY拍摄3D照片的相机</a>和<a href="http://www.nphoto.net/news/2009-08/30/60445eb205a478b4.shtml" target="_blank" rel="noopener noreferrer">如何用两台傻瓜相机制作自己的3D相机</a>。反正最终弄出来的结果如下图所示：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]50 用OpenCV制作低成本立体相机/image/2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果是高精度双目视觉应用的话，stereolabs家的<a href="https://www.stereolabs.com/zed/" target="_blank" rel="noopener noreferrer">zed系列相机</a>，毕竟工业级双目相机的搭建技术含量很高，不是随便就能弄好的，国内在这一块相对比较薄弱。下图就是zed系列某部立体相机的真容，4000多一点，百度的图片。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]50 用OpenCV制作低成本立体相机/image/3.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当你有了立体相机，你需要进行立体标定(stereo calibration)以搭建自己的视觉系统，为什么要这要做后面会说到。<strong>本文只是简单的讲一讲相关原理，会提供图像，自己也不需要有双目相机，看看就好</strong>。至于更详细的双目视觉系统搭建可以看看文章<a href="https://blog.csdn.net/weixin_43452554/article/details/108048794" target="_blank" rel="noopener noreferrer">一起搭建双目视觉系统</a>。</p><h2 id="_2-相机立体标定与校正" tabindex="-1"><a class="header-anchor" href="#_2-相机立体标定与校正"><span>2 相机立体标定与校正</span></a></h2><h3 id="_2-1-立体标定重要性" tabindex="-1"><a class="header-anchor" href="#_2-1-立体标定重要性"><span>2.1 立体标定重要性</span></a></h3><p>为了理解立体标定的重要性，我们提供了没有立体标定的图像，如下图所示，然后生成视差图。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]50 用OpenCV制作低成本立体相机/image/4.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>生成的视差图如下图所示：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]50 用OpenCV制作低成本立体相机/image/5.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们观察到，使用未校准的立体相机设置生成的视差图非常嘈杂且不准确。为什么会这样？根据<a href="https://blog.csdn.net/LuohenYJ/article/details/113795379" target="_blank" rel="noopener noreferrer">[OpenCV实战]49 对极几何与立体视觉初探</a>里提到的，相应的关键点应具有相等的Y坐标，以简化点对应搜索。如下图所示，当我们在几个对应点之间绘制匹配线时，我们观察到这些线不是完全水平的。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]50 用OpenCV制作低成本立体相机/image/6.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>下图显示了相应的关键点具有相等的Y坐标的立体图像，以及使用这些图像生成的视差图。我们观察到，与前一张相比，现在的视差图噪声更低。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]50 用OpenCV制作低成本立体相机/image/7.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>仅当摄像机平行时才可能出现上图这种情况。但是实际过程中，两部摄像机不可能完全平行，或者我们想要达到基本平行需要耗费大量的时间来调整摄像机。所以我们可以用另外一种方式，无需物理调整摄像机，而是在软件方面体标定并校正摄像机。下图说明了立体标定与校准的过程。如下图所示，这个想法是在平行于穿过光学中心的线的公共平面上重新投影两个图像。这样可以确保相应的点具有相同的Y坐标，并且仅通过水平平移进行关联。具体原理见<a href="https://blog.csdn.net/bestrivern/article/details/88397555" target="_blank" rel="noopener noreferrer">双目立体标定</a>。这些东西不是一句两句就能说清楚，只要有这个东西就好了。</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]50 用OpenCV制作低成本立体相机/image/8.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-相机立体标定和校正的步骤" tabindex="-1"><a class="header-anchor" href="#_2-2-相机立体标定和校正的步骤"><span>2.2 相机立体标定和校正的步骤</span></a></h3><p>整个过程如下所示：</p><ul><li>使用标准OpenCV校正方法校准单个相机 。</li><li>确定两个摄像机之间的转换关系。</li><li>使用前面步骤中获得的参数和OpenCV的stereoCalibrate方法，应用于两个图像的变换以进行立体校正。</li><li>使用OpenCV的initUndistortRectifyMap方法找到未失真和已校正图像对所需的映射。</li><li>将此映射应用于原始图像，以校正未失真图像。</li></ul><p>这一些步骤就是相机标定中的张正友标定法，数学原理详解<a href="https://zhuanlan.zhihu.com/p/94244568" target="_blank" rel="noopener noreferrer">相机标定之张正友标定法数学原理详解</a>。这里面会涉及到一系列的OpenCV函数，详细使用见<a href="https://www.cnblogs.com/zyly/p/9373991.html" target="_blank" rel="noopener noreferrer">双目视觉之空间坐标计算</a>。总体相机立体标定过程由图表示如下所示：</p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]50 用OpenCV制作低成本立体相机/image/9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>以下几节具体步骤可以跳过不看，直接看代码calibrate.cpp/calibrate.py!</strong></p><h4 id="_2-2-1-单个相机校正" tabindex="-1"><a class="header-anchor" href="#_2-2-1-单个相机校正"><span>2.2.1 单个相机校正</span></a></h4><p>在执行立体标定之前，我们会对两个相机分别进行标定。但是，如果OpenCV的stereoCalibrate()方法可以对两个相机中的每一个进行校正，为什么还要分别标定相机呢？</p><p>这是因为由于要计算的参数很多（较大的参数空间），并且在诸如角点检测和近似点之类的步骤中累积了错误。这增加了迭代方法偏离正确解决方案的机会。因此，我们分别计算摄像机参数，并仅使用stereoCalibrate()方法来查找立体相机之间的对应关系。</p><p>代码如下,主要讲的是提取角点，然后去除畸形点，最后分别对每个相机进行校正。</p><p>所谓角点检测如下图所示，左图是原图，右图是角点检测的可视化结果，我们所需要提取就是角点，然后进行相机校正。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/[OpenCV实战]50 用OpenCV制作低成本立体相机/image/10.jpg" alt="" loading="lazy"></p><p><strong>C++</strong></p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Creating vector to store vectors of 3D points for each checkerboard image</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建vector以存储每个棋盘图像的3D点矢量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Point3f</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> objpoints;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Creating vector to store vectors of 2D points for each checkerboard image</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建vector以存储每个棋盘图像的2D点矢量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Point2f</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> imgpointsL, imgpointsR;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Defining the world coordinates for 3D points</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义三维点的世界坐标</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Point3f</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> objp;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 初始化点，cv::Point3f(j, i, 0)保存的是x,y,z坐标。</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i{ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CHECKERBOARD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j{ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }; j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CHECKERBOARD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]; j</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        objp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push_back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Point3f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(j, i, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Extracting path of individual image stored in a given directory</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 提取存储在给定目录中的单个图像的路径</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::String</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> imagesL, imagesR;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Path of the folder containing checkerboard images</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 包含棋盘图像的文件夹的路径</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// pathL和pathR分别为两个摄像头在多个时刻拍摄的图像</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::string pathL </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./data/stereoL/*.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::string pathR </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./data/stereoR/*.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 提取两个文件夹 所有的图像</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">glob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(pathL, imagesL);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">glob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(pathR, imagesR);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Mat frameL, frameR, grayL, grayR;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// vector to store the pixel coordinates of detected checker board corners</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 用于存储检测到的棋盘角点的像素坐标的向量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Point2f</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> corner_ptsL, corner_ptsR;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> successL, successR;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Looping over all the images in the directory</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 遍历目录中的所有图像</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i{ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> imagesL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 提取同一时刻分别用两个摄像头拍到的照片</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    frameL </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">imread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">imagesL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cvtColor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(frameL, grayL, cv::COLOR_BGR2GRAY);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    frameR </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">imread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">imagesR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cvtColor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(frameR, grayR, cv::COLOR_BGR2GRAY);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Finding checker board corners</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 寻找棋盘图的内角点位置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // If desired number of corners are found in the image then success = true</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果在图像中找到所需的角数，则success=true</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 具体函数使用介绍见https://blog.csdn.net/h532600610/article/details/51800488</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    successL </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findChessboardCorners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        grayL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CHECKERBOARD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CHECKERBOARD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        corner_ptsL);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // cv::CALIB_CB_ADAPTIVE_THRESH | cv::CALIB_CB_FAST_CHECK | cv::CALIB_CB_NORMALIZE_IMAGE);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    successR </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findChessboardCorners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        grayR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CHECKERBOARD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CHECKERBOARD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        corner_ptsR);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // cv::CALIB_CB_ADAPTIVE_THRESH | cv::CALIB_CB_FAST_CHECK | cv::CALIB_CB_NORMALIZE_IMAGE);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果检测到所需的角点个数，则细化像素坐标并将其显示在棋盘格图像上</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((successL) </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (successR))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // TermCriteria定义迭代算法终止条件的类</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 具体使用见 https://www.jianshu.com/p/548868c4d34e</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cv::TermCriteria </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">criteria</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cv::TermCriteria::EPS </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv::TermCriteria::MAX_ITER, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.001</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // refining pixel coordinates for given 2d points.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 细化给定2D点的像素坐标，cornerSubPix用于亚像素角点检测</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 具体参数见https://blog.csdn.net/guduruyu/article/details/69537083</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cornerSubPix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(grayL, corner_ptsL, cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), criteria);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cornerSubPix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(grayR, corner_ptsR, cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), criteria);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Displaying the detected corner points on the checker board</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // drawChessboardCorners用于绘制棋盘格角点的函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">drawChessboardCorners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(frameL, cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CHECKERBOARD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CHECKERBOARD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]), corner_ptsL, successL);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">drawChessboardCorners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(frameR, cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CHECKERBOARD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CHECKERBOARD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]), corner_ptsR, successR);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 保存数据以供后续使用</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 保存三维点数据</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        objpoints</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push_back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(objp);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 保存角点信息</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        imgpointsL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push_back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(corner_ptsL);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        imgpointsR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push_back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(corner_ptsR);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //cv::imshow(&quot;ImageL&quot;, frameL);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //cv::imshow(&quot;ImageR&quot;, frameR);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //cv::waitKey(0);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 关闭所有窗口</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">destroyAllWindows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 通过传递已知三维点（objpoints）的值和检测到的角点（imgpoints）的相应像素坐标来执行相机校准</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// mtxL,mtxR为内参数矩阵， distL和distR为畸变矩阵</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// R_L和R_R为旋转向量，T_L和T_R为位移向量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Mat mtxL, distL, R_L, T_L;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Mat mtxR, distR, R_R, T_R;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Mat new_mtxL, new_mtxR;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Calibrating left camera</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 校正左边相机</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 相机标定函数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 函数使用见https://blog.csdn.net/u011574296/article/details/73823569</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">calibrateCamera</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(objpoints,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    imgpointsL,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    grayL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    mtxL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    distL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    R_L,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    T_L);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 去畸变，优化相机内参，这一步可选</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// getOptimalNewCameraMatrix函数使用见https://www.jianshu.com/p/df78749b4318</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">new_mtxL </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getOptimalNewCameraMatrix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(mtxL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    distL,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    grayL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    grayL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Calibrating right camera</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 校正右边相机</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">calibrateCamera</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(objpoints,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    imgpointsR,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    grayR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    mtxR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    distR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    R_R,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    T_R);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">new_mtxR </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getOptimalNewCameraMatrix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(mtxR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    distR,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    grayR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    grayR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Python</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># Set the path to the images captured by the left and right cameras</span></span>
<span class="line"><span>pathL = &quot;./data/stereoL/&quot;</span></span>
<span class="line"><span>pathR = &quot;./data/stereoR/&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&quot;Extracting image coordinates of respective 3D pattern ....\\n&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Termination criteria for refining the detected corners</span></span>
<span class="line"><span># 细化检测角点的终止准则 </span></span>
<span class="line"><span>criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>objp = np.zeros((9 * 6, 3), np.float32)</span></span>
<span class="line"><span>objp[:, :2] = np.mgrid[0:9, 0:6].T.reshape(-1, 2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>img_ptsL = []</span></span>
<span class="line"><span>img_ptsR = []</span></span>
<span class="line"><span>obj_pts = []</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 处理每一张图</span></span>
<span class="line"><span>for i in tqdm(range(1, 28)):</span></span>
<span class="line"><span>    imgL = cv2.imread(pathL + &quot;img%d.png&quot; % i)</span></span>
<span class="line"><span>    imgR = cv2.imread(pathR + &quot;img%d.png&quot; % i)</span></span>
<span class="line"><span>    imgL_gray = cv2.imread(pathL + &quot;img%d.png&quot; % i, 0)</span></span>
<span class="line"><span>    imgR_gray = cv2.imread(pathR + &quot;img%d.png&quot; % i, 0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    outputL = imgL.copy()</span></span>
<span class="line"><span>    outputR = imgR.copy()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    retR, cornersR = cv2.findChessboardCorners(outputR, (9, 6), None)</span></span>
<span class="line"><span>    retL, cornersL = cv2.findChessboardCorners(outputL, (9, 6), None)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if retR and retL:</span></span>
<span class="line"><span>        obj_pts.append(objp)</span></span>
<span class="line"><span>        cv2.cornerSubPix(imgR_gray, cornersR, (11, 11), (-1, -1), criteria)</span></span>
<span class="line"><span>        cv2.cornerSubPix(imgL_gray, cornersL, (11, 11), (-1, -1), criteria)</span></span>
<span class="line"><span>        cv2.drawChessboardCorners(outputR, (9, 6), cornersR, retR)</span></span>
<span class="line"><span>        cv2.drawChessboardCorners(outputL, (9, 6), cornersL, retL)</span></span>
<span class="line"><span>        # 		cv2.imshow(&#39;cornersR&#39;,outputR)</span></span>
<span class="line"><span>        # 		cv2.imshow(&#39;cornersL&#39;,outputL)</span></span>
<span class="line"><span>        # 		cv2.waitKey(0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        img_ptsL.append(cornersL)</span></span>
<span class="line"><span>        img_ptsR.append(cornersR)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&quot;Calculating left camera parameters ... &quot;)</span></span>
<span class="line"><span># Calibrating left camera</span></span>
<span class="line"><span># 校正左边相机</span></span>
<span class="line"><span>retL, mtxL, distL, rvecsL, tvecsL = cv2.calibrateCamera(obj_pts, img_ptsL, imgL_gray.shape[::-1], None, None)</span></span>
<span class="line"><span>hL, wL = imgL_gray.shape[:2]</span></span>
<span class="line"><span>new_mtxL, roiL = cv2.getOptimalNewCameraMatrix(mtxL, distL, (wL, hL), 1, (wL, hL))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&quot;Calculating right camera parameters ... &quot;)</span></span>
<span class="line"><span># Calibrating right camera</span></span>
<span class="line"><span># 校正右边相机</span></span>
<span class="line"><span>retR, mtxR, distR, rvecsR, tvecsR = cv2.calibrateCamera(obj_pts, img_ptsR, imgR_gray.shape[::-1], None, None)</span></span>
<span class="line"><span>hR, wR = imgR_gray.shape[:2]</span></span>
<span class="line"><span>new_mtxR, roiR = cv2.getOptimalNewCameraMatrix(mtxR, distR, (wR, hR), 1, (wR, hR))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-使用固定的固有参数执行立体标定" tabindex="-1"><a class="header-anchor" href="#_2-2-2-使用固定的固有参数执行立体标定"><span>2.2.2 使用固定的固有参数执行立体标定</span></a></h4><p>校准摄像机后，我们将它们传递给stereoCalibrate方法，我们还传递两个相机捕获的3D点和相应的2D像素坐标，用于计算相机间的转换关系。这样实现了立体标定，代码如下：</p><p><strong>C++</strong></p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Here we fix the intrinsic camara matrixes so that only Rot, Trns, Emat and Fmat</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// are calculated. Hence intrinsic parameters are the same.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在这里，我们修正了固有的camara矩阵，以便只计算Rot、Trns、Emat和Fmat。因此内在参数是相同的。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Mat Rot, Trns, Emat, Fmat;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv::CALIB_FIX_INTRINSIC;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// This step is performed to transformation between the two cameras and calculate Essential and Fundamenatl matrix</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 同时标定两个摄像头，函数介绍见https://www.cnblogs.com/zyly/p/9373991.html</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stereoCalibrate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(objpoints,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    imgpointsL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    imgpointsR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    new_mtxL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    distL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    new_mtxR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    distR,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    grayR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Rot,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Trns,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Emat,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Fmat,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flag,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TermCriteria</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cv::TermCriteria::MAX_ITER </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv::TermCriteria::EPS, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">e</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Python</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Stereo calibration .....&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flags </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flags </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv2.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">CALIB_FIX_INTRINSIC</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Here we fix the intrinsic camara matrixes so that only Rot, Trns, Emat and Fmat are calculated.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Hence intrinsic parameters are the same </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">criteria_stereo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (cv2.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">TERM_CRITERIA_EPS</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv2.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">TERM_CRITERIA_MAX_ITER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.001</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 立体标定</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># This step is performed to transformation between the two cameras and calculate Essential and Fundamenatl matrix</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">retS, new_mtxL, distL, new_mtxR, distR, Rot, Trns, Emat, Fmat </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv2.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">stereoCalibrate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(obj_pts,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                                                    img_ptsL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                                                    img_ptsR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                                                    new_mtxL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                                                    distL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                                                    new_mtxR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                                                    distR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                                                    imgL_gray.shape[::</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                                                    criteria_stereo,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                                                    flags)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-立体校正" tabindex="-1"><a class="header-anchor" href="#_2-2-3-立体校正"><span>2.2.3 立体校正</span></a></h4><p>使用相机间的内外参数，和转换关系参数，就能够进行立体校正。立体校正运用旋转使两个相机图像面都在同一平面上，stereoRectify方法还能返回新坐标空间中的投影矩阵。关于投影矩阵这是个相机几何学的基础概念，具体见<a href="https://www.dazhuanlan.com/2019/12/05/5de81fc7aa72d/" target="_blank" rel="noopener noreferrer">Projection Matrices</a>。代码如下：</p><p><strong>C++</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cv::Mat rect_l, rect_r, proj_mat_l, proj_mat_r, Q;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Once we know the transformation between the two cameras we can perform stereo rectification</span></span>
<span class="line"><span>// 一旦我们知道两个摄像机之间的变换，我们就可以进行立体校正</span></span>
<span class="line"><span>// stereoRectify同时校正两个摄像机，函数介绍见https://www.cnblogs.com/zyly/p/9373991.html</span></span>
<span class="line"><span>cv::stereoRectify(new_mtxL,</span></span>
<span class="line"><span>    distL,</span></span>
<span class="line"><span>    new_mtxR,</span></span>
<span class="line"><span>    distR,</span></span>
<span class="line"><span>    grayR.size(),</span></span>
<span class="line"><span>    Rot,</span></span>
<span class="line"><span>    Trns,</span></span>
<span class="line"><span>    rect_l,</span></span>
<span class="line"><span>    rect_r,</span></span>
<span class="line"><span>    proj_mat_l,</span></span>
<span class="line"><span>    proj_mat_r,</span></span>
<span class="line"><span>    Q,</span></span>
<span class="line"><span>    1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Python</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 立体校正</span></span>
<span class="line"><span># Once we know the transformation between the two cameras we can perform stereo rectification</span></span>
<span class="line"><span># StereoRectify function</span></span>
<span class="line"><span>rectify_scale = 1  # if 0 image croped, if 1 image not croped</span></span>
<span class="line"><span>rect_l, rect_r, proj_mat_l, proj_mat_r, Q, roiL, roiR = cv2.stereoRectify(new_mtxL, distL, new_mtxR, distR,</span></span>
<span class="line"><span>                                                                          imgL_gray.shape[::-1], Rot, Trns,</span></span>
<span class="line"><span>                                                                          rectify_scale, (0, 0))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-4-获得未失真的校正立体图像对所需的映射" tabindex="-1"><a class="header-anchor" href="#_2-2-4-获得未失真的校正立体图像对所需的映射"><span>2.2.4 获得未失真的校正立体图像对所需的映射</span></a></h4><p>由于我们假设摄像机是固定的，因此无需再次计算变换。因此，我们计算将立体图像对转换为未失真的校正立体图像对的映射，并将其存储以备将来使用。</p><p><strong>C++</strong></p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Use the rotation matrixes for stereo rectification and camera intrinsics for undistorting the image</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Compute the rectification map (mapping between the original image pixels and</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// their transformed values after applying rectification and undistortion) for left and right camera frames</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 根据相机单目标定得到的内参以及stereoRectify计算出来的值来计算畸变矫正和立体校正的映射变换矩阵</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Mat Left_Stereo_Map1, Left_Stereo_Map2;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::Mat Right_Stereo_Map1, Right_Stereo_Map2;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 函数介绍见https://www.cnblogs.com/zyly/p/9373991.html</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">initUndistortRectifyMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(new_mtxL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    distL,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rect_l,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    proj_mat_l,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    grayR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CV_16SC2,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Left_Stereo_Map1,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Left_Stereo_Map2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">initUndistortRectifyMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(new_mtxR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    distR,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rect_r,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    proj_mat_r,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    grayR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CV_16SC2,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Right_Stereo_Map1,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Right_Stereo_Map2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 保存校正信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cv::FileStorage cv_file </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cv::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FileStorage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;data/params_cpp.xml&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, cv::FileStorage::WRITE);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cv_file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Left_Stereo_Map_x&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Left_Stereo_Map1);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cv_file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Left_Stereo_Map_y&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Left_Stereo_Map2);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cv_file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Right_Stereo_Map_x&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Right_Stereo_Map1);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cv_file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Right_Stereo_Map_y&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, Right_Stereo_Map2);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cv_file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">release</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Python</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># Use the rotation matrixes for stereo rectification and camera intrinsics for undistorting the image</span></span>
<span class="line"><span># Compute the rectification map (mapping between the original image pixels and </span></span>
<span class="line"><span># their transformed values after applying rectification and undistortion) for left and right camera frames</span></span>
<span class="line"><span>Left_Stereo_Map = cv2.initUndistortRectifyMap(new_mtxL, distL, rect_l, proj_mat_l,</span></span>
<span class="line"><span>                                              imgL_gray.shape[::-1], cv2.CV_16SC2)</span></span>
<span class="line"><span>Right_Stereo_Map = cv2.initUndistortRectifyMap(new_mtxR, distR, rect_r, proj_mat_r,</span></span>
<span class="line"><span>                                               imgR_gray.shape[::-1], cv2.CV_16SC2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&quot;Saving paraeters ......&quot;)</span></span>
<span class="line"><span>cv_file = cv2.FileStorage(&quot;data/params_py.xml&quot;, cv2.FILE_STORAGE_WRITE)</span></span>
<span class="line"><span>cv_file.write(&quot;Left_Stereo_Map_x&quot;, Left_Stereo_Map[0])</span></span>
<span class="line"><span>cv_file.write(&quot;Left_Stereo_Map_y&quot;, Left_Stereo_Map[1])</span></span>
<span class="line"><span>cv_file.write(&quot;Right_Stereo_Map_x&quot;, Right_Stereo_Map[0])</span></span>
<span class="line"><span>cv_file.write(&quot;Right_Stereo_Map_y&quot;, Right_Stereo_Map[1])</span></span>
<span class="line"><span>cv_file.release()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-自定义3d视频" tabindex="-1"><a class="header-anchor" href="#_3-自定义3d视频"><span>3 自定义3D视频</span></a></h2><h3 id="_3-1-3d眼镜如何工作" tabindex="-1"><a class="header-anchor" href="#_3-1-3d眼镜如何工作"><span>3.1 3D眼镜如何工作？</span></a></h3><p>校准完我们的DIY立体相机后，我们就可以创建3D视频了。但是，在我们了解如何制作3D视频之前，必须了解3D眼镜的工作原理。我们使用双目视觉系统感知世界。我们的眼睛处于横向不同的位置。因此，它们捕获的信息不同。那么我们的左眼和右眼捕获的信息之间有什么区别？ 例如将你的手机放在你的面前正中处，闭上左眼只用右眼观察手机和闭上右眼只用左眼观察手机，你会发现手机的相对水平位置是不同的。这种位置差异称为水平视差。现在，将手机靠近您并重复相同的实验。您现在观察到了哪些变化？与对象相对应的水平视差增加。因此，物体的视差越高，它越近。这是我们如何使用我们的双眼视觉系统来感知深度的原因。 我们可以通过使用称为体视学stereoscopy的方法，分别向每只眼睛人工呈现两个不同的图像来模拟这种视。最初，对于3D电影，人们是通过使用红色和青色的滤镜对每只眼睛的图像进行编码来实现的。他们使用了红青色3D眼镜，以确保两个图像均到达预期的眼睛。这创造了深度的幻觉。用这种方法产生的立体效果称为立体3D。因此，这些图像被称为立体影片，并且眼镜被称为立体3D眼镜。</p><h3 id="_3-2-创建自定义3d视频" tabindex="-1"><a class="header-anchor" href="#_3-2-创建自定义3d视频"><span>3.2 创建自定义3D视频</span></a></h3><p>我们了解了当使用立体3D眼镜观看时，立体图像对如何转换为立体3D图像以产生深度的幻觉。我们可以使用立体相机设置来捕获多张相机图像，并为每个相机图像对创建一个立体图像。然后，我们将所有连续的立体图像保存为视频，这就是我们制作3D视频的方式！</p><p><strong>要注意所使用的两个摄像头必须经过章节2的摄像头校正，本章节所生产的视频必须使用3D眼镜~~~</strong></p><p>代码如下：</p><p><strong>C++</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;opencv2/opencv.hpp&gt;</span></span>
<span class="line"><span>#include &lt;opencv2/calib3d/calib3d.hpp&gt;</span></span>
<span class="line"><span>#include &lt;opencv2/highgui/highgui.hpp&gt;</span></span>
<span class="line"><span>#include &lt;opencv2/imgproc/imgproc.hpp&gt;</span></span>
<span class="line"><span>#include &lt;stdio.h&gt;</span></span>
<span class="line"><span>#include &lt;iostream&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>	// Check for left and right camera IDs</span></span>
<span class="line"><span>	// 左右视频id</span></span>
<span class="line"><span>	std::string CamL_id{ &quot;data/stereoL.mp4&quot; }, CamR_id{ &quot;data/stereoR.mp4&quot; };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// 打开视频</span></span>
<span class="line"><span>	cv::VideoCapture camL(CamL_id), camR(CamR_id);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	cv::Mat Left_Stereo_Map1, Left_Stereo_Map2;</span></span>
<span class="line"><span>	cv::Mat Right_Stereo_Map1, Right_Stereo_Map2;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// 打开校正文件</span></span>
<span class="line"><span>	cv::FileStorage cv_file = cv::FileStorage(&quot;data/params_cpp.xml&quot;, cv::FileStorage::READ);</span></span>
<span class="line"><span>	cv_file[&quot;Left_Stereo_Map_x&quot;] &gt;&gt; Left_Stereo_Map1;</span></span>
<span class="line"><span>	cv_file[&quot;Left_Stereo_Map_y&quot;] &gt;&gt; Left_Stereo_Map2;</span></span>
<span class="line"><span>	cv_file[&quot;Right_Stereo_Map_x&quot;] &gt;&gt; Right_Stereo_Map1;</span></span>
<span class="line"><span>	cv_file[&quot;Right_Stereo_Map_y&quot;] &gt;&gt; Right_Stereo_Map2;</span></span>
<span class="line"><span>	cv_file.release();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// 检测视频是否存在</span></span>
<span class="line"><span>	// Check if left camera is attched</span></span>
<span class="line"><span>	if (!camL.isOpened())</span></span>
<span class="line"><span>	{</span></span>
<span class="line"><span>		std::cout &lt;&lt; &quot;Could not open camera with index : &quot; &lt;&lt; CamL_id &lt;&lt; std::endl;</span></span>
<span class="line"><span>		return -1;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// Check if right camera is attached</span></span>
<span class="line"><span>	if (!camL.isOpened())</span></span>
<span class="line"><span>	{</span></span>
<span class="line"><span>		std::cout &lt;&lt; &quot;Could not open camera with index : &quot; &lt;&lt; CamL_id &lt;&lt; std::endl;</span></span>
<span class="line"><span>		return -1;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	cv::Mat frameL, frameR;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	for (size_t i{ 0 }; i &lt; 100000; i++)</span></span>
<span class="line"><span>	{</span></span>
<span class="line"><span>		camL &gt;&gt; frameL;</span></span>
<span class="line"><span>		camR &gt;&gt; frameR;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		cv::Mat Left_nice, Right_nice;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		// 简单重映射图像</span></span>
<span class="line"><span>		// 函数使用见https://blog.csdn.net/qq_42887760/article/details/86513649</span></span>
<span class="line"><span>		cv::remap(frameL,</span></span>
<span class="line"><span>			Left_nice,</span></span>
<span class="line"><span>			Left_Stereo_Map1,</span></span>
<span class="line"><span>			Left_Stereo_Map2,</span></span>
<span class="line"><span>			cv::INTER_LANCZOS4,</span></span>
<span class="line"><span>			cv::BORDER_CONSTANT,</span></span>
<span class="line"><span>			0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		cv::remap(frameR,</span></span>
<span class="line"><span>			Right_nice,</span></span>
<span class="line"><span>			Right_Stereo_Map1,</span></span>
<span class="line"><span>			Right_Stereo_Map2,</span></span>
<span class="line"><span>			cv::INTER_LANCZOS4,</span></span>
<span class="line"><span>			cv::BORDER_CONSTANT,</span></span>
<span class="line"><span>			0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		cv::Mat Left_nice_split[3], Right_nice_split[3];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		std::vector&lt;cv::Mat&gt; Anaglyph_channels;</span></span>
<span class="line"><span>		// 分离通道</span></span>
<span class="line"><span>		cv::split(Left_nice, Left_nice_split);</span></span>
<span class="line"><span>		cv::split(Right_nice, Right_nice_split);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		Anaglyph_channels.push_back(Left_nice_split[0]);</span></span>
<span class="line"><span>		Anaglyph_channels.push_back(Left_nice_split[1]);</span></span>
<span class="line"><span>		Anaglyph_channels.push_back(Right_nice_split[2]);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		cv::Mat Anaglyph_img;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		// 组合为3D图像</span></span>
<span class="line"><span>		cv::merge(Anaglyph_channels, Anaglyph_img);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		cv::imshow(&quot;Anaglyph image&quot;, Anaglyph_img);</span></span>
<span class="line"><span>		cv::waitKey(1);</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Python</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import numpy as np</span></span>
<span class="line"><span>import cv2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CamL_id = &quot;data/stereoL.mp4&quot;</span></span>
<span class="line"><span>CamR_id = &quot;data/stereoR.mp4&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CamL = cv2.VideoCapture(CamL_id)</span></span>
<span class="line"><span>CamR = cv2.VideoCapture(CamR_id)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&quot;Reading parameters ......&quot;)</span></span>
<span class="line"><span>cv_file = cv2.FileStorage(&quot;data/params_py.xml&quot;, cv2.FILE_STORAGE_READ)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Left_Stereo_Map_x = cv_file.getNode(&quot;Left_Stereo_Map_x&quot;).mat()</span></span>
<span class="line"><span>Left_Stereo_Map_y = cv_file.getNode(&quot;Left_Stereo_Map_y&quot;).mat()</span></span>
<span class="line"><span>Right_Stereo_Map_x = cv_file.getNode(&quot;Right_Stereo_Map_x&quot;).mat()</span></span>
<span class="line"><span>Right_Stereo_Map_y = cv_file.getNode(&quot;Right_Stereo_Map_y&quot;).mat()</span></span>
<span class="line"><span>cv_file.release()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>while True:</span></span>
<span class="line"><span>    retR, imgR = CamR.read()</span></span>
<span class="line"><span>    retL, imgL = CamL.read()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if retL and retR:</span></span>
<span class="line"><span>        imgR_gray = cv2.cvtColor(imgR, cv2.COLOR_BGR2GRAY)</span></span>
<span class="line"><span>        imgL_gray = cv2.cvtColor(imgL, cv2.COLOR_BGR2GRAY)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        Left_nice = cv2.remap(imgL, Left_Stereo_Map_x, Left_Stereo_Map_y, cv2.INTER_LANCZOS4, cv2.BORDER_CONSTANT, 0)</span></span>
<span class="line"><span>        Right_nice = cv2.remap(imgR, Right_Stereo_Map_x, Right_Stereo_Map_y, cv2.INTER_LANCZOS4, cv2.BORDER_CONSTANT, 0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        output = Right_nice.copy()</span></span>
<span class="line"><span>        output[:, :, 0] = Right_nice[:, :, 0]</span></span>
<span class="line"><span>        output[:, :, 1] = Right_nice[:, :, 1]</span></span>
<span class="line"><span>        output[:, :, 2] = Left_nice[:, :, 2]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # output = Left_nice+Right_nice</span></span>
<span class="line"><span>        output = cv2.resize(output, (700, 700))</span></span>
<span class="line"><span>        cv2.namedWindow(&quot;3D movie&quot;, cv2.WINDOW_NORMAL)</span></span>
<span class="line"><span>        cv2.resizeWindow(&quot;3D movie&quot;, 700, 700)</span></span>
<span class="line"><span>        cv2.imshow(&quot;3D movie&quot;, output)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        cv2.waitKey(1)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    else:</span></span>
<span class="line"><span>        break</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-参考" tabindex="-1"><a class="header-anchor" href="#_4-参考"><span>4 参考</span></a></h2><ul><li><a href="https://learnopencv.com/making-a-low-cost-stereo-camera-using-opencv/" target="_blank" rel="noopener noreferrer">Making A Low-Cost Stereo Camera Using OpenCV</a></li><li><a href="https://blog.csdn.net/LuohenYJ/article/details/113795379" target="_blank" rel="noopener noreferrer">[OpenCV实战]49 对极几何与立体视觉初探</a></li><li><a href="https://rosindustrial.org/news/2016/1/13/3d-camera-survey" target="_blank" rel="noopener noreferrer">3D Camera Survey</a></li><li><a href="https://www.sohu.com/a/203027140_100007727" target="_blank" rel="noopener noreferrer">深度相机原理揭秘--双目立体视觉 </a></li><li><a href="http://www.gaohaipeng.com/1772.html" target="_blank" rel="noopener noreferrer">DIY 3D立体相机的帖子整理</a></li><li><a href="https://jingyan.baidu.com/article/f3e34a12ce89ecf5eb65351c.html" target="_blank" rel="noopener noreferrer">低成本DIY拍摄3D照片的相机</a></li><li><a href="http://www.nphoto.net/news/2009-08/30/60445eb205a478b4.shtml" target="_blank" rel="noopener noreferrer">如何用两台傻瓜相机制作自己的3D相机</a></li><li><a href="https://www.stereolabs.com/zed/" target="_blank" rel="noopener noreferrer">zed系列相机</a></li><li><a href="https://blog.csdn.net/weixin_43452554/article/details/108048794" target="_blank" rel="noopener noreferrer">一起搭建双目视觉系统</a></li><li><a href="https://blog.csdn.net/bestrivern/article/details/88397555" target="_blank" rel="noopener noreferrer">双目立体标定</a></li><li><a href="https://www.cnblogs.com/zyly/p/9373991.html" target="_blank" rel="noopener noreferrer">双目视觉之空间坐标计算</a></li><li><a href="https://zhuanlan.zhihu.com/p/94244568" target="_blank" rel="noopener noreferrer">相机标定之张正友标定法数学原理详解</a></li><li><a href="https://www.dazhuanlan.com/2019/12/05/5de81fc7aa72d/" target="_blank" rel="noopener noreferrer">Projection Matrices</a></li></ul>`,74)]))}const r=i(l,[["render",t],["__file","2021-02-16-_OpenCV实战_50 用OpenCV制作低成本立体相机.html.vue"]]),d=JSON.parse('{"path":"/blog/opencv/opencv%E5%AE%9E%E6%88%98/2021-02-16-_OpenCV%E5%AE%9E%E6%88%98_50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA.html","title":"[OpenCV实战]50 用OpenCV制作低成本立体相机","lang":"zh-CN","frontmatter":{"category":["OpenCV"],"date":"2021-02-16T17:22:46.000Z","tag":["OpenCV实战","OpenCV","图像处理"],"description":"[OpenCV实战]50 用OpenCV制作低成本立体相机 本文主要讲述利用OpenCV制作低成本立体相机以及如何使用OpenCV创建3D视频，准确来说是模仿双目立体相机，我们通常说立体相机一般是指双目立体相机，就是带两个摄像头的那种（目就是指眼睛，双目就是两只眼睛），这种双目摄像机模仿人的视觉，所以应用很广泛（主要是工业机器人视觉）。双目摄像机也广泛...","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/opencv/opencv%E5%AE%9E%E6%88%98/2021-02-16-_OpenCV%E5%AE%9E%E6%88%98_50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[OpenCV实战]50 用OpenCV制作低成本立体相机"}],["meta",{"property":"og:description","content":"[OpenCV实战]50 用OpenCV制作低成本立体相机 本文主要讲述利用OpenCV制作低成本立体相机以及如何使用OpenCV创建3D视频，准确来说是模仿双目立体相机，我们通常说立体相机一般是指双目立体相机，就是带两个摄像头的那种（目就是指眼睛，双目就是两只眼睛），这种双目摄像机模仿人的视觉，所以应用很广泛（主要是工业机器人视觉）。双目摄像机也广泛..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/1.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"OpenCV实战"}],["meta",{"property":"article:tag","content":"OpenCV"}],["meta",{"property":"article:tag","content":"图像处理"}],["meta",{"property":"article:published_time","content":"2021-02-16T17:22:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[OpenCV实战]50 用OpenCV制作低成本立体相机\\",\\"image\\":[\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/1.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/2.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/3.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/4.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/5.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/6.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/7.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/8.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/9.png\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/blog/%5BOpenCV%E5%AE%9E%E6%88%98%5D50%20%E7%94%A8OpenCV%E5%88%B6%E4%BD%9C%E4%BD%8E%E6%88%90%E6%9C%AC%E7%AB%8B%E4%BD%93%E7%9B%B8%E6%9C%BA/image/10.jpg\\"],\\"datePublished\\":\\"2021-02-16T17:22:46.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"1 相关介绍","slug":"_1-相关介绍","link":"#_1-相关介绍","children":[{"level":3,"title":"1.1 背景","slug":"_1-1-背景","link":"#_1-1-背景","children":[]},{"level":3,"title":"1.2 创建双目立体相机","slug":"_1-2-创建双目立体相机","link":"#_1-2-创建双目立体相机","children":[]}]},{"level":2,"title":"2 相机立体标定与校正","slug":"_2-相机立体标定与校正","link":"#_2-相机立体标定与校正","children":[{"level":3,"title":"2.1 立体标定重要性","slug":"_2-1-立体标定重要性","link":"#_2-1-立体标定重要性","children":[]},{"level":3,"title":"2.2 相机立体标定和校正的步骤","slug":"_2-2-相机立体标定和校正的步骤","link":"#_2-2-相机立体标定和校正的步骤","children":[]}]},{"level":2,"title":"3 自定义3D视频","slug":"_3-自定义3d视频","link":"#_3-自定义3d视频","children":[{"level":3,"title":"3.1 3D眼镜如何工作？","slug":"_3-1-3d眼镜如何工作","link":"#_3-1-3d眼镜如何工作","children":[]},{"level":3,"title":"3.2 创建自定义3D视频","slug":"_3-2-创建自定义3d视频","link":"#_3-2-创建自定义3d视频","children":[]}]},{"level":2,"title":"4 参考","slug":"_4-参考","link":"#_4-参考","children":[]}],"git":{},"readingTime":{"minutes":18.55,"words":5565},"filePathRelative":"blog/opencv/opencv实战/2021-02-16-[OpenCV实战]50 用OpenCV制作低成本立体相机.md","localizedDate":"2021年2月17日","excerpt":"\\n<p>本文主要讲述利用OpenCV制作低成本立体相机以及如何使用OpenCV创建3D视频，准确来说是模仿双目立体相机，我们通常说立体相机一般是指双目立体相机，就是带两个摄像头的那种（目就是指眼睛，双目就是两只眼睛），这种双目摄像机模仿人的视觉，所以应用很广泛（主要是工业机器人视觉）。双目摄像机也广泛应用于无人驾驶，比如特斯拉、图森未来，小鹏汽车在自家的无人驾驶汽车上都安载了立体相机，双目和多目的都有。另外双目视觉加上深度学习还蛮好水论文的。本文主要说的是低成本，实际上没人这样干，有专门的双目立体相机，已经非常成熟了，但是原理大差不差。专门的工业级双目立体相机价格大概5000多左右，家用的或者用来玩的最低1000能买到，有些双目立体摄像机还自带深度学习算法，所以本文看看就好。</p>","autoDesc":true}');export{r as comp,d as data};
