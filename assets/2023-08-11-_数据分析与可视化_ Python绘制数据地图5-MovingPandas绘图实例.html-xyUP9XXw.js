import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-MsA2k2kn.js";const l={},u=n("h1",{id:"数据分析与可视化-python绘制数据地图5-movingpandas绘图实例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据分析与可视化-python绘制数据地图5-movingpandas绘图实例","aria-hidden":"true"},"#"),s(" [数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例")],-1),d={href:"https://www.cnblogs.com/luohenyueji/p/17602916.html",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/movingpandas/movingpandas",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/movingpandas/movingpandas-examples",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/movingpandas/movingpandas-examples/tree/main/data",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/luohenyueji/Python-Study-Notes/tree/master/Plot%20Items/Mapping/Python%E7%BB%98%E5%88%B6%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE5-MovingPandas%E7%BB%98%E5%9B%BE%E5%AE%9E%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"},g=p(`<p>MovingPandas作者推荐在Python 3.8及以上环境下安装MovingPandas，并建议使用conda进行安装。可以使用以下命令来安装MovingPandas：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>conda install <span class="token operator">-</span>c conda<span class="token operator">-</span>forge movingpandas
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于MovingPandas的依赖环境较为复杂，所以不推荐使用pip进行安装。如果坚持使用pip进行安装，可以按照以下命令来安装MovingPandas：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install movingpandas
<span class="token comment">## 本文必安装第三方库</span>
pip install contextily
pip install seaborn
<span class="token comment">## 以下第三方库可选</span>
pip install hvplot
pip install cartopy
pip install geoviews
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码展示了MovingPandas的版本信息，本文所用Python版本为Python3.10。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## jupyter notebook环境去除warning</span>
<span class="token keyword">import</span> warnings
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">&quot;ignore&quot;</span><span class="token punctuation">)</span>

<span class="token comment">## 查看movingpandas版本及依赖库版本信息</span>
<span class="token keyword">import</span> movingpandas <span class="token keyword">as</span> mpd
mpd<span class="token punctuation">.</span>show_versions<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>MovingPandas 0.16.1

SYSTEM INFO
-----------
python     : 3.10.10 (main, Mar 21 2023, 18:45:11) [GCC 11.2.0]
executable : /opt/conda/envs/python35-paddle120-env/bin/python
machine    : Linux-5.4.0-109-generic-x86_64-with-glibc2.31

GEOS, GDAL, PROJ INFO
---------------------
GEOS       : None
GEOS lib   : None
GDAL       : 3.6.4
GDAL data dir: /opt/conda/envs/python35-paddle120-env/lib/python3.10/site-packages/fiona/gdal_data
PROJ       : 9.2.1
PROJ data dir: /opt/conda/envs/python35-paddle120-env/lib/python3.10/site-packages/pyproj/proj_dir/share/proj

PYTHON DEPENDENCIES
-------------------
geopandas  : 0.13.2
pandas     : 2.0.2
fiona      : 1.9.4.post1
numpy      : 1.24.3
shapely    : 2.0.1
rtree      : 1.0.1
pyproj     : 3.6.0
matplotlib : 3.7.1
mapclassify: None
geopy      : 2.3.0
holoviews  : None
hvplot     : None
geoviews   : None
stonesoup  : None
</code></pre><p>以下代码用于加载绘图所需第三方库。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> geopandas <span class="token keyword">as</span> gpd
<span class="token keyword">import</span> movingpandas <span class="token keyword">as</span> mpd
<span class="token keyword">import</span> shapely <span class="token keyword">as</span> shp
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

<span class="token keyword">from</span> geopandas <span class="token keyword">import</span> GeoDataFrame<span class="token punctuation">,</span> read_file
<span class="token keyword">from</span> shapely<span class="token punctuation">.</span>geometry <span class="token keyword">import</span> Point<span class="token punctuation">,</span> LineString<span class="token punctuation">,</span> Polygon
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta
<span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> exists
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlretrieve
<span class="token keyword">import</span> contextily <span class="token keyword">as</span> cx
<span class="token keyword">import</span> warnings
<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns
warnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">&#39;ignore&#39;</span><span class="token punctuation">)</span>

plot_defaults <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;linewidth&#39;</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;capstyle&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;round&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;figsize&#39;</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;legend&#39;</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[toc]</p><h2 id="_1-船舶数据分析示例" tabindex="-1"><a class="header-anchor" href="#_1-船舶数据分析示例" aria-hidden="true">#</a> 1 船舶数据分析示例</h2><p>船舶自动识别系统（Automatic Identification System，简称AIS）是一种用于船舶间的自动通信系统。它通过无线电信号在船舶之间传输信息，让附近的其他船舶和岸上监控站能够获得船舶的信息，如船名、船籍国、船舶类型、船舶位置、航向、航速等。本教程使用丹麦海事局发布的AIS数据，所提取的AIS记录样本涵盖了2017年7月5日哥德堡附近的船舶交通数据。本章通过对AIS数据进行轨迹数据分析，能够获得有关船舶交通有价值的见解。</p><p><strong>step1 加载数据</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 加载数据</span>
df <span class="token operator">=</span> read_file<span class="token punctuation">(</span><span class="token string">&#39;data/ais.gpkg&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## 查看数据</span>
<span class="token comment">## Timestamp: 时间戳，指示AIS数据记录的时间。它表示了记录被创建或接收的日期和时间。</span>
<span class="token comment">## MMSI: 船舶识别码（Maritime Mobile Service Identity），是一个唯一的数字标识符。</span>
<span class="token comment">## NavStatus: 导航状态，指示船舶当前的导航状态或活动状态。</span>
<span class="token comment">## SOG: 对地航速（Speed Over Ground），指船舶相对于地面的速度。</span>
<span class="token comment">## COG: 对地航向（Course Over Ground），表示船舶相对于地面的航向。</span>
<span class="token comment">## Name: 船名，是船舶的名称或标识符。</span>
<span class="token comment">## ShipType: 船舶类型，表示船舶的类别或类型。</span>
<span class="token comment">## geometry: 几何信息，表示船舶的空间位置。</span>
df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>Timestamp</th><th>MMSI</th><th>NavStatus</th><th>SOG</th><th>COG</th><th>Name</th><th>ShipType</th><th>geometry</th></tr></thead><tbody><tr><th>0</th><td>05/07/2017 00:00:03</td><td>219632000</td><td>Under way using engine</td><td>0.0</td><td>270.4</td><td>NaN</td><td>Undefined</td><td>POINT (11.85958 57.68817)</td></tr><tr><th>1</th><td>05/07/2017 00:00:05</td><td>265650970</td><td>Under way using engine</td><td>0.0</td><td>0.5</td><td>NaN</td><td>Undefined</td><td>POINT (11.84175 57.66150)</td></tr><tr><th>2</th><td>05/07/2017 00:00:06</td><td>265503900</td><td>Under way using engine</td><td>0.0</td><td>0.0</td><td>NaN</td><td>Undefined</td><td>POINT (11.90650 57.69077)</td></tr><tr><th>3</th><td>05/07/2017 00:00:14</td><td>219632000</td><td>Under way using engine</td><td>0.0</td><td>188.4</td><td>NaN</td><td>Undefined</td><td>POINT (11.85958 57.68817)</td></tr><tr><th>4</th><td>05/07/2017 00:00:19</td><td>265519650</td><td>Under way using engine</td><td>0.0</td><td>357.2</td><td>NaN</td><td>Undefined</td><td>POINT (11.87192 57.68233)</td></tr></tbody></table></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 查看数据的坐标系</span>
df_crs <span class="token operator">=</span> df<span class="token punctuation">.</span>crs
df_crs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Geographic 2D CRS: EPSG:4326&gt;
Name: WGS 84
Axis Info [ellipsoidal]:
- Lat[north]: Geodetic latitude (degree)
- Lon[east]: Geodetic longitude (degree)
Area of Use:
- name: World.
- bounds: (-180.0, -90.0, 180.0, 90.0)
Datum: World Geodetic System 1984 ensemble
- Ellipsoid: WGS 84
- Prime Meridian: Greenwich
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 可视化数据点</span>
df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_9_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 查看各船舶的对地航速</span>
df<span class="token punctuation">[</span><span class="token string">&#39;SOG&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hist<span class="token punctuation">(</span>bins<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_10_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>对于数据分析，首先删除那些对地航速为0的样本：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 打印数据维度</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原始数据样本数：{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
df <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>SOG<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;删除对地航速为0后数据样本数：{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>原始数据样本数：84702
删除对地航速为0后数据样本数：33593
</code></pre><p>查看船只有哪些类型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">[</span><span class="token string">&#39;ShipType&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>&lt;Axes: xlabel=&#39;ShipType&#39;&gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_14_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">[</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;Timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;%d/%m/%Y %H:%M:%S&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## 创建轨迹，轨迹数据点数最少为100</span>
traj_collection <span class="token operator">=</span> mpd<span class="token punctuation">.</span>TrajectoryCollection<span class="token punctuation">(</span>df<span class="token punctuation">,</span> <span class="token string">&#39;MMSI&#39;</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token comment">## 压缩轨迹</span>
traj_collection <span class="token operator">=</span> mpd<span class="token punctuation">.</span>MinTimeDeltaGeneralizer<span class="token punctuation">(</span>traj_collection<span class="token punctuation">)</span><span class="token punctuation">.</span>generalize<span class="token punctuation">(</span>tolerance<span class="token operator">=</span>timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
traj_collection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>TrajectoryCollection with 77 trajectories
</code></pre><p><strong>step2 数据可视化</strong></p>`,33),h={href:"https://www.cnblogs.com/luohenyueji/p/17485432.html#5-%E8%83%8C%E6%99%AF%E5%9C%B0%E5%9B%BE%E5%8F%A0%E5%8A%A0",target:"_blank",rel:"noopener noreferrer"},b=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>shiptype_to_color <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Passenger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;HSC&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tanker&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cargo&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">}</span>
ax <span class="token operator">=</span> traj_collection<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">&#39;ShipType&#39;</span><span class="token punctuation">,</span> column_to_color<span class="token operator">=</span>shiptype_to_color<span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> capstyle<span class="token operator">=</span><span class="token string">&#39;round&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## 添加背景地图,zoom越大越精细，这里使用自适应zoom。</span>
cx<span class="token punctuation">.</span>add_basemap<span class="token punctuation">(</span>ax <span class="token operator">=</span> ax <span class="token punctuation">,</span> source<span class="token operator">=</span>cx<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>Stamen<span class="token punctuation">.</span>TonerLite<span class="token punctuation">,</span>crs<span class="token operator">=</span>traj_collection<span class="token punctuation">.</span>trajectories<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>crs<span class="token punctuation">,</span> zoom<span class="token operator">=</span><span class="token string">&#39;auto&#39;</span><span class="token punctuation">,</span>attribution<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_18_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 单独展示某种类型船只的航线轨迹</span>
passenger <span class="token operator">=</span> traj_collection<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token string">&#39;ShipType&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Passenger&#39;</span><span class="token punctuation">)</span>
passenger<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_19_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>也可以单独展示某条轨迹。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_traj <span class="token operator">=</span> traj_collection<span class="token punctuation">.</span>trajectories<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
my_traj<span class="token punctuation">.</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>Timestamp</th><th>MMSI</th><th>NavStatus</th><th>SOG</th><th>COG</th><th>Name</th><th>ShipType</th><th>geometry</th></tr><tr><th>t</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>2017-07-05 17:32:18</th><td>05/07/2017 17:32:18</td><td>210035000</td><td>Under way using engine</td><td>9.8</td><td>52.8</td><td>NORDIC HAMBURG</td><td>Cargo</td><td>POINT (11.80462 57.67612)</td></tr><tr><th>2017-07-05 17:33:18</th><td>05/07/2017 17:33:18</td><td>210035000</td><td>Under way using engine</td><td>9.5</td><td>58.9</td><td>NORDIC HAMBURG</td><td>Cargo</td><td>POINT (11.80875 57.67773)</td></tr><tr><th>2017-07-05 17:34:18</th><td>05/07/2017 17:34:18</td><td>210035000</td><td>Under way using engine</td><td>9.3</td><td>70.5</td><td>NORDIC HAMBURG</td><td>Cargo</td><td>POINT (11.81311 57.67879)</td></tr><tr><th>2017-07-05 17:35:28</th><td>05/07/2017 17:35:28</td><td>210035000</td><td>Under way using engine</td><td>9.5</td><td>71.1</td><td>NORDIC HAMBURG</td><td>Cargo</td><td>POINT (11.81855 57.67968)</td></tr><tr><th>2017-07-05 17:36:28</th><td>05/07/2017 17:36:28</td><td>210035000</td><td>Under way using engine</td><td>9.4</td><td>71.3</td><td>NORDIC HAMBURG</td><td>Cargo</td><td>POINT (11.82334 57.68044)</td></tr></tbody></table></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 绘制该轨迹</span>
ax <span class="token operator">=</span> my_traj<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span> 
ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">&#39;Trajectory {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>my_traj<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>Text(0.5, 1.0, &#39;Trajectory 210035000&#39;)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_22_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>我们也可以查看感兴趣区域的轨迹。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>area_of_interest <span class="token operator">=</span> Polygon<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">11.89935</span><span class="token punctuation">,</span> <span class="token number">57.69270</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11.90161</span><span class="token punctuation">,</span> <span class="token number">57.68902</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11.90334</span><span class="token punctuation">,</span> <span class="token number">57.68967</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11.90104</span><span class="token punctuation">,</span> <span class="token number">57.69354</span><span class="token punctuation">)</span>
<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11.89935</span><span class="token punctuation">,</span> <span class="token number">57.69270</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## 返回与感兴趣区域相交的轨迹</span>
intersecting <span class="token operator">=</span> traj_collection<span class="token punctuation">.</span>get_intersecting<span class="token punctuation">(</span>area_of_interest<span class="token punctuation">)</span>
intersecting
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>TrajectoryCollection with 20 trajectories
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>trips <span class="token operator">=</span> mpd<span class="token punctuation">.</span>ObservationGapSplitter<span class="token punctuation">(</span>passenger<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span>gap<span class="token operator">=</span>timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
trips<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_25_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p><strong>step3 感兴趣区域分析</strong></p><p>我们可以确定一个感兴趣区域，如海事局。然后分析离开或达到该区域的船只时间和类型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 对于单个轨迹，如果其两个连续观测超过间隔gap，如5分钟，则认为该轨迹需要拆分为</span>
trips <span class="token operator">=</span> mpd<span class="token punctuation">.</span>ObservationGapSplitter<span class="token punctuation">(</span>traj_collection<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span>gap<span class="token operator">=</span>timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## 设置感兴趣区域，如海事局的坐标</span>
area_of_interest <span class="token operator">=</span> Polygon<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">11.86815</span><span class="token punctuation">,</span> <span class="token number">57.68273</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11.86992</span><span class="token punctuation">,</span> <span class="token number">57.68047</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11.87419</span><span class="token punctuation">,</span> <span class="token number">57.68140</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11.87288</span><span class="token punctuation">,</span> <span class="token number">57.68348</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11.86815</span><span class="token punctuation">,</span> <span class="token number">57.68273</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## 获得轨迹起点在感兴趣区域的轨迹</span>
departures <span class="token operator">=</span> <span class="token punctuation">[</span>traj <span class="token keyword">for</span> traj <span class="token keyword">in</span> trips <span class="token keyword">if</span> traj<span class="token punctuation">.</span>get_start_location<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intersects<span class="token punctuation">(</span>area_of_interest<span class="token punctuation">)</span> <span class="token keyword">and</span> traj<span class="token punctuation">.</span>get_length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">]</span>       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 合并轨迹</span>
tc <span class="token operator">=</span> mpd<span class="token punctuation">.</span>TrajectoryCollection<span class="token punctuation">(</span>departures<span class="token punctuation">)</span>
ax <span class="token operator">=</span> tc<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span>
gpd<span class="token punctuation">.</span>GeoSeries<span class="token punctuation">(</span>area_of_interest<span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ax<span class="token operator">=</span>ax<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_29_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>这样我们可以看到各艘船只从该区域出发的时间。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> traj <span class="token keyword">in</span> departures<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>traj<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">&#39;ShipType&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> vessel &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>traj<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&#39; departed at </span><span class="token interpolation"><span class="token punctuation">{</span>traj<span class="token punctuation">.</span>get_start_time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>Law enforcement vessel &#39;KBV 010&#39; departed at 2017-07-05 10:36:03
Law enforcement vessel &#39;KBV 010&#39; departed at 2017-07-05 14:33:02
Law enforcement vessel &#39;KBV 048&#39; departed at 2017-07-05 10:20:44
Pilot vessel &#39;PILOT 794 SE&#39; departed at 2017-07-05 01:21:07
Pilot vessel &#39;PILOT 794 SE&#39; departed at 2017-07-05 04:15:04
Pilot vessel &#39;PILOT 794 SE&#39; departed at 2017-07-05 06:58:56
Pilot vessel &#39;PILOT 794 SE&#39; departed at 2017-07-05 08:45:08
Pilot vessel &#39;PILOT 794 SE&#39; departed at 2017-07-05 12:02:18
Pilot vessel &#39;PILOT 794 SE&#39; departed at 2017-07-05 13:34:42
Pilot vessel &#39;PILOT 794 SE&#39; departed at 2017-07-05 22:32:47
Pilot vessel &#39;PILOT 218 SE&#39; departed at 2017-07-05 09:27:24
Pilot vessel &#39;PILOT 218 SE&#39; departed at 2017-07-05 16:10:29
</code></pre><p>此外，我们也可以获得到达该区域各船只的时间。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>arrivals <span class="token operator">=</span> <span class="token punctuation">[</span>traj <span class="token keyword">for</span> traj <span class="token keyword">in</span> trips <span class="token keyword">if</span> traj<span class="token punctuation">.</span>get_end_location<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>intersects<span class="token punctuation">(</span>area_of_interest<span class="token punctuation">)</span> <span class="token keyword">and</span> traj<span class="token punctuation">.</span>get_length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Found </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>arrivals<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string"> arrivals&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">for</span> traj <span class="token keyword">in</span> arrivals<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>traj<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">&#39;ShipType&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> vessel &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>traj<span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&#39; arrived at </span><span class="token interpolation"><span class="token punctuation">{</span>traj<span class="token punctuation">.</span>get_end_time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>Found 12 arrivals
Law enforcement vessel &#39;KBV 010&#39; arrived at 2017-07-05 10:51:03
Law enforcement vessel &#39;KBV 048&#39; arrived at 2017-07-05 10:26:44
Pilot vessel &#39;PILOT 794 SE&#39; arrived at 2017-07-05 01:36:56
Pilot vessel &#39;PILOT 794 SE&#39; arrived at 2017-07-05 04:45:36
Pilot vessel &#39;PILOT 794 SE&#39; arrived at 2017-07-05 08:16:46
Pilot vessel &#39;PILOT 794 SE&#39; arrived at 2017-07-05 08:54:34
Pilot vessel &#39;PILOT 794 SE&#39; arrived at 2017-07-05 13:06:37
Pilot vessel &#39;PILOT 794 SE&#39; arrived at 2017-07-05 16:44:06
Pilot vessel &#39;PILOT 794 SE&#39; arrived at 2017-07-05 23:58:49
Pilot vessel &#39;PILOT 218 SE&#39; arrived at 2017-07-05 10:07:23
Pilot vessel &#39;PILOT 218 SE&#39; arrived at 2017-07-05 17:46:12
Tanker vessel &#39;DANA&#39; arrived at 2017-07-05 08:35:42
</code></pre><p><strong>step4 轨迹起始点聚类分析</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 加载sklearn</span>
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> DBSCAN
<span class="token keyword">from</span> geopy<span class="token punctuation">.</span>distance <span class="token keyword">import</span> great_circle
<span class="token keyword">from</span> shapely<span class="token punctuation">.</span>geometry <span class="token keyword">import</span> MultiPoint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先提取各条轨迹的起始点xy坐标。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>origins <span class="token operator">=</span> trips<span class="token punctuation">.</span>get_start_locations<span class="token punctuation">(</span><span class="token punctuation">)</span>
origins<span class="token punctuation">[</span><span class="token string">&#39;lat&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> origins<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span>y
origins<span class="token punctuation">[</span><span class="token string">&#39;lon&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> origins<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span>x
matrix <span class="token operator">=</span> origins<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;lat&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;lon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
matrix<span class="token punctuation">.</span>shape
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>(302, 2)
</code></pre><p>然后聚类各个起始点。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 经纬度距离换算：每弧度距离约为6371.0088公里</span>
kms_per_radian <span class="token operator">=</span> <span class="token number">6371.0088</span>

<span class="token comment">## DBSCAN的邻域半径设置：根据实际情况，将0.1公里转换为对应的弧度值</span>
epsilon <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">/</span> kms_per_radian

<span class="token comment">## 使用Ball Tree算法和haversine（球面距离）作为度量方式，对经纬度数据进行DBSCAN聚类</span>
db <span class="token operator">=</span> DBSCAN<span class="token punctuation">(</span>eps<span class="token operator">=</span>epsilon<span class="token punctuation">,</span> min_samples<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">&#39;ball_tree&#39;</span><span class="token punctuation">,</span> metric<span class="token operator">=</span><span class="token string">&#39;haversine&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>np<span class="token punctuation">.</span>radians<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">## 获取DBSCAN聚类结果的标签</span>
cluster_labels <span class="token operator">=</span> db<span class="token punctuation">.</span>labels_

<span class="token comment">## 计算聚类的数量</span>
num_clusters <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>cluster_labels<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">## 将聚类的数据划分到不同的簇中，保存为pandas的Series数据结构</span>
clusters <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span>cluster_labels <span class="token operator">==</span> n<span class="token punctuation">]</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_clusters<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">## 输出聚类的数量</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;聚类的数量：</span><span class="token interpolation"><span class="token punctuation">{</span>num_clusters<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>聚类的数量：69
</code></pre><p>提取起始点聚类结果的中心。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 将聚类标签添加到origins数据中</span>
origins<span class="token punctuation">[</span><span class="token string">&#39;cluster&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> cluster_labels

<span class="token comment">## 定义一个函数，用于获取簇中心点</span>
<span class="token keyword">def</span> <span class="token function">get_centermost_point</span><span class="token punctuation">(</span>cluster<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">## 计算簇的质心</span>
    centroid <span class="token operator">=</span> <span class="token punctuation">(</span>MultiPoint<span class="token punctuation">(</span>cluster<span class="token punctuation">)</span><span class="token punctuation">.</span>centroid<span class="token punctuation">.</span>x<span class="token punctuation">,</span> MultiPoint<span class="token punctuation">(</span>cluster<span class="token punctuation">)</span><span class="token punctuation">.</span>centroid<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    <span class="token comment">## 找到距离质心最近的点作为簇的中心点</span>
    centermost_point <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>cluster<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> point<span class="token punctuation">:</span> great_circle<span class="token punctuation">(</span>point<span class="token punctuation">,</span> centroid<span class="token punctuation">)</span><span class="token punctuation">.</span>m<span class="token punctuation">)</span>
    <span class="token comment">## 返回中心点的坐标（经度，纬度）构成的Point对象</span>
    <span class="token keyword">return</span> Point<span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>centermost_point<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>centermost_point<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">## 对每个簇应用get_centermost_point函数，得到各个簇的中心点集合</span>
centermost_points <span class="token operator">=</span> clusters<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>get_centermost_point<span class="token punctuation">)</span>
centermost_points<span class="token punctuation">.</span>shape
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>(69,)
</code></pre><p>汇总聚类结果中心的信息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 通过cluster列对origins数据框进行分组，得到一个按照簇(cluster)标签进行分组的DataFrame</span>
origins_by_cluster <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>origins<span class="token punctuation">)</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;cluster&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">## 创建一个新的DataFrame，用于存储每个簇的汇总信息</span>
summary <span class="token operator">=</span> origins_by_cluster<span class="token punctuation">[</span><span class="token string">&#39;ShipType&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_frame<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;types&#39;</span><span class="token punctuation">)</span>

<span class="token comment">## 在汇总DataFrame中添加n列，表示每个簇中数据点的数量</span>
summary<span class="token punctuation">[</span><span class="token string">&#39;n&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> origins_by_cluster<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## 在汇总DataFrame中添加sog列，表示每个簇中数据点的SOG（Speed Over Ground）平均值</span>
summary<span class="token punctuation">[</span><span class="token string">&#39;sog&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> origins_by_cluster<span class="token punctuation">[</span><span class="token string">&#39;SOG&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## 在汇总DataFrame中添加geometry列，表示每个簇的中心点坐标</span>
summary<span class="token punctuation">[</span><span class="token string">&#39;geometry&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> centermost_points

<span class="token comment">## 从汇总DataFrame中移除数据点数量小于1的簇，并按照n列进行降序排序</span>
summary <span class="token operator">=</span> summary<span class="token punctuation">[</span>summary<span class="token punctuation">[</span><span class="token string">&#39;n&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">&#39;n&#39;</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment">## 显示汇总DataFrame中前几行的数据</span>
summary<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>types</th><th>n</th><th>sog</th><th>geometry</th></tr><tr><th>cluster</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>5</th><td>[Tanker, Passenger, Undefined, Fishing, Cargo]</td><td>52</td><td>9.217308</td><td>POINT (11.911787 57.69663)</td></tr><tr><th>28</th><td>[Passenger, Undefined, HSC]</td><td>47</td><td>0.804255</td><td>POINT (11.84232 57.661593)</td></tr><tr><th>0</th><td>[Cargo, Tanker, Tug, Passenger]</td><td>28</td><td>11.946429</td><td>POINT (11.80495 57.676108)</td></tr><tr><th>27</th><td>[Passenger, Undefined, HSC]</td><td>24</td><td>15.9875</td><td>POINT (11.819332 57.648027)</td></tr><tr><th>11</th><td>[SAR, Passenger]</td><td>19</td><td>10.736842</td><td>POINT (11.804653 57.654408)</td></tr></tbody></table></div><p>我们可以查看某一个聚类簇各个船只的信息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>cluster_of_interest_id <span class="token operator">=</span> <span class="token number">28</span>
ax <span class="token operator">=</span> origins<span class="token punctuation">[</span>origins<span class="token punctuation">[</span><span class="token string">&#39;cluster&#39;</span><span class="token punctuation">]</span><span class="token operator">==</span>cluster_of_interest_id<span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span> column<span class="token operator">=</span><span class="token string">&#39;ShipType&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_45_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>最后我们可以绘制轨迹信息和图中各个轨迹起点聚类的中心。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ax <span class="token operator">=</span> trips<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;gray&#39;</span><span class="token punctuation">,</span> line_width<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> 
<span class="token comment">## 添加簇中心</span>
ax <span class="token operator">=</span> GeoDataFrame<span class="token punctuation">(</span>summary<span class="token punctuation">,</span>crs<span class="token operator">=</span>df_crs<span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token string">&#39;sog&#39;</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;RdYlGn&#39;</span><span class="token punctuation">,</span> markersize<span class="token operator">=</span>summary<span class="token punctuation">[</span><span class="token string">&#39;n&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span>zorder<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">## 添加背景地图,zoom越大越精细，这里使用自适应zoom。</span>
cx<span class="token punctuation">.</span>add_basemap<span class="token punctuation">(</span>ax <span class="token operator">=</span> ax <span class="token punctuation">,</span> source<span class="token operator">=</span>cx<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>Stamen<span class="token punctuation">.</span>TonerLite<span class="token punctuation">,</span>crs<span class="token operator">=</span>my_traj<span class="token punctuation">.</span>df<span class="token punctuation">.</span>crs<span class="token punctuation">,</span> zoom<span class="token operator">=</span><span class="token string">&#39;auto&#39;</span><span class="token punctuation">,</span>attribution<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
cx<span class="token punctuation">.</span>add_basemap<span class="token punctuation">(</span>ax <span class="token operator">=</span> ax <span class="token punctuation">,</span> source<span class="token operator">=</span>cx<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>Stamen<span class="token punctuation">.</span>TonerLabels<span class="token punctuation">,</span>crs<span class="token operator">=</span>my_traj<span class="token punctuation">.</span>df<span class="token punctuation">.</span>crs<span class="token punctuation">,</span> zoom<span class="token operator">=</span><span class="token string">&#39;auto&#39;</span><span class="token punctuation">,</span>attribution<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token comment">## 保存图片</span>
fig<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">&quot;res.jpg&quot;</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_47_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_2-马颈圈数据分析示例" tabindex="-1"><a class="header-anchor" href="#_2-马颈圈数据分析示例" aria-hidden="true">#</a> 2 马颈圈数据分析示例</h2><p>马颈圈Horse collar是一种用于驯服和控制马匹的装置。它通常是由皮革、尼龙或其他坚固材料制成的环状物，以围绕马的颈部。马颈圈的设计目的是使马匹更容易受到驾驭者的控制并按照驾驭者的指示移动。本章基于哥本哈根大学和丹麦某市政技术与环境中心提供的马颈圈跟踪数据进行马匹行为分析，其分析方法可用于其他类似数据集。</p><p><strong>step1数据导入</strong></p><p>加载数据，并删除不需要的列。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> read_file<span class="token punctuation">(</span><span class="token string">&#39;data/horse_collar.gpkg&#39;</span><span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;timestamp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
df <span class="token operator">=</span> df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tz_localize<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token comment">## 去除不使用的列</span>
df <span class="token operator">=</span> df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;LMT_Date&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;LMT_Time&#39;</span><span class="token punctuation">,</span>
       <span class="token string">&#39;Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SCTS_Date&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SCTS_Time&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Latitude [?]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Longitude [?]&#39;</span><span class="token punctuation">,</span>
       <span class="token string">&#39;FixType&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Main [V]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Beacon [V]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sats&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat&#39;</span><span class="token punctuation">,</span>
       <span class="token string">&#39;C/N&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C/N_1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C/N_2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C/N_3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_4&#39;</span><span class="token punctuation">,</span>
       <span class="token string">&#39;C/N_4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C/N_5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C/N_6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_7&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C/N_7&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_8&#39;</span><span class="token punctuation">,</span>
       <span class="token string">&#39;C/N_8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_9&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C/N_9&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C/N_10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sat_11&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C/N_11&#39;</span><span class="token punctuation">,</span>
       <span class="token string">&#39;Easting&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Northing&#39;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">## 查看数据</span>
<span class="token comment">## No: 每条记录的序号。</span>
<span class="token comment">## CollarID: 马颈圈的唯一标识符，每一个马颈圈代表一匹马</span>
<span class="token comment">## UTC_Date: 记录数据的日期，使用世界协调时间（UTC）标准表示。</span>
<span class="token comment">## UTC_Time: 记录数据的时间，使用世界协调时间（UTC）标准表示。</span>
<span class="token comment">## lat: 数据点的纬度信息。</span>
<span class="token comment">## long: 数据点的经度信息。</span>
<span class="token comment">## Mort. Status: </span>
<span class="token comment">## Temp [?C]: 马颈圈数据点的温度。</span>
<span class="token comment">## Activity: 马颈圈数据点的活动级别。</span>
<span class="token comment">## timestamp: 记录数据的时间戳。</span>
<span class="token comment">## geometry: 马颈圈数据点的GeoPandas位置几何信息。</span>
df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>No</th><th>CollarID</th><th>UTC_Date</th><th>UTC_Time</th><th>lat</th><th>long</th><th>Mort. Status</th><th>Temp [?C]</th><th>Activity</th><th>timestamp</th><th>geometry</th></tr><tr><th>t</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>2018-11-14 12:01:08</th><td>299</td><td>30788</td><td>14-11-2018</td><td>12:01:08</td><td>54.743331</td><td>11.916987</td><td>NaN</td><td>22.0</td><td>NaN</td><td>2018-11-14 12:01:08</td><td>POINT (687757.574 6070134.334)</td></tr><tr><th>2018-11-14 12:15:09</th><td>300</td><td>30788</td><td>14-11-2018</td><td>12:15:09</td><td>54.676884</td><td>11.910876</td><td>NaN</td><td>22.0</td><td>NaN</td><td>2018-11-14 12:15:09</td><td>POINT (687671.088 6062727.428)</td></tr><tr><th>2018-11-14 12:30:08</th><td>301</td><td>30788</td><td>14-11-2018</td><td>12:30:08</td><td>54.627018</td><td>11.957852</td><td>NaN</td><td>21.0</td><td>NaN</td><td>2018-11-14 12:30:08</td><td>POINT (690932.614 6057307.716)</td></tr><tr><th>2018-11-14 13:00:33</th><td>302</td><td>30788</td><td>14-11-2018</td><td>13:00:33</td><td>54.625893</td><td>11.953686</td><td>NaN</td><td>17.0</td><td>NaN</td><td>2018-11-14 13:00:33</td><td>POINT (690669.038 6057171.248)</td></tr><tr><th>2018-11-14 13:30:09</th><td>303</td><td>30788</td><td>14-11-2018</td><td>13:30:09</td><td>54.626171</td><td>11.954280</td><td>NaN</td><td>17.0</td><td>NaN</td><td>2018-11-14 13:30:09</td><td>POINT (690706.056 6057203.814)</td></tr></tbody></table></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 查看数据维度</span>
df<span class="token punctuation">.</span>shape
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>(17517, 11)
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 查看数据的坐标系</span>
original_crs  <span class="token operator">=</span> df<span class="token punctuation">.</span>crs
original_crs 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Projected CRS: EPSG:25832&gt;
Name: ETRS89 / UTM zone 32N
Axis Info [cartesian]:
- E[east]: Easting (metre)
- N[north]: Northing (metre)
Area of Use:
- name: Europe between 6°E and 12°E: Austria; Belgium; Denmark - onshore and offshore; Germany - onshore and offshore; Norway including - onshore and offshore; Spain - offshore.
- bounds: (6.0, 38.76, 12.01, 84.33)
Coordinate Operation:
- name: UTM zone 32N
- method: Transverse Mercator
Datum: European Terrestrial Reference System 1989 ensemble
- Ellipsoid: GRS 1980
- Prime Meridian: Greenwich
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#　只有一个马颈圈标识符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;CollarID&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
collar_id <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;CollarID&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[30788]
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 只有一个马颈圈运行状态</span>
df<span class="token punctuation">[</span><span class="token string">&#39;Activity&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>array([nan])
</code></pre><p><strong>step2 数据概览</strong></p><p>该步主要检查数据是否符合逻辑。</p><p><strong>位置概览</strong></p><p>马颈圈数据集个数据点的坐标应该比较接近。按照这一规则，可以删除位置离群点。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## EPSG:4326是常用的经纬度坐标系WGS84</span>
df<span class="token punctuation">.</span>to_crs<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;init&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;EPSG:4326&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_58_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>我们可以看到有两个马颈圈的坐标和其他马颈圈的坐标相隔较远，需要删除这两项数据以删除离群数据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 将数据按照数据点经度从小到大排列</span>
<span class="token comment">## 经度最高的两个点即为离群点</span>
df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;lat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>No</th><th>CollarID</th><th>UTC_Date</th><th>UTC_Time</th><th>lat</th><th>long</th><th>Mort. Status</th><th>Temp [?C]</th><th>Activity</th><th>timestamp</th><th>geometry</th></tr><tr><th>t</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>2018-11-14 12:15:09</th><td>300</td><td>30788</td><td>14-11-2018</td><td>12:15:09</td><td>54.676884</td><td>11.910876</td><td>NaN</td><td>22.0</td><td>NaN</td><td>2018-11-14 12:15:09</td><td>POINT (687671.088 6062727.428)</td></tr><tr><th>2018-11-14 12:01:08</th><td>299</td><td>30788</td><td>14-11-2018</td><td>12:01:08</td><td>54.743331</td><td>11.916987</td><td>NaN</td><td>22.0</td><td>NaN</td><td>2018-11-14 12:01:08</td><td>POINT (687757.574 6070134.334)</td></tr></tbody></table></div><p>按照这种方式删除这两个离群点。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;lat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token comment">## 按照编号排序</span>
df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;No&#39;</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>No</th><th>CollarID</th><th>UTC_Date</th><th>UTC_Time</th><th>lat</th><th>long</th><th>Mort. Status</th><th>Temp [?C]</th><th>Activity</th><th>timestamp</th><th>geometry</th></tr><tr><th>t</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>2018-11-14 12:30:08</th><td>301</td><td>30788</td><td>14-11-2018</td><td>12:30:08</td><td>54.627018</td><td>11.957852</td><td>NaN</td><td>21.0</td><td>NaN</td><td>2018-11-14 12:30:08</td><td>POINT (690932.614 6057307.716)</td></tr><tr><th>2018-11-14 13:00:33</th><td>302</td><td>30788</td><td>14-11-2018</td><td>13:00:33</td><td>54.625893</td><td>11.953686</td><td>NaN</td><td>17.0</td><td>NaN</td><td>2018-11-14 13:00:33</td><td>POINT (690669.038 6057171.248)</td></tr><tr><th>2018-11-14 13:30:09</th><td>303</td><td>30788</td><td>14-11-2018</td><td>13:30:09</td><td>54.626171</td><td>11.954280</td><td>NaN</td><td>17.0</td><td>NaN</td><td>2018-11-14 13:30:09</td><td>POINT (690706.056 6057203.814)</td></tr><tr><th>2018-11-14 14:00:38</th><td>304</td><td>30788</td><td>14-11-2018</td><td>14:00:38</td><td>54.626167</td><td>11.954662</td><td>NaN</td><td>17.0</td><td>NaN</td><td>2018-11-14 14:00:38</td><td>POINT (690730.771 6057204.431)</td></tr><tr><th>2018-11-14 14:30:08</th><td>305</td><td>30788</td><td>14-11-2018</td><td>14:30:08</td><td>54.626427</td><td>11.955650</td><td>NaN</td><td>18.0</td><td>NaN</td><td>2018-11-14 14:30:08</td><td>POINT (690793.288 6057235.998)</td></tr></tbody></table></div><p>绘制删除离群点后的数据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">.</span>to_crs<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;init&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;EPSG:4326&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_64_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>最后我们可以大体计算马群活动面积。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>temp <span class="token operator">=</span> df<span class="token punctuation">.</span>to_crs<span class="token punctuation">(</span>original_crs<span class="token punctuation">)</span>
<span class="token comment">## 膨胀数据</span>
<span class="token comment">## 对temp DataFrame中的几何对象进行缓冲处理。</span>
<span class="token comment">## 对geometry列中的每个几何对象应用buffer(5)，即在每个几何对象周围创建一个半径为5的缓冲区。</span>
temp<span class="token punctuation">[</span><span class="token string">&#39;geometry&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token string">&#39;geometry&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment">## dissolve将所有项按照CollarID列的信息合并</span>
<span class="token comment">## area计算面积，original_crs使用的单位是米，那么这里面积的单位应该是平方米</span>
total_area <span class="token operator">=</span> temp<span class="token punctuation">.</span>dissolve<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">&#39;CollarID&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>area 
<span class="token comment">## 将平方米转换为平方公顷(平方百米)</span>
total_area <span class="token operator">=</span> total_area<span class="token punctuation">[</span>collar_id<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10000</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;数据覆盖的总面积为: {:,.2f} 公顷&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_area<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>数据覆盖的总面积为: 65.19 公顷
</code></pre><p><strong>时间概览</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 查看数据点的时间范围</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;数据点的时间范围为 {} 到 {}.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>index<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>数据点的时间范围为 2018-11-14 12:30:08 到 2019-11-07 05:30:10.
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 查看数据点的时间跨度</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;数据点的时间跨度为 {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> df<span class="token punctuation">.</span>index<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>数据点的时间跨度为 357 days 17:00:02
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 统计每一天的马颈圈数据</span>
df<span class="token punctuation">[</span><span class="token string">&#39;No&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">&#39;1d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>t
2018-11-14    23
2018-11-15    66
2018-11-16    58
2018-11-17    70
2018-11-18    79
              ..
2019-11-03    48
2019-11-04    48
2019-11-05    48
2019-11-06    48
2019-11-07    12
Freq: D, Name: No, Length: 359, dtype: int64
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 可视化数据量</span>
df<span class="token punctuation">[</span><span class="token string">&#39;No&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">&#39;1d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: xlabel=&#39;t&#39;&gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_71_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>此外，也可以进一步统计各个月份的样本数，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 添加年份-月份列</span>
df<span class="token punctuation">[</span><span class="token string">&#39;Y-M&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>index<span class="token punctuation">.</span>to_period<span class="token punctuation">(</span><span class="token string">&#39;M&#39;</span><span class="token punctuation">)</span>    
<span class="token keyword">for</span> i <span class="token keyword">in</span> df<span class="token punctuation">[</span><span class="token string">&#39;Y-M&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;时间{}，样本数{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">&#39;Y-M&#39;</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>时间2018-11，样本数938
时间2018-12，样本数1486
时间2019-01，样本数1489
时间2019-02，样本数1346
时间2019-03，样本数1488
时间2019-04，样本数1441
时间2019-05，样本数1650
时间2019-06，样本数1474
时间2019-07，样本数1556
时间2019-08，样本数1499
时间2019-09，样本数1439
时间2019-10，样本数1407
时间2019-11，样本数302
</code></pre><p><strong>step3 数据分析</strong></p><p><strong>采样间隔分析</strong></p><p>对于数据的采样，很重要的一点是确定数据是否为间隔采样。如果是间隔采样，那么采样间隔是多少？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 重置索引并提取&#39;t&#39;列</span>
t <span class="token operator">=</span> df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">]</span>
<span class="token comment">## 计算时间间隔，当每一项数据与前一项数据的时间差</span>
df<span class="token punctuation">[</span><span class="token string">&#39;delta_t&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>diff<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values
<span class="token comment">## 将时间间隔转换为分钟</span>
df<span class="token punctuation">[</span><span class="token string">&#39;delta_t&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;delta_t&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span>
df<span class="token punctuation">[</span><span class="token string">&#39;delta_t&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>t
2018-11-14 12:30:08          NaN
2018-11-14 13:00:33    30.416667
2018-11-14 13:30:09    29.600000
2018-11-14 14:00:38    30.483333
2018-11-14 14:30:08    29.500000
                         ...    
2019-11-07 03:30:38    30.466667
2019-11-07 04:00:09    29.516667
2019-11-07 04:30:08    29.983333
2019-11-07 05:00:10    30.033333
2019-11-07 05:30:10    30.000000
Name: delta_t, Length: 17515, dtype: float64
</code></pre><p>如下绘制时间间隔柱状图，查看时间间隔集中哪个值。结果是采样方式为均匀采样，采样间隔通常在30分钟左右。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 绘制时间间隔柱状图</span>
<span class="token comment">## bins=60表示将数据范围划分成60个等宽的区间，每一个bin表示一个分钟</span>
<span class="token comment">#range=(0, 60)表示设置直方图显示的数据范围在0到60之间。</span>
df<span class="token punctuation">[</span><span class="token string">&#39;delta_t&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hist<span class="token punctuation">(</span>bins<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_78_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p><strong>运动速度和方向分析</strong></p><p>通过最大运动速度判断数据中是否包含无法达到的速度。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## &#39;CollarID&#39;只有一个，所以轨迹只有一个</span>
tc <span class="token operator">=</span> mpd<span class="token punctuation">.</span>TrajectoryCollection<span class="token punctuation">(</span>df<span class="token punctuation">,</span> <span class="token string">&#39;CollarID&#39;</span><span class="token punctuation">)</span>
traj <span class="token operator">=</span> tc<span class="token punctuation">.</span>trajectories<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment">## 添加速度，单位是坐标系单位/s</span>
traj<span class="token punctuation">.</span>add_speed<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">## 计算速度的最大值</span>
max_speed <span class="token operator">=</span> traj<span class="token punctuation">.</span>df<span class="token punctuation">.</span>speed<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The highest computed speed is {:,.2f} m/s ({:,.2f} km/h)&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>max_speed<span class="token punctuation">,</span> max_speed<span class="token operator">*</span><span class="token number">3600</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>The highest computed speed is 0.82 m/s (2.94 km/h)
</code></pre><p>基于速度，我们可以查看速度分布，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>traj<span class="token punctuation">.</span>df<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;speed&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hist<span class="token punctuation">(</span>bins<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_82_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>进而，我们也可以分析运动方向分布。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>traj<span class="token punctuation">.</span>add_direction<span class="token punctuation">(</span>overwrite<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>traj<span class="token punctuation">.</span>df<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;direction&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hist<span class="token punctuation">(</span>bins<span class="token operator">=</span><span class="token number">360</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_84_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p><strong>时间趋势分析</strong></p><p>如果我们想了解马匹运动趋势与时间的关系，可以通过如下代码实现。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 分析时间和速度的关系</span>
tmp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>traj<span class="token punctuation">.</span>df<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;speed&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>traj<span class="token punctuation">.</span>df<span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span>
<span class="token comment">## 生成小时和月份列</span>
tmp<span class="token punctuation">[</span><span class="token string">&quot;hour&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span>index<span class="token punctuation">.</span>hour
tmp<span class="token punctuation">[</span><span class="token string">&quot;month&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span>index<span class="token punctuation">.</span>month
tmp<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>speed</th><th>hour</th><th>month</th></tr><tr><th>t</th><th></th><th></th><th></th></tr></thead><tbody><tr><th>2018-11-14 12:30:08</th><td>0.162635</td><td>12</td><td>11</td></tr><tr><th>2018-11-14 13:00:33</th><td>0.162635</td><td>13</td><td>11</td></tr><tr><th>2018-11-14 13:30:09</th><td>0.027761</td><td>13</td><td>11</td></tr><tr><th>2018-11-14 14:00:38</th><td>0.013517</td><td>14</td><td>11</td></tr><tr><th>2018-11-14 14:30:08</th><td>0.039568</td><td>14</td><td>11</td></tr></tbody></table></div><p>然后我们可以汇总不同月份不同小时下马匹平均速度。结果发现一年中按小时划分的运动速度表现出明显的不同，马匹夏季的运动较早且时间跨度大，冬季的运动较晚且时间跨度小。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 使用pivot_table函数计算平均速度在不同小时和月份的汇总数据</span>
pivot_table <span class="token operator">=</span> tmp<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>values<span class="token operator">=</span><span class="token string">&#39;speed&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token string">&#39;hour&#39;</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">&#39;month&#39;</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token string">&#39;mean&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## 创建热图</span>
plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## 横轴表示月份，纵轴表示小时，</span>
sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>pivot_table<span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;coolwarm&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: xlabel=&#39;month&#39;, ylabel=&#39;hour&#39;&gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_89_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p><strong>温度趋势分析</strong></p><p>除了时间，数据集还包含每个记录的温度信息，我们也可以对温度进行分析。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 分析温度和速度的关系</span>
tmp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>traj<span class="token punctuation">.</span>df<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Temp [?C]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;speed&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>traj<span class="token punctuation">.</span>df<span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span>
<span class="token comment">## 生成月份列</span>
tmp<span class="token punctuation">[</span><span class="token string">&quot;month&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span>index<span class="token punctuation">.</span>month
tmp<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>Temp [?C]</th><th>speed</th><th>month</th></tr><tr><th>t</th><th></th><th></th><th></th></tr></thead><tbody><tr><th>2018-11-14 12:30:08</th><td>21.0</td><td>0.162635</td><td>11</td></tr><tr><th>2018-11-14 13:00:33</th><td>17.0</td><td>0.162635</td><td>11</td></tr><tr><th>2018-11-14 13:30:09</th><td>17.0</td><td>0.027761</td><td>11</td></tr><tr><th>2018-11-14 14:00:38</th><td>17.0</td><td>0.013517</td><td>11</td></tr><tr><th>2018-11-14 14:30:08</th><td>18.0</td><td>0.039568</td><td>11</td></tr></tbody></table></div><p>如上数据所示，每一行表示某月某个时间出现某个温度一次。于此，可以新增列表示次数，但都是一次。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
tmp<span class="token punctuation">[</span><span class="token string">&#39;n&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
tmp<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>Temp [?C]</th><th>speed</th><th>month</th><th>n</th></tr><tr><th>t</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>2018-11-14 12:30:08</th><td>21.0</td><td>0.162635</td><td>11</td><td>1</td></tr><tr><th>2018-11-14 13:00:33</th><td>17.0</td><td>0.162635</td><td>11</td><td>1</td></tr><tr><th>2018-11-14 13:30:09</th><td>17.0</td><td>0.027761</td><td>11</td><td>1</td></tr><tr><th>2018-11-14 14:00:38</th><td>17.0</td><td>0.013517</td><td>11</td><td>1</td></tr><tr><th>2018-11-14 14:30:08</th><td>18.0</td><td>0.039568</td><td>11</td><td>1</td></tr></tbody></table></div><p>基于温度和月份，我们可以统计每个月份每个温度出现的次数，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 使用pivot_table函数统计不同月份下不同温度值出现次数</span>
pivot_table <span class="token operator">=</span> tmp<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>values<span class="token operator">=</span><span class="token string">&#39;n&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token string">&#39;Temp [?C]&#39;</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">&#39;month&#39;</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token string">&#39;sum&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## 创建热图</span>
plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## 横轴表示月份，纵轴表示温度值</span>
sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>pivot_table<span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;coolwarm&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: xlabel=&#39;month&#39;, ylabel=&#39;Temp [?C]&#39;&gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_96_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>同样我们也可以统计不同月份不同温度下速度的平均值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 使用pivot_table函数统计不同月份下不同温度值下速度平均值</span>
pivot_table <span class="token operator">=</span> tmp<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>values<span class="token operator">=</span><span class="token string">&#39;speed&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token string">&#39;Temp [?C]&#39;</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">&#39;month&#39;</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token string">&#39;mean&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## 创建热图</span>
plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## 横轴表示月份，纵轴表示温度值</span>
sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>pivot_table<span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;coolwarm&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: xlabel=&#39;month&#39;, ylabel=&#39;Temp [?C]&#39;&gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_98_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p><strong>step3 轨迹分析</strong></p><p>本步着眼于个体轨迹的分析。因此，需要将连续轨迹分割成单独的轨迹。分析结果取决于连续流如何划分为轨迹、位置和事件。</p><p><strong>轨迹长度分析</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 按天为单位分割轨迹</span>
daily <span class="token operator">=</span> mpd<span class="token punctuation">.</span>TemporalSplitter<span class="token punctuation">(</span>tc<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">&#39;day&#39;</span><span class="token punctuation">)</span>
daily
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>TrajectoryCollection with 358 trajectories
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 计算每条轨迹的长度</span>
daily_lengths <span class="token operator">=</span> <span class="token punctuation">[</span>traj<span class="token punctuation">.</span>get_length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> traj <span class="token keyword">in</span> daily<span class="token punctuation">]</span>
<span class="token comment">## 计算每条轨迹的开始时间</span>
daily_t <span class="token operator">=</span> <span class="token punctuation">[</span>traj<span class="token punctuation">.</span>get_start_time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> traj <span class="token keyword">in</span> daily<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 建立轨迹开始时间和长度的dataframe</span>
daily_lengths <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>daily_lengths<span class="token punctuation">,</span> index<span class="token operator">=</span>daily_t<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
daily_lengths<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>length</th></tr></thead><tbody><tr><th>2018-11-14 12:30:08</th><td>1090.598526</td></tr><tr><th>2018-11-15 00:00:08</th><td>4219.980813</td></tr><tr><th>2018-11-16 00:00:10</th><td>3198.209140</td></tr><tr><th>2018-11-17 00:00:09</th><td>4307.483500</td></tr><tr><th>2018-11-18 00:00:09</th><td>3548.902314</td></tr></tbody></table></div><p>可视化轨迹开始时间和轨迹长度的关系，可以看到季节趋势与之前发现的季节运动速度模式非常一致：冬季轨迹往往比夏季轨迹短。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>daily_lengths<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_105_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p><strong>停留检测分析</strong></p><p>我们可以对某日轨迹进行单独分析，并通过停留检测以提取轨迹的停留段，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 设置最大直径为100</span>
MAX_DIAMETER <span class="token operator">=</span> <span class="token number">100</span>

<span class="token comment">## 设置最小持续时间为3小时</span>
MIN_DURATION <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">## 获取指定日期（2018年11月17日）的轨迹数据，并赋值给变量one_day</span>
one_day <span class="token operator">=</span> daily<span class="token punctuation">.</span>get_trajectory<span class="token punctuation">(</span><span class="token string">&#39;30788_2018-11-17 00:00:00&#39;</span><span class="token punctuation">)</span>

<span class="token comment">## 使用停留段检测器(mpd.TrajectoryStopDetector)获取指定轨迹数据的停留段，</span>
<span class="token comment">## 并根据最小持续时间和最大直径进行筛选，结果存储在变量one_day_stops中</span>
one_day_stops <span class="token operator">=</span> mpd<span class="token punctuation">.</span>TrajectoryStopDetector<span class="token punctuation">(</span>one_day<span class="token punctuation">)</span><span class="token punctuation">.</span>get_stop_segments<span class="token punctuation">(</span>
    min_duration<span class="token operator">=</span>MIN_DURATION<span class="token punctuation">,</span> max_diameter<span class="token operator">=</span>MAX_DIAMETER<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绘制轨迹停留可视化结果代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 绘制轨迹</span>
<span class="token comment">## 创建一个绘图区域(ax)，并将指定日期（one_day）的轨迹数据以灰色(slategray)进行绘制</span>
ax <span class="token operator">=</span> one_day<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">&#39;slategray&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## 将停留段数据（one_day_stops）以深粉色(deeppink)的颜色进行绘制</span>
ax <span class="token operator">=</span> one_day_stops<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;deeppink&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## 获取停留段的起始位置，并将这些起始位置以红色(red)进行绘制</span>
ax <span class="token operator">=</span> one_day_stops<span class="token punctuation">.</span>get_start_locations<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_110_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>我们也可以对所有时间段的轨迹进行停留识别，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 获得停留轨迹点</span>
stops <span class="token operator">=</span> mpd<span class="token punctuation">.</span>TrajectoryStopDetector<span class="token punctuation">(</span>tc<span class="token punctuation">)</span><span class="token punctuation">.</span>get_stop_points<span class="token punctuation">(</span>min_duration<span class="token operator">=</span>MIN_DURATION<span class="token punctuation">,</span> max_diameter<span class="token operator">=</span>MAX_DIAMETER<span class="token punctuation">)</span>
<span class="token builtin">len</span><span class="token punctuation">(</span>stops<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>362
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 绘制这些停留的轨迹点</span>
stops<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">&#39;deeppink&#39;</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_113_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>此外还可以绘制各停留时间对应的停留次数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>stops<span class="token punctuation">[</span><span class="token string">&#39;duration_h&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>stops<span class="token punctuation">[</span><span class="token string">&#39;end_time&#39;</span><span class="token punctuation">]</span><span class="token operator">-</span>stops<span class="token punctuation">[</span><span class="token string">&#39;start_time&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3600</span>
<span class="token comment">## 横轴为停留时间，纵轴为停留次数</span>
pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>stops<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;duration_h&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hist<span class="token punctuation">(</span>bins<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_115_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_3-足球分析示例" tabindex="-1"><a class="header-anchor" href="#_3-足球分析示例" aria-hidden="true">#</a> 3 足球分析示例</h2>`,169),y={href:"https://raw.githubusercontent.com/Friends-of-Tracking-Data-FoTD/Last-Row/master/datasets/positional_data/liverpool_2019.csv",target:"_blank",rel:"noopener noreferrer"},_=p(`<p><strong>step1 数据处理</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>input_file <span class="token operator">=</span> <span class="token string">&quot;data/liverpool_2019.csv&quot;</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>input_file<span class="token punctuation">)</span>
<span class="token comment">## 删除列</span>
df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;Unnamed: 0&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;样本数&quot;</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>样本数 74936
</code></pre><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>bgcolor</th><th>dx</th><th>dy</th><th>edgecolor</th><th>frame</th><th>play</th><th>player</th><th>player_num</th><th>team</th><th>x</th><th>y</th><th>z</th></tr></thead><tbody><tr><th>74931</th><td>blue</td><td>0.0</td><td>0.0</td><td>white</td><td>120</td><td>Leicester 0 - [3] Liverpool</td><td>10267</td><td>NaN</td><td>defense</td><td>98.724826</td><td>53.720353</td><td>0.0</td></tr><tr><th>74932</th><td>blue</td><td>0.0</td><td>0.0</td><td>white</td><td>121</td><td>Leicester 0 - [3] Liverpool</td><td>10267</td><td>NaN</td><td>defense</td><td>98.724826</td><td>53.720353</td><td>0.0</td></tr><tr><th>74933</th><td>blue</td><td>0.0</td><td>0.0</td><td>white</td><td>122</td><td>Leicester 0 - [3] Liverpool</td><td>10267</td><td>NaN</td><td>defense</td><td>98.724826</td><td>53.720353</td><td>0.0</td></tr><tr><th>74934</th><td>blue</td><td>0.0</td><td>0.0</td><td>white</td><td>123</td><td>Leicester 0 - [3] Liverpool</td><td>10267</td><td>NaN</td><td>defense</td><td>98.724826</td><td>53.720353</td><td>0.0</td></tr><tr><th>74935</th><td>blue</td><td>0.0</td><td>0.0</td><td>white</td><td>124</td><td>Leicester 0 - [3] Liverpool</td><td>10267</td><td>NaN</td><td>defense</td><td>98.724826</td><td>53.720353</td><td>0.0</td></tr></tbody></table></div><p>所读取的数据列名解释如下：</p><ul><li>play：进球后的比分情况。进球的球队位于括号旁边。</li><li>frame：当前位置的帧编号。提供的数据每秒有20帧。</li><li>player：球员的编号。此编号在一次比赛中保持一致，但在不同比赛之间可能会有变化。</li><li>player_num：球员的球衣号码。这个号码是官方号码，在2019年的利物浦队没有发生变化。</li><li>x, y：球员/足球的坐标。球场坐标在每个轴上从0到100。</li><li>dx, dy：从上一帧到当前帧的（x，y）坐标变化。</li><li>z：高度，从0到1.5（仅填充足球的高度信息）。</li><li>bgcolor：球队的主要颜色（用作背景色）。</li><li>edgecolor：辅助颜色（用作边缘颜色）。</li></ul><p>进一步我们可以对数据进行处理，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 获取唯一plays列表</span>
plays <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>play<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## 获得时间戳</span>
<span class="token keyword">def</span> <span class="token function">to_timestamp</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>
    day <span class="token operator">=</span> plays<span class="token punctuation">.</span>index<span class="token punctuation">(</span>row<span class="token punctuation">.</span>play<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    start_time <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> day<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token comment">## 将frame转换为时间戳</span>
    td <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>milliseconds<span class="token operator">=</span><span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">20</span> <span class="token operator">*</span> row<span class="token punctuation">.</span>frame<span class="token punctuation">)</span>
    <span class="token keyword">return</span> start_time <span class="token operator">+</span> td

<span class="token comment">## 将frame转换为时间戳，并添加到DataFrame的新列&#39;time&#39;中</span>
df<span class="token punctuation">[</span><span class="token string">&#39;time&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>to_timestamp<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">## 将&#39;time&#39;列设为索引，以便后续使用时间作为索引来访问数据</span>
df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">&#39;time&#39;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment">## 根据足球场地的标准尺寸，将x和y坐标缩放到合适的范围</span>
<span class="token comment">## 许多职业球队的足球场地标准尺寸为105米乘以68米</span>
pitch_length <span class="token operator">=</span> <span class="token number">105</span>
pitch_width <span class="token operator">=</span> <span class="token number">68</span>
df<span class="token punctuation">.</span>x <span class="token operator">=</span> df<span class="token punctuation">.</span>x <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">*</span> pitch_length 
df<span class="token punctuation">.</span>y <span class="token operator">=</span> df<span class="token punctuation">.</span>y <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">*</span> pitch_width

<span class="token comment">## 将以下列转化为分类数据</span>
df<span class="token punctuation">[</span><span class="token string">&#39;team&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;team&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cat<span class="token punctuation">.</span>as_ordered<span class="token punctuation">(</span><span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">&#39;player&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;player&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cat<span class="token punctuation">.</span>as_ordered<span class="token punctuation">(</span><span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">&#39;player_num&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;player_num&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cat<span class="token punctuation">.</span>as_ordered<span class="token punctuation">(</span><span class="token punctuation">)</span>

df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>bgcolor</th><th>dx</th><th>dy</th><th>edgecolor</th><th>frame</th><th>play</th><th>player</th><th>player_num</th><th>team</th><th>x</th><th>y</th><th>z</th></tr><tr><th>time</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>2019-01-19 12:00:06.000</th><td>blue</td><td>0.0</td><td>0.0</td><td>white</td><td>120</td><td>Leicester 0 - [3] Liverpool</td><td>10267</td><td>NaN</td><td>defense</td><td>103.661067</td><td>36.52984</td><td>0.0</td></tr><tr><th>2019-01-19 12:00:06.050</th><td>blue</td><td>0.0</td><td>0.0</td><td>white</td><td>121</td><td>Leicester 0 - [3] Liverpool</td><td>10267</td><td>NaN</td><td>defense</td><td>103.661067</td><td>36.52984</td><td>0.0</td></tr><tr><th>2019-01-19 12:00:06.100</th><td>blue</td><td>0.0</td><td>0.0</td><td>white</td><td>122</td><td>Leicester 0 - [3] Liverpool</td><td>10267</td><td>NaN</td><td>defense</td><td>103.661067</td><td>36.52984</td><td>0.0</td></tr><tr><th>2019-01-19 12:00:06.150</th><td>blue</td><td>0.0</td><td>0.0</td><td>white</td><td>123</td><td>Leicester 0 - [3] Liverpool</td><td>10267</td><td>NaN</td><td>defense</td><td>103.661067</td><td>36.52984</td><td>0.0</td></tr><tr><th>2019-01-19 12:00:06.200</th><td>blue</td><td>0.0</td><td>0.0</td><td>white</td><td>124</td><td>Leicester 0 - [3] Liverpool</td><td>10267</td><td>NaN</td><td>defense</td><td>103.661067</td><td>36.52984</td><td>0.0</td></tr></tbody></table></div><p>得到了数据后，可以转换为轨迹：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>CRS <span class="token operator">=</span> <span class="token boolean">None</span>
tc <span class="token operator">=</span> mpd<span class="token punctuation">.</span>TrajectoryCollection<span class="token punctuation">(</span>df<span class="token punctuation">,</span> <span class="token string">&#39;player&#39;</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span> crs<span class="token operator">=</span>CRS<span class="token punctuation">)</span>
tc 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>TrajectoryCollection with 364 trajectories
</code></pre><p><strong>轨迹分析</strong></p><p>我们可以对单个球员的轨迹进行分析，代码如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 获得球员轨迹</span>
PLAY <span class="token operator">=</span> <span class="token number">2</span>
play_trajs <span class="token operator">=</span> tc<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token string">&#39;play&#39;</span><span class="token punctuation">,</span> plays<span class="token punctuation">[</span>PLAY<span class="token punctuation">]</span><span class="token punctuation">)</span>
play_trajs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>TrajectoryCollection with 20 trajectories
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 绘制其进攻或防守轨迹</span>
play_trajs<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">&#39;team&#39;</span><span class="token punctuation">,</span> colormap<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;attack&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;hotpink&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;defense&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;turquoise&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_125_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 简化轨迹</span>
generalized <span class="token operator">=</span> mpd<span class="token punctuation">.</span>MinTimeDeltaGeneralizer<span class="token punctuation">(</span>play_trajs<span class="token punctuation">)</span><span class="token punctuation">.</span>generalize<span class="token punctuation">(</span>tolerance<span class="token operator">=</span>timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
generalized<span class="token punctuation">.</span>add_speed<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">## 绘制轨迹速度</span>
generalized<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">&#39;speed&#39;</span><span class="token punctuation">,</span>legend<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;Axes: &gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_126_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 添加完整轨迹数据</span>
ax <span class="token operator">=</span> generalized<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">&#39;team&#39;</span><span class="token punctuation">,</span> colormap<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;attack&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;limegreen&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;defense&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;purple&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
ax <span class="token operator">=</span> generalized<span class="token punctuation">.</span>get_start_locations<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ax <span class="token operator">=</span> ax <span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span>zorder<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>image <span class="token keyword">as</span> mpimg

<span class="token comment">## 添加背景图片</span>
<span class="token comment">## 下载地址https://github.com/movingpandas/movingpandas/raw/main/tutorials/data/soccer_field.png</span>
img <span class="token operator">=</span> mpimg<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;data/soccer_field.png&#39;</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">,</span> extent<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> pitch_length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pitch_width<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;matplotlib.image.AxesImage at 0x7f0a747a1ed0&gt;
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Mapping/[数据分析与可视化] Python绘制数据地图5-MovingPandas绘图实例/output_127_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_4-参考" tabindex="-1"><a class="header-anchor" href="#_4-参考" aria-hidden="true">#</a> 4 参考</h2>`,26),f={href:"https://www.cnblogs.com/luohenyueji/p/17602916.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://raw.githubusercontent.com/Friends-of-Tracking-Data-FoTD/Last-Row/master/datasets/positional_data/liverpool_2019.csv",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/movingpandas/movingpandas",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/movingpandas/movingpandas-examples",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/movingpandas/movingpandas-examples/tree/main/data",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.cnblogs.com/luohenyueji/p/17485432.html#5-%E8%83%8C%E6%99%AF%E5%9C%B0%E5%9B%BE%E5%8F%A0%E5%8A%A0",target:"_blank",rel:"noopener noreferrer"};function T(M,j){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("MovingPandas是一个基于Python和GeoPandas的开源地理时空数据处理库，用于处理移动物体的轨迹数据。关于MovingPandas的使用见文章："),n("a",d,[s("MovingPandas入门指北"),t(a)]),s("，本文主要介绍三个MovingPandas的绘图实例。 MovingPandas官方仓库地址为："),n("a",r,[s("movingpandas"),t(a)]),s("。MovingPandas官方示例代码仓库地址为："),n("a",k,[s("movingpandas-examples"),t(a)]),s("。本文所有实验数据来自于："),n("a",m,[s("movingpandas-examples-data"),t(a)]),s("。")]),n("p",null,[s("本文所有代码见："),n("a",v,[s("Python-Study-Notes"),t(a)])]),g,n("p",null,[s("我们可以展示不同类型船只的航行轨迹。其中添加的背景地图具体使用方法见"),n("a",h,[s("GeoPandas叠加背景地图"),t(a)]),s("。")]),b,n("p",null,[s("本教程使用利物浦足球比赛视频片段中提取的数据，数据每一行代表利物浦队在2019年一次比赛中的一个时间点的数据。数据集下载地址为："),n("a",y,[s("liverpool_2019.csv"),t(a)]),s("。")]),_,n("ul",null,[n("li",null,[n("a",f,[s("MovingPandas入门指北"),t(a)])]),n("li",null,[n("a",x,[s("liverpool_2019.csv"),t(a)])]),n("li",null,[n("a",N,[s("movingpandas"),t(a)])]),n("li",null,[n("a",w,[s("movingpandas-examples"),t(a)])]),n("li",null,[n("a",P,[s("movingpandas-examples-data"),t(a)])]),n("li",null,[n("a",S,[s("GeoPandas叠加背景地图"),t(a)])])])])}const E=e(l,[["render",T],["__file","2023-08-11-_数据分析与可视化_ Python绘制数据地图5-MovingPandas绘图实例.html.vue"]]);export{E as default};
