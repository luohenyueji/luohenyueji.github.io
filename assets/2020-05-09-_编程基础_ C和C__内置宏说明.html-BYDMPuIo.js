import{_ as s,c as a,a as e,o as i}from"./app-TQoR7mvJ.js";const l={};function t(d,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="编程基础-c和c-内置宏说明" tabindex="-1"><a class="header-anchor" href="#编程基础-c和c-内置宏说明"><span>[编程基础] C和C++内置宏说明</span></a></h1><p>C和C++内置宏在代码调试、跨系统平台代码中会经常使用，本文记录说明一下。内置宏不需要调用头文件，可直接使用。在使用预定义的宏之间需要了解常用的条件编译指令，具体条件编译指令可见： <a href="https://www.jianshu.com/p/a2527bc23a95" target="_blank" rel="noopener noreferrer">if、#else、#endif、#elif、#ifdef、#ifndef的区别和使用</a></p><h2 id="_1-内置的宏定义" tabindex="-1"><a class="header-anchor" href="#_1-内置的宏定义"><span>1 内置的宏定义</span></a></h2><p>这些宏在代码中可直接调用。</p><table><thead><tr><th>宏</th><th>宏说明</th></tr></thead><tbody><tr><td>__DATE__</td><td>程序最后编译日期宏</td></tr><tr><td>__TIME__</td><td>程序最后编译时间宏</td></tr><tr><td>__LINE__</td><td>当前行数宏</td></tr><tr><td>__FILE__</td><td>当前运行文件名宏</td></tr><tr><td>__FUNCTION__</td><td>当前运行函数宏</td></tr><tr><td>__func__</td><td>当前运行函数宏</td></tr></tbody></table><p><strong>示例代码</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cout &lt;&lt; &quot;程序最后编译日期宏 &quot; &lt;&lt; __DATE__ &lt;&lt; endl;</span></span>
<span class="line"><span>cout &lt;&lt; &quot;程序最后编译时间宏 &quot; &lt;&lt; __TIME__ &lt;&lt; endl;</span></span>
<span class="line"><span>cout &lt;&lt; &quot;当前行数宏 &quot; &lt;&lt; __LINE__ &lt;&lt; endl;</span></span>
<span class="line"><span>cout &lt;&lt; &quot;当前运行文件名宏 &quot; &lt;&lt; __FILE__ &lt;&lt; endl;</span></span>
<span class="line"><span>cout &lt;&lt; &quot;当前运行函数宏 &quot; &lt;&lt; __FUNCTION__ &lt;&lt; endl;</span></span>
<span class="line"><span>cout &lt;&lt; &quot;当前运行函数宏 &quot; &lt;&lt; __func__ &lt;&lt; endl;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>windows输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>程序最后编译日期宏 May  8 2020</span></span>
<span class="line"><span>程序最后编译时间宏 11:19:24</span></span>
<span class="line"><span>当前行数宏 12</span></span>
<span class="line"><span>当前运行文件名宏 c:\\users\\admin\\desktop\\test\\define.cpp</span></span>
<span class="line"><span>当前运行函数宏 main</span></span>
<span class="line"><span>当前运行函数宏 main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>linux输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>程序最后编译日期宏 May  8 2020</span></span>
<span class="line"><span>程序最后编译时间宏 11:19:00</span></span>
<span class="line"><span>当前行数宏 9</span></span>
<span class="line"><span>当前运行文件名宏 define.cpp</span></span>
<span class="line"><span>当前运行函数宏 main</span></span>
<span class="line"><span>当前运行函数宏 main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-运行平台宏" tabindex="-1"><a class="header-anchor" href="#_2-运行平台宏"><span>2 运行平台宏</span></a></h2><p>这些宏主要是判断当前系统运行平台。</p><table><thead><tr><th>宏</th><th>宏说明</th></tr></thead><tbody><tr><td>WIN32、_WIN32、_WIN32_、WIN64、_WIN64、_WIN64_</td><td>windows</td></tr><tr><td>ANDROID、_ANDROID_</td><td>android</td></tr><tr><td>__linux__</td><td>linux</td></tr><tr><td>__APPLE__、TARGET_OS_IPHONE、TARGET_IPHONE_SIMULATOR、TARGET_OS_MAC</td><td>ios、mac</td></tr></tbody></table><p><strong>示例代码</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>	// windows</span></span>
<span class="line"><span>#if defined(WIN32) || defined(_WIN32) || defined(_WIN32_) || defined(WIN64) || defined(_WIN64) || defined(_WIN64_)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello windows&quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// android</span></span>
<span class="line"><span>#elif defined(ANDROID) || defined(_ANDROID_)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello android&quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// linux</span></span>
<span class="line"><span>#elif defined(__linux__)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello linux&quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// ios or mac</span></span>
<span class="line"><span>#elif defined(__APPLE__) || defined(TARGET_OS_IPHONE) || defined(TARGET_IPHONE_SIMULATOR) || defined(TARGET_OS_MAC)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello ios/mac&quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// other</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello unknown&quot; &lt;&lt; endl;</span></span>
<span class="line"><span>#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>windows输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hello windows</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>linux输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hello linux</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3-编译器宏" tabindex="-1"><a class="header-anchor" href="#_3-编译器宏"><span>3 编译器宏</span></a></h2><p>这些宏主要是判断当前程序的编译器类型。</p><table><thead><tr><th>宏</th><th>宏说明</th></tr></thead><tbody><tr><td>_MSC_VER</td><td>visual studio</td></tr><tr><td>__GNUC__</td><td>gcc、g++</td></tr><tr><td>__SUNPRO_C、__SUNPRO_CC</td><td>sun cc</td></tr></tbody></table><p><strong>示例代码</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>	// visual studio</span></span>
<span class="line"><span>#if defined(_MSC_VER)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello VC&quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// gcc/g++</span></span>
<span class="line"><span>#elif defined(__GNUC__)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello GCC / G++ &quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// SunCC</span></span>
<span class="line"><span>#elif defined(__SUNPRO_C)||defined(__SUNPRO_CC)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello SunCC&quot; &lt;&lt; endl;</span></span>
<span class="line"><span>#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>windows输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hello VC</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>linux输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hello GCC / G++</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_4-调试类型宏" tabindex="-1"><a class="header-anchor" href="#_4-调试类型宏"><span>4 调试类型宏</span></a></h2><p>这些宏主要是判断当前程序的调试类型。</p><table><thead><tr><th>宏</th><th>宏说明</th></tr></thead><tbody><tr><td>_DEBUG</td><td>debug模式</td></tr></tbody></table><p><strong>示例代码</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#if defined(_DEBUG)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;debug&quot; &lt;&lt; endl;</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;release&quot; &lt;&lt; endl;</span></span>
<span class="line"><span>#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>windows输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>debug</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>linux输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>release</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_5-代码" tabindex="-1"><a class="header-anchor" href="#_5-代码"><span>5 代码</span></a></h2><p>所有示例运行代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include &lt;iostream&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace std;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	cout &lt;&lt; &quot;程序最后编译日期宏 &quot; &lt;&lt; __DATE__ &lt;&lt; endl;</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;程序最后编译时间宏 &quot; &lt;&lt; __TIME__ &lt;&lt; endl;</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;当前行数宏 &quot; &lt;&lt; __LINE__ &lt;&lt; endl;</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;当前运行文件名宏 &quot; &lt;&lt; __FILE__ &lt;&lt; endl;</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;当前运行函数宏 &quot; &lt;&lt; __FUNCTION__ &lt;&lt; endl;</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;当前运行函数宏 &quot; &lt;&lt; __func__ &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// 运行平台宏</span></span>
<span class="line"><span>	// windows</span></span>
<span class="line"><span>#if defined(WIN32) || defined(_WIN32) || defined(_WIN32_) || defined(WIN64) || defined(_WIN64) || defined(_WIN64_)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello windows&quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// android</span></span>
<span class="line"><span>#elif defined(ANDROID) || defined(_ANDROID_)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello android&quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// linux</span></span>
<span class="line"><span>#elif defined(__linux__)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello linux&quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// ios or mac</span></span>
<span class="line"><span>#elif defined(__APPLE__) || defined(TARGET_OS_IPHONE) || defined(TARGET_IPHONE_SIMULATOR) || defined(TARGET_OS_MAC)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello ios/mac&quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// other</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello unknown&quot; &lt;&lt; endl;</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// 编译器宏</span></span>
<span class="line"><span>	// visual studio</span></span>
<span class="line"><span>#if defined(_MSC_VER)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello VC&quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// gcc/g++</span></span>
<span class="line"><span>#elif defined(__GNUC__)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello GCC / G++ &quot; &lt;&lt; endl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// SunCC</span></span>
<span class="line"><span>#elif defined(__SUNPRO_C)||defined(__SUNPRO_CC)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;hello SunCC&quot; &lt;&lt; endl;</span></span>
<span class="line"><span>#endif</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 调试类型</span></span>
<span class="line"><span>#if defined(_DEBUG)</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;debug&quot; &lt;&lt; endl;</span></span>
<span class="line"><span>#else</span></span>
<span class="line"><span>	cout &lt;&lt; &quot;release&quot; &lt;&lt; endl;</span></span>
<span class="line"><span>#endif </span></span>
<span class="line"><span></span></span>
<span class="line"><span>	return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41)]))}const r=s(l,[["render",t],["__file","2020-05-09-_编程基础_ C和C__内置宏说明.html.vue"]]),c=JSON.parse('{"path":"/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-05-09-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C%E5%92%8CC__%E5%86%85%E7%BD%AE%E5%AE%8F%E8%AF%B4%E6%98%8E.html","title":"[编程基础] C和C++内置宏说明","lang":"zh-CN","frontmatter":{"date":"2020-05-09T21:09:04.000Z","category":["编程基础"],"tag":["编程基础"],"description":"[编程基础] C和C++内置宏说明 C和C++内置宏在代码调试、跨系统平台代码中会经常使用，本文记录说明一下。内置宏不需要调用头文件，可直接使用。在使用预定义的宏之间需要了解常用的条件编译指令，具体条件编译指令可见： if、#else、#endif、#elif、#ifdef、#ifndef的区别和使用 1 内置的宏定义 这些宏在代码中可直接调用。 示例...","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-05-09-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C%E5%92%8CC__%E5%86%85%E7%BD%AE%E5%AE%8F%E8%AF%B4%E6%98%8E.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[编程基础] C和C++内置宏说明"}],["meta",{"property":"og:description","content":"[编程基础] C和C++内置宏说明 C和C++内置宏在代码调试、跨系统平台代码中会经常使用，本文记录说明一下。内置宏不需要调用头文件，可直接使用。在使用预定义的宏之间需要了解常用的条件编译指令，具体条件编译指令可见： if、#else、#endif、#elif、#ifdef、#ifndef的区别和使用 1 内置的宏定义 这些宏在代码中可直接调用。 示例..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"编程基础"}],["meta",{"property":"article:published_time","content":"2020-05-09T21:09:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[编程基础] C和C++内置宏说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-09T21:09:04.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"1 内置的宏定义","slug":"_1-内置的宏定义","link":"#_1-内置的宏定义","children":[]},{"level":2,"title":"2 运行平台宏","slug":"_2-运行平台宏","link":"#_2-运行平台宏","children":[]},{"level":2,"title":"3 编译器宏","slug":"_3-编译器宏","link":"#_3-编译器宏","children":[]},{"level":2,"title":"4 调试类型宏","slug":"_4-调试类型宏","link":"#_4-调试类型宏","children":[]},{"level":2,"title":"5 代码","slug":"_5-代码","link":"#_5-代码","children":[]}],"git":{},"readingTime":{"minutes":3.05,"words":914},"filePathRelative":"blog/编程基础/学习笔记/2020-05-09-[编程基础] C和C++内置宏说明.md","localizedDate":"2020年5月10日","excerpt":"\\n<p>C和C++内置宏在代码调试、跨系统平台代码中会经常使用，本文记录说明一下。内置宏不需要调用头文件，可直接使用。在使用预定义的宏之间需要了解常用的条件编译指令，具体条件编译指令可见：\\n<a href=\\"https://www.jianshu.com/p/a2527bc23a95\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">if、#else、#endif、#elif、#ifdef、#ifndef的区别和使用</a></p>\\n<h2>1 内置的宏定义</h2>\\n<p>这些宏在代码中可直接调用。</p>\\n<table>\\n<thead>\\n<tr>\\n<th>宏</th>\\n<th>宏说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>__DATE__</td>\\n<td>程序最后编译日期宏</td>\\n</tr>\\n<tr>\\n<td>__TIME__</td>\\n<td>程序最后编译时间宏</td>\\n</tr>\\n<tr>\\n<td>__LINE__</td>\\n<td>当前行数宏</td>\\n</tr>\\n<tr>\\n<td>__FILE__</td>\\n<td>当前运行文件名宏</td>\\n</tr>\\n<tr>\\n<td>__FUNCTION__</td>\\n<td>当前运行函数宏</td>\\n</tr>\\n<tr>\\n<td>__func__</td>\\n<td>当前运行函数宏</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{r as comp,c as data};
