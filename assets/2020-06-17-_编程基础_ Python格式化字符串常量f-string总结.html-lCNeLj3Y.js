import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c as i,a as n,b as a,d as t,e as c}from"./app-MsA2k2kn.js";const l={},r=c(`<h1 id="编程基础-python格式化字符串常量f-string总结" tabindex="-1"><a class="header-anchor" href="#编程基础-python格式化字符串常量f-string总结" aria-hidden="true">#</a> [编程基础] Python格式化字符串常量f-string总结</h1><p>本文主要总结在Python中如何使用格式化字符串常量f-string(Formatted string literals)。在 Python 程序中，大部分时间都是使用 %s 或 format 来格式化字符串，在 Python 3.6 中新的选择 f-string可以用于格式化字符串。相比于其他字符串格式方式，f-string更快，更易读，更简明且不易出错。f-string通过f或 F 修饰字符串，如f&#39;xxx&#39; 或 F&#39;xxx&#39;），以大括号 {}表示被替换的字段。对齐的格式在冒号后指定；例如：f&#39;{price：.3}，其中price是变量名。</p><h2 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1 语法</h2><h3 id="_1-1-python字符串格式" tabindex="-1"><a class="header-anchor" href="#_1-1-python字符串格式" aria-hidden="true">#</a> 1.1 Python字符串格式</h3><p>以下示例总结了Python中的字符串格式设置选项。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&#39;Peter&#39;</span>
age <span class="token operator">=</span> <span class="token number">23</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%s is %d years old&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{} is {} years old&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string"> years old&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>Peter is 23 years old
Peter is 23 years old
Peter is 23 years old
</code></pre><p>这个是最古老的方式，通过%代替变量，如下所示：</p><blockquote><p>print(&#39;%s is %d years old&#39; % (name, age))</p></blockquote><p>从Python 3.0开始，format()引入了该功能以提供高级格式化选项。如下所示：</p><blockquote><p>print(&#39;{} is {} years old&#39;.format(name, age))</p></blockquote><p>从Python 3.6开始，Python f-string用于格式化变量，如下所示：</p><blockquote><p>print(f&#39;{name} is {age} years old&#39;)</p></blockquote><h3 id="_1-2-python-f-string中使用表达式" tabindex="-1"><a class="header-anchor" href="#_1-2-python-f-string中使用表达式" aria-hidden="true">#</a> 1.2 Python f-string中使用表达式</h3><p>我们可以将表达式放在{}方括号之间，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>bags <span class="token operator">=</span> <span class="token number">3</span>
apples_in_bag <span class="token operator">=</span> <span class="token number">12</span>

<span class="token comment"># 对f-string中的表达式求值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;There are total of </span><span class="token interpolation"><span class="token punctuation">{</span>bags <span class="token operator">*</span> apples_in_bag<span class="token punctuation">}</span></span><span class="token string"> apples&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>There are total of 36 apples
</code></pre><h3 id="_1-3-python-f-string中使用字典" tabindex="-1"><a class="header-anchor" href="#_1-3-python-f-string中使用字典" aria-hidden="true">#</a> 1.3 Python f-string中使用字典</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;occupation&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;gardener&#39;</span><span class="token punctuation">}</span>

<span class="token comment"># 获得对应的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>user<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> is a </span><span class="token interpolation"><span class="token punctuation">{</span>user<span class="token punctuation">[</span><span class="token string">&#39;occupation&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>John Doe is a gardener
</code></pre><h3 id="_1-4-python多行f-string" tabindex="-1"><a class="header-anchor" href="#_1-4-python多行f-string" aria-hidden="true">#</a> 1.4 Python多行f-string</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">mymax</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">return</span> x <span class="token keyword">if</span> x <span class="token operator">&gt;</span> y <span class="token keyword">else</span> y

a <span class="token operator">=</span> <span class="token number">3</span>
b <span class="token operator">=</span> <span class="token number">4</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Max of </span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">{</span>mymax<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>Max of 3 and 4 is 4
</code></pre><h3 id="_1-5-python-f-string对象" tabindex="-1"><a class="header-anchor" href="#_1-5-python-f-string对象" aria-hidden="true">#</a> 1.5 Python f-string对象</h3><p>Python f-string也接受对象；这些对象必须定义有__str__()或__repr__()函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> occupation<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>occupation <span class="token operator">=</span> occupation

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string"> is a </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>occupation<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>

u <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gardener&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>u<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>John Doe is a gardener
</code></pre><h3 id="_1-6-python-f-string中转义字符" tabindex="-1"><a class="header-anchor" href="#_1-6-python-f-string中转义字符" aria-hidden="true">#</a> 1.6 Python f-string中转义字符</h3><p>为了转义{}，我们将嵌入{ {} }转义。单引号用反斜杠字符转义。如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>print(f&#39;Python uses { {} } to evaludate variables in f-strings&#39;)
print(f&#39;This was a \\&#39;great\\&#39; film&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Python uses {} to evaludate variables in f-strings This was a &#39;great&#39; film</p><h3 id="_1-7-python-f-string中格式化-datetime" tabindex="-1"><a class="header-anchor" href="#_1-7-python-f-string中格式化-datetime" aria-hidden="true">#</a> 1.7 Python f-string中格式化 datetime</h3><p>示例显示格式化的当前日期时间。日期时间格式说明符跟在:字符后面</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime

now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>now<span class="token punctuation">:</span><span class="token operator">%</span>Y<span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">-</span><span class="token operator">%</span>d <span class="token operator">%</span>H<span class="token punctuation">:</span><span class="token format-spec">%M</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>2020-06-17 20:39
</code></pre><h3 id="_1-8-python-f-string中格式化-floats" tabindex="-1"><a class="header-anchor" href="#_1-8-python-f-string中格式化-floats" aria-hidden="true">#</a> 1.8 Python f-string中格式化 floats</h3><p>浮点值带有f后缀。我们还可以指定精度：小数位数。精度通过.后的值设定。例如.2f表示浮点数值，小数点后保留两位小时。如下所示输出两位和五位小数位数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>val <span class="token operator">=</span> <span class="token number">12.3</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>val<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>val<span class="token punctuation">:</span><span class="token format-spec">.5f</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>12.30
12.30000
</code></pre><h3 id="_1-9-python-f-string中字符宽度" tabindex="-1"><a class="header-anchor" href="#_1-9-python-f-string中字符宽度" aria-hidden="true">#</a> 1.9 Python f-string中字符宽度</h3><p>字符宽度说明符设置值的宽度。如果该值短于指定的宽度，则该值可以用空格或其他字符填充。如下程序所示打印三列。每个列都有一个预定义的宽度。第一列使用0填充较短的值，如果不填默认使用空格填充。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token format-spec">02</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token operator">*</span>x<span class="token punctuation">:</span><span class="token format-spec">3</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token punctuation">:</span><span class="token format-spec">4</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>01   1    1
02   4    8
03   9   27
04  16   64
05  25  125
06  36  216
07  49  343
08  64  512
09  81  729
10 100 1000
</code></pre><h3 id="_1-10-python-f-string对齐字符串" tabindex="-1"><a class="header-anchor" href="#_1-10-python-f-string对齐字符串" aria-hidden="true">#</a> 1.10 Python f-string对齐字符串</h3><p>默认情况下，字符串左对齐。我们可以使用&gt;字符将字符串向右对齐。&gt;字符跟在冒号字符后面。如下所示我们有四根不同长度的字符串。我们将输出的宽度设置为10个字符。这些值向右对齐。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
s2 <span class="token operator">=</span> <span class="token string">&#39;ab&#39;</span>
s3 <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
s4 <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>s1<span class="token punctuation">:</span><span class="token format-spec">&gt;10</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>s2<span class="token punctuation">:</span><span class="token format-spec">&gt;10</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>s3<span class="token punctuation">:</span><span class="token format-spec">&gt;10</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>s4<span class="token punctuation">:</span><span class="token format-spec">&gt;10</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>         a
        ab
       abc
      abcd
</code></pre><h3 id="_1-11-python-f-string中进制表示" tabindex="-1"><a class="header-anchor" href="#_1-11-python-f-string中进制表示" aria-hidden="true">#</a> 1.11 Python f-string中进制表示</h3><p>数字可以具有各种进制，例如十进制或十六进制。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># hexadecimal</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token format-spec">x</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># octal</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token format-spec">o</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># scientific</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token format-spec">e</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>3
3
3.000000e+00
</code></pre><h2 id="_2-参考" tabindex="-1"><a class="header-anchor" href="#_2-参考" aria-hidden="true">#</a> 2 参考</h2>`,52),u={href:"http://zetcode.com/python/fstring/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals",target:"_blank",rel:"noopener noreferrer"};function k(g,h){const s=e("ExternalLinkIcon");return o(),i("div",null,[r,n("blockquote",null,[n("p",null,[n("a",u,[a("http://zetcode.com/python/fstring/"),t(s)])])]),n("blockquote",null,[n("p",null,[n("a",d,[a("https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals"),t(s)])])])])}const f=p(l,[["render",k],["__file","2020-06-17-_编程基础_ Python格式化字符串常量f-string总结.html.vue"]]);export{f as default};
