import{_ as n,c as i,a,o as t}from"./app-BNuIUq7T.js";const s={};function r(l,e){return t(),i("div",null,e[0]||(e[0]=[a(`<h1 id="常用工具-opencv-contrib库在windows下编译使用指南" tabindex="-1"><a class="header-anchor" href="#常用工具-opencv-contrib库在windows下编译使用指南"><span>[常用工具] OpenCV_contrib库在windows下编译使用指南</span></a></h1><p>本文主要讲述opencv及opencv_contrib库在windows下基于vs2017编译安装指南。所用OpenCV版本为OpenCV4.4，编译平台为vs2017。</p><h2 id="_1-下载" tabindex="-1"><a class="header-anchor" href="#_1-下载"><span>1 下载</span></a></h2><p>在OpenCV的github仓库下载对应版本文件。链接地址为： <a href="https://github.com/opencv/opencv/releases/tag/4.4.0" target="_blank" rel="noopener noreferrer">OpenCV仓库</a></p><p>在OpenCV_contrib的githuc仓库下载对应版本文件。链接地址为： <a href="https://github.com/opencv/opencv_contrib" target="_blank" rel="noopener noreferrer">OpenCV_contrib仓库</a></p><p><strong>注意OpenCV版本和OpenCV_contrib版本必须一致</strong></p><p>然后将OpenCV解压后的文件目录opencv-4.4.0放入某个目录下，比如我的放入D盘opencv_440_contrib目录下，然后将OpenCV_contirb解压后的文件夹opencv_contrib-4.4.0放入opencv-4.4.0目录，在opencv-4.4.0目录下建立build目录，用于保存编译文件。具体文件结构如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- d:/opencv_440_contrib</span></span>
<span class="line"><span>    - opencv-4.4.0</span></span>
<span class="line"><span>        - ...</span></span>
<span class="line"><span>        - build</span></span>
<span class="line"><span>        - opencv_contrib-4.4.0</span></span>
<span class="line"><span>            - ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体目录如图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_1.jpg" alt="" loading="lazy"></p><h2 id="_2-编译与安装" tabindex="-1"><a class="header-anchor" href="#_2-编译与安装"><span>2 编译与安装</span></a></h2><h3 id="_2-1-配置opencv标准库" tabindex="-1"><a class="header-anchor" href="#_2-1-配置opencv标准库"><span>2.1 配置OpenCV标准库</span></a></h3><p>打开cmake-gui，配置OpenCV标准库。cmake安装地址为：<a href="https://cmake.org/download/" target="_blank" rel="noopener noreferrer">https://cmake.org/download/</a></p><p>打开后的cmake-gui设置源代码目录地址和生成文件地址，点击configure。如图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_2.jpg" alt="" loading="lazy"></p><p>然后配置编译器，选择对应其的编译器版本，然后选择编译平台版本。x64 or win32。然后点击finish，cmake将会自动编译文件。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_3.jpg" alt="" loading="lazy"></p><p>在编译过程会出现如下情况，比如下载ippicv和ffmpeg。有时下载可能会失败。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_4.jpg" alt="" loading="lazy"></p><p>通用的解决方式是离线下载，然后代替文件。要下载的文件可以打开D:\\opencv_440_contrib\\opencv-4.4.0.cache目录，查看哪些目录下有大小为0kb的文件，提取该文件的名字，下载对应的文件并改名替换源0kb文件。如下所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_5.jpg" alt="" loading="lazy"></p><p>当然要下载的文件获得主要有三种办法：</p><ul><li>搜索引擎搜索文件进行下载</li><li>替换下载链接，但是可能会失败。具体见<a href="https://blog.csdn.net/chocolate_holic/article/details/107198666" target="_blank" rel="noopener noreferrer">windows下OpenCV库安装</a></li><li>官方第三方库地址下载（最稳妥）</li></ul><p>这里具体讲一讲如何通过官方第三方库下载，首先进入<a href="https://github.com/opencv/opencv_3rdparty" target="_blank" rel="noopener noreferrer">opencv_3rdparty仓库</a> 然后搜索对应文件版本下载即可，如图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_6.jpg" alt="" loading="lazy"></p><p>如果没有找到下载的文件，就打开D:\\opencv_440_contrib\\opencv-4.4.0\\build\\CMakeDownloadLog.txt文件，里面有下载文件的具体链接。然后通过第三方工具下载。CMakeDownloadLog.txt内容如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_7.jpg" alt="" loading="lazy"></p><p>当.cache目录无0kb文件，cmake-gui中继续执行configure。执行完之后需要查看底部窗口是否有红色提示。可能会出现OpenCVGenSetupVars.cmake:54，如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_8.jpg" alt="" loading="lazy"></p><p>解决办法为去除OPENCV_GENERATE_SETUPVARS选项，参考<a href="https://www.jianshu.com/p/011330a91b99" target="_blank" rel="noopener noreferrer">去除OpenCVGenSetupVars.cmake:54</a>如下图所示。然后再继续点击configure。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_9.jpg" alt="" loading="lazy"></p><h3 id="_2-2-配置opencv-contrib库" tabindex="-1"><a class="header-anchor" href="#_2-2-配置opencv-contrib库"><span>2.2 配置OpenCV_contrib库</span></a></h3><p>如果上一步骤完成，在cmake搜索框中搜索OPENCV_EXTRA_MODULES_PATH，并将其值设置成opencv_contrib文件夹中的modules，然后再点击configure，如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_10.jpg" alt="" loading="lazy"></p><p>编译过程如出现要下载第三方库，网络问题会失败，如图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_11.jpg" alt="" loading="lazy"></p><p>编译contrib库需要的第三方库文件具体有：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>boostdesc_bgm.i</span></span>
<span class="line"><span>boostdesc_bgm_bi.i</span></span>
<span class="line"><span>boostdesc_bgm_hd.i</span></span>
<span class="line"><span>boostdesc_lbgm.i</span></span>
<span class="line"><span>boostdesc_binboost_064.i</span></span>
<span class="line"><span>boostdesc_binboost_128.i</span></span>
<span class="line"><span>boostdesc_binboost_256.i</span></span>
<span class="line"><span>vgg_generated_120.i</span></span>
<span class="line"><span>vgg_generated_64.i</span></span>
<span class="line"><span>vgg_generated_80.i</span></span>
<span class="line"><span>vgg_generated_48.i</span></span>
<span class="line"><span>face_landmark_model.dat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决办法就是离线下载这些文件，将这些文件复制到opencv_contrib/modules/xfeatures2d/src/目录下，如下图所示。具体如何下载文件，网络搜索对应文件名或者查看build文件夹下的CMakeDownloadLog.txt文件提取下载链接，或者查看如下查看文章： <a href="https://blog.csdn.net/u011736771/article/details/85960300" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u011736771/article/details/85960300</a><a href="https://blog.csdn.net/AlexWang30/article/details/99612188" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/AlexWang30/article/details/99612188</a><a href="https://github.com/opencv/opencv_contrib/issues/1301" target="_blank" rel="noopener noreferrer">https://github.com/opencv/opencv_contrib/issues/1301</a></p><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_12.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后继续点击configure。可能某些版本还是出现文件下载错误，就把以上文件复制到.cache文件夹，修改名字。类似上一步配置OpenCV标准库一样，就可以配置成功。另外要注意的face_landmark_model.data文件很大约70MB，位于.cache/data目录下，最好离线下载。</p><p>检查.cache文件中是否存在0kb文件，安装记录是否报错。如果都正常，至此文件配置基本完成。如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_13.jpg" alt="" loading="lazy"></p><p>点击generate，然后可以跳过2.3节，查看2.4可以直接编译文件，但是建议看看2.3OpenCV需求配置，以加快OpenCV编译速度和提高后期OpenCV使用体验。</p><h3 id="_2-3-opencv需求配置" tabindex="-1"><a class="header-anchor" href="#_2-3-opencv需求配置"><span>2.3 OpenCV需求配置</span></a></h3><p>本节主要是为了加快OpenCV编译速度和提高后期OpenCV使用体验。</p><h4 id="_2-3-1-配置优化编译选项" tabindex="-1"><a class="header-anchor" href="#_2-3-1-配置优化编译选项"><span>2.3.1 配置优化编译选项</span></a></h4><p>首先搜索world，勾选BUILD_opencv_world。BUILD_opencv_world勾选的作用就是生成opencv_world.lib文件，在使用的时候，直接在附加依赖项添加opencv_world.lib就可以，主要是为了方便。没有打包的话，需要添加其它所有的lib文件。如图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_14.jpg" alt="" loading="lazy"> 然后搜索nonfree，勾选OPENCV_ENABLE_NONFREE，这一项的作用就是使用非免费库。当然也可以不选，一般很少用。如图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_15.jpg" alt="" loading="lazy"></p><p>然后点击configure生成即可。</p><h4 id="_2-3-2-去除不必要选项" tabindex="-1"><a class="header-anchor" href="#_2-3-2-去除不必要选项"><span>2.3.2 去除不必要选项</span></a></h4><p>编译过程中，如果直接进编会译出一堆测试文件(_test_xxx)和性能测试文件(_perf_xxx)，以及一些example例子。可以直接去除。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>BUILD_EXAMPLES</span></span>
<span class="line"><span>BUILD_TESTS</span></span>
<span class="line"><span>BUILD_PERF_TESTS</span></span>
<span class="line"><span>BUILD_DOCS</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python相关编译可以去除，一般不编译Python库。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>BUILD_opencv_python2</span></span>
<span class="line"><span>BUILD_opencv_python3</span></span>
<span class="line"><span>BUILD_opencv_python_bindings_generator</span></span>
<span class="line"><span>BUILD_opencv_python_tests</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同环境选项可能不同，搜索python即可。然后去除勾选，如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_16.jpg" alt="" loading="lazy"></p><p>此外如果不是编译java库，可以去除java编译选项。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>BUILD_java</span></span>
<span class="line"><span>BUILD_opencv_java_bindings_generator</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>不同环境选项可能不同，搜索java即可。然后去除勾选，如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_17.jpg" alt="" loading="lazy"></p><p><strong>所有选项配置后，直接configure，查看是否标红而且.cache是否有0kb文件，然后generate，成功后打开OpenProject即可。</strong> 如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_18.jpg" alt="" loading="lazy"></p><h3 id="_2-4-编译opencv" tabindex="-1"><a class="header-anchor" href="#_2-4-编译opencv"><span>2.4 编译OpenCV</span></a></h3><p>打开后的vs2017界面如下图所示，确定编译平台为debug/x64， <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_19.jpg" alt="" loading="lazy"></p><p>然后点击生成-生成解决方法即可，如下图所示。这样的好处是知道哪些模块生成失败。如果有生成译错误，检查即可。这一过程约10分钟到40分钟，不同机器时间不一样。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_20.jpg" alt="" loading="lazy"></p><p>生成成功后，如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_21.jpg" alt="" loading="lazy"></p><p>如果生成后没有失败的，选择解决方案-CMakeTargets-INSTALL-仅用于项目-仅生成INSTALL，如下所示。就可以生成opencv_world440d.lib文件。提示成功后就可以在build文件夹下看到install文件夹。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_22.jpg" alt="" loading="lazy"></p><p>此外以上操作只能生成OpenCV Debug版本。Release版本需要修改配置平台，重复以上操作。如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_23.jpg" alt="" loading="lazy"></p><p>最后如果生成了install文件夹，而且该文件夹下x64/vc15/lib目录下有对应的lib文件表明生成成功。如下图所示。install就是我们编译最后要使用的文件。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_24.jpg" alt="" loading="lazy"></p><h3 id="_2-5-其他平台与语言环境的opencv-contrib库使用" tabindex="-1"><a class="header-anchor" href="#_2-5-其他平台与语言环境的opencv-contrib库使用"><span>2.5 其他平台与语言环境的OpenCV_contrib库使用</span></a></h3><p>如果是Python环境，不需要编译OpenCV contrib库，直接pip安装即可，命令如下：</p><blockquote><p>pip install opencv-contrib-python</p></blockquote><p>如果是linux平台参考如下文章：</p><blockquote><p><a href="https://blog.csdn.net/haoqimao_hard/article/details/82049565" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/haoqimao_hard/article/details/82049565</a></p></blockquote><h2 id="_3-配置与使用" tabindex="-1"><a class="header-anchor" href="#_3-配置与使用"><span>3 配置与使用</span></a></h2><h3 id="_3-1-配置" tabindex="-1"><a class="header-anchor" href="#_3-1-配置"><span>3.1 配置</span></a></h3><p>为了配置好OpenCV,个人习惯将上一步的install文件移到opencv_440_contrib目录下，并且重命名为build（以前使用直装版的习惯）。如图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_25.jpg" alt="" loading="lazy"></p><p>然后新建vs2017项目，然后选择属性管理器，新建属性列表opencv_440如图所示。这样该opencv_440属性列表以后可以重复导入使用，不需要每次新建工程都配置。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_26.jpg" alt="" loading="lazy"></p><p>修改Debug|X64模式下的opencv_440属性，修改VC++目录下的可执行目录，包含目录，库目录。如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_27.jpg" alt="" loading="lazy"></p><p>可执行文件目录设置如下，其中vc15指的是编译平台，vc15就是vs2017。按照自己的编译平台选择文件夹。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>d:\\opencv_440_contrib\\build\\x64\\vc15\\bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>包含目录设置如下，添加头文件，但是要注意的是有些OpenCV版本下include目录有opencv目录，需要添加include\\opencv目录，该版本只有opencv2目录，就不需要添加opencv目录了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>d:\\opencv_440_contrib\\build\\include</span></span>
<span class="line"><span>d:\\opencv_440_contrib\\build\\include\\opencv2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>库目录设置如下，其中vc15指的是编译平台。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>d:\\opencv_440_contrib\\build\\x64\\vc15\\lib</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后修改链接器-输入-附加依赖项，如下图所示： <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_28.jpg" alt="" loading="lazy"></p><p>附加依赖项设置如下。如果是debug版本就加d，release版本就去掉d。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>opencv_world440d.lib</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-2-测试" tabindex="-1"><a class="header-anchor" href="#_3-2-测试"><span>3.2 测试</span></a></h3><p>测试代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 生成aruco标志</span></span>
<span class="line"><span>#include &quot;pch.h&quot;</span></span>
<span class="line"><span>#include &lt;opencv2/opencv.hpp&gt;</span></span>
<span class="line"><span>#include &lt;opencv2/aruco.hpp&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>using namespace cv;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 用于生成aruco图标</span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>	Mat markerImage;</span></span>
<span class="line"><span>	// 生成字典</span></span>
<span class="line"><span>	Ptr&lt;cv::aruco::Dictionary&gt; dictionary = aruco::getPredefinedDictionary(cv::aruco::DICT_6X6_250);</span></span>
<span class="line"><span>	// 生成图像</span></span>
<span class="line"><span>	// 参数分别为字典，第几个标识，图像输出大小为200X200,输出图像，标记边框的宽度</span></span>
<span class="line"><span>	aruco::drawMarker(dictionary, 33, 200, markerImage, 1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	imwrite(&quot;marker33.png&quot;, markerImage);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该代码主要基于OpenCV中的contrib/aruco模块生成aruco图标，将在运行文件目录下生成名为marker33.png的图片。如下图所示。如果成功生成marker33图片，表明opencv编译成功，能够使用contrib库。 <img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[常用工具] OpenCV_contrib库在windows下编译使用指南/out_29.jpg" alt="" loading="lazy"></p><h2 id="_4-参考" tabindex="-1"><a class="header-anchor" href="#_4-参考"><span>4 参考</span></a></h2><h3 id="_4-1-官方仓库" tabindex="-1"><a class="header-anchor" href="#_4-1-官方仓库"><span>4.1 官方仓库</span></a></h3><ul><li><blockquote><p><a href="https://github.com/opencv/opencv/releases/tag/4.4.0" target="_blank" rel="noopener noreferrer">OpenCV仓库</a></p></blockquote></li><li><blockquote><p><a href="https://github.com/opencv/opencv_contrib" target="_blank" rel="noopener noreferrer">OpenCV_contrib仓库</a></p></blockquote></li><li><blockquote><p><a href="https://github.com/opencv/opencv_3rdparty" target="_blank" rel="noopener noreferrer">opencv_3rdparty仓库</a></p></blockquote></li></ul><h3 id="_4-2-参考文档" tabindex="-1"><a class="header-anchor" href="#_4-2-参考文档"><span>4.2 参考文档</span></a></h3><ul><li><blockquote><p><a href="https://blog.csdn.net/chocolate_holic/article/details/107198666" target="_blank" rel="noopener noreferrer">windows下OpenCV库安装</a></p></blockquote></li><li><blockquote><p><a href="https://www.jianshu.com/p/011330a91b99" target="_blank" rel="noopener noreferrer">去除OpenCVGenSetupVars.cmake:54</a></p></blockquote></li><li><blockquote><p><a href="https://blog.csdn.net/u011736771/article/details/85960300" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u011736771/article/details/85960300</a></p></blockquote></li><li><blockquote><p><a href="https://blog.csdn.net/AlexWang30/article/details/99612188" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/AlexWang30/article/details/99612188</a></p></blockquote></li><li><blockquote><p><a href="https://github.com/opencv/opencv_contrib/issues/1301" target="_blank" rel="noopener noreferrer">https://github.com/opencv/opencv_contrib/issues/1301</a></p></blockquote></li><li><blockquote><p><a href="https://blog.csdn.net/haoqimao_hard/article/details/82049565" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/haoqimao_hard/article/details/82049565</a></p></blockquote></li></ul>`,82)]))}const p=n(s,[["render",r],["__file","2020-08-11-_常用工具_ OpenCV_contrib库在windows下编译使用指南.html.vue"]]),c=JSON.parse('{"path":"/blog/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/2020-08-11-_%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7_%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.html","title":"[常用工具] OpenCV_contrib库在windows下编译使用指南","lang":"zh-CN","frontmatter":{"date":"2020-08-11T20:53:25.000Z","category":["常用工具"],"tag":["常用工具","OpenCV"],"description":"[常用工具] OpenCV_contrib库在windows下编译使用指南 本文主要讲述opencv及opencv_contrib库在windows下基于vs2017编译安装指南。所用OpenCV版本为OpenCV4.4，编译平台为vs2017。 1 下载 在OpenCV的github仓库下载对应版本文件。链接地址为： OpenCV仓库 在OpenCV...","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/2020-08-11-_%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7_%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[常用工具] OpenCV_contrib库在windows下编译使用指南"}],["meta",{"property":"og:description","content":"[常用工具] OpenCV_contrib库在windows下编译使用指南 本文主要讲述opencv及opencv_contrib库在windows下基于vs2017编译安装指南。所用OpenCV版本为OpenCV4.4，编译平台为vs2017。 1 下载 在OpenCV的github仓库下载对应版本文件。链接地址为： OpenCV仓库 在OpenCV..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_1.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"常用工具"}],["meta",{"property":"article:tag","content":"OpenCV"}],["meta",{"property":"article:published_time","content":"2020-08-11T20:53:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[常用工具] OpenCV_contrib库在windows下编译使用指南\\",\\"image\\":[\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_1.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_2.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_3.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_4.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_5.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_6.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_7.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_8.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_9.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_10.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_11.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_12.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_13.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_14.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_15.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_16.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_17.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_18.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_19.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_20.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_21.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_22.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_23.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_24.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_25.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_26.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_27.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_28.jpg\\",\\"https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/%5B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%5D%20OpenCV_contrib%E5%BA%93%E5%9C%A8windows%E4%B8%8B%E7%BC%96%E8%AF%91%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/out_29.jpg\\"],\\"datePublished\\":\\"2020-08-11T20:53:25.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"1 下载","slug":"_1-下载","link":"#_1-下载","children":[]},{"level":2,"title":"2 编译与安装","slug":"_2-编译与安装","link":"#_2-编译与安装","children":[{"level":3,"title":"2.1 配置OpenCV标准库","slug":"_2-1-配置opencv标准库","link":"#_2-1-配置opencv标准库","children":[]},{"level":3,"title":"2.2 配置OpenCV_contrib库","slug":"_2-2-配置opencv-contrib库","link":"#_2-2-配置opencv-contrib库","children":[]},{"level":3,"title":"2.3 OpenCV需求配置","slug":"_2-3-opencv需求配置","link":"#_2-3-opencv需求配置","children":[]},{"level":3,"title":"2.4 编译OpenCV","slug":"_2-4-编译opencv","link":"#_2-4-编译opencv","children":[]},{"level":3,"title":"2.5 其他平台与语言环境的OpenCV_contrib库使用","slug":"_2-5-其他平台与语言环境的opencv-contrib库使用","link":"#_2-5-其他平台与语言环境的opencv-contrib库使用","children":[]}]},{"level":2,"title":"3 配置与使用","slug":"_3-配置与使用","link":"#_3-配置与使用","children":[{"level":3,"title":"3.1 配置","slug":"_3-1-配置","link":"#_3-1-配置","children":[]},{"level":3,"title":"3.2 测试","slug":"_3-2-测试","link":"#_3-2-测试","children":[]}]},{"level":2,"title":"4 参考","slug":"_4-参考","link":"#_4-参考","children":[{"level":3,"title":"4.1 官方仓库","slug":"_4-1-官方仓库","link":"#_4-1-官方仓库","children":[]},{"level":3,"title":"4.2 参考文档","slug":"_4-2-参考文档","link":"#_4-2-参考文档","children":[]}]}],"git":{},"readingTime":{"minutes":11.87,"words":3560},"filePathRelative":"blog/常用工具/2020-08-11-[常用工具] OpenCV_contrib库在windows下编译使用指南.md","localizedDate":"2020年8月12日","excerpt":"\\n<p>本文主要讲述opencv及opencv_contrib库在windows下基于vs2017编译安装指南。所用OpenCV版本为OpenCV4.4，编译平台为vs2017。</p>\\n<h2>1 下载</h2>\\n<p>在OpenCV的github仓库下载对应版本文件。链接地址为：\\n<a href=\\"https://github.com/opencv/opencv/releases/tag/4.4.0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">OpenCV仓库</a></p>\\n<p>在OpenCV_contrib的githuc仓库下载对应版本文件。链接地址为：\\n<a href=\\"https://github.com/opencv/opencv_contrib\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">OpenCV_contrib仓库</a></p>","autoDesc":true}');export{p as comp,c as data};
