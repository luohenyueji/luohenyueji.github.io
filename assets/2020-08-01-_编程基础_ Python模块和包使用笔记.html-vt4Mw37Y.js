const t=JSON.parse('{"key":"v-0a72966f","path":"/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-08-01-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20Python%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html","title":"[编程基础] Python模块和包使用笔记","lang":"zh-CN","frontmatter":{"date":"2020-08-01T21:45:14.000Z","category":["编程基础"],"tag":["Python","编程基础"],"description":"[编程基础] Python模块和包使用笔记 本文探讨Python模块和Python包，这两种机制有助于模块化编程。 模块化编程是指将大型笨拙的编程任务分解为单独的，较小的，更易于管理的子任务或模块的过程。然后可以像构建模块一样将各个模块拼凑在一起以创建更大的应用程序。 在大型应用程序中模块化代码有几个优点： 简单性：模块通常只关注问题的一个相对较小的部分，而不是关注手头的整个问题。如果你是在一个模块上工作，你将有一个更小的问题域来解决。这使得开发更容易，也不容易出错。 可维护性：模块通常经过设计，以便它们在不同问题域之间建立逻辑边界。如果以最小化相互依赖性的方式编写模块，则对单个模块的修改将对程序的其他部分产生影响的可能性降低。（您甚至可以在不了解模块外部应用程序的情况下，对模块进行更改。）这使得由许多程序员组成的团队在大型应用程序上协同工作更加可行。 可重用性：在单个模块中定义的功能可以很容易地被应用程序的其他部分重用（通过适当定义的接口）。这样就不需要重复代码了。 作用域：模块通常定义一个单独的名称空间，这有助于避免程序不同区域中的标识符之间发生冲突。","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-08-01-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20Python%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[编程基础] Python模块和包使用笔记"}],["meta",{"property":"og:description","content":"[编程基础] Python模块和包使用笔记 本文探讨Python模块和Python包，这两种机制有助于模块化编程。 模块化编程是指将大型笨拙的编程任务分解为单独的，较小的，更易于管理的子任务或模块的过程。然后可以像构建模块一样将各个模块拼凑在一起以创建更大的应用程序。 在大型应用程序中模块化代码有几个优点： 简单性：模块通常只关注问题的一个相对较小的部分，而不是关注手头的整个问题。如果你是在一个模块上工作，你将有一个更小的问题域来解决。这使得开发更容易，也不容易出错。 可维护性：模块通常经过设计，以便它们在不同问题域之间建立逻辑边界。如果以最小化相互依赖性的方式编写模块，则对单个模块的修改将对程序的其他部分产生影响的可能性降低。（您甚至可以在不了解模块外部应用程序的情况下，对模块进行更改。）这使得由许多程序员组成的团队在大型应用程序上协同工作更加可行。 可重用性：在单个模块中定义的功能可以很容易地被应用程序的其他部分重用（通过适当定义的接口）。这样就不需要重复代码了。 作用域：模块通常定义一个单独的名称空间，这有助于避免程序不同区域中的标识符之间发生冲突。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"落痕月极"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"编程基础"}],["meta",{"property":"article:published_time","content":"2020-08-01T21:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[编程基础] Python模块和包使用笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-01T21:45:14.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"1 Python模块概述","slug":"_1-python模块概述","link":"#_1-python模块概述","children":[]},{"level":2,"title":"2 使用说明","slug":"_2-使用说明","link":"#_2-使用说明","children":[{"level":3,"title":"2.1 模块搜索路径","slug":"_2-1-模块搜索路径","link":"#_2-1-模块搜索路径","children":[]},{"level":3,"title":"2.2 import声明","slug":"_2-2-import声明","link":"#_2-2-import声明","children":[]},{"level":3,"title":"2.3 dir()函数","slug":"_2-3-dir-函数","link":"#_2-3-dir-函数","children":[]},{"level":3,"title":"2.4 将模块作为脚本执行","slug":"_2-4-将模块作为脚本执行","link":"#_2-4-将模块作为脚本执行","children":[]},{"level":3,"title":"2.5 重新加载模块","slug":"_2-5-重新加载模块","link":"#_2-5-重新加载模块","children":[]}]},{"level":2,"title":"3 Python包","slug":"_3-python包","link":"#_3-python包","children":[{"level":3,"title":"3.1 Python包的使用","slug":"_3-1-python包的使用","link":"#_3-1-python包的使用","children":[]},{"level":3,"title":"3.2 包初始化","slug":"_3-2-包初始化","link":"#_3-2-包初始化","children":[]},{"level":3,"title":"3.3 从包中导入","slug":"_3-3-从包中导入","link":"#_3-3-从包中导入","children":[]},{"level":3,"title":"3.4 子包","slug":"_3-4-子包","link":"#_3-4-子包","children":[]}]},{"level":2,"title":"4 参考","slug":"_4-参考","link":"#_4-参考","children":[]}],"git":{},"readingTime":{"minutes":15.13,"words":4539},"filePathRelative":"blog/编程基础/学习笔记/2020-08-01-[编程基础] Python模块和包使用笔记.md","localizedDate":"2020年8月2日","excerpt":"<h1> [编程基础] Python模块和包使用笔记</h1>\\n<p>本文探讨Python模块和Python包，这两种机制有助于模块化编程。\\n模块化编程是指将大型笨拙的编程任务分解为单独的，较小的，更易于管理的子任务或模块的过程。然后可以像构建模块一样将各个模块拼凑在一起以创建更大的应用程序。</p>\\n<p>在大型应用程序中模块化代码有几个优点：</p>\\n<ul>\\n<li>简单性：模块通常只关注问题的一个相对较小的部分，而不是关注手头的整个问题。如果你是在一个模块上工作，你将有一个更小的问题域来解决。这使得开发更容易，也不容易出错。</li>\\n<li>可维护性：模块通常经过设计，以便它们在不同问题域之间建立逻辑边界。如果以最小化相互依赖性的方式编写模块，则对单个模块的修改将对程序的其他部分产生影响的可能性降低。（您甚至可以在不了解模块外部应用程序的情况下，对模块进行更改。）这使得由许多程序员组成的团队在大型应用程序上协同工作更加可行。</li>\\n<li>可重用性：在单个模块中定义的功能可以很容易地被应用程序的其他部分重用（通过适当定义的接口）。这样就不需要重复代码了。</li>\\n<li>作用域：模块通常定义一个单独的名称空间，这有助于避免程序不同区域中的标识符之间发生冲突。</li>\\n</ul>","autoDesc":true}');export{t as data};
