const t=JSON.parse('{"key":"v-aa841956","path":"/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/2020-05-29-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A81-%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E4%B8%8D%E5%90%8C%E6%96%B9%E5%BC%8F.html","title":"[编程基础] C++多线程入门1-创建线程的三种不同方式","lang":"zh-CN","frontmatter":{"date":"2020-05-29T16:30:50.000Z","category":["编程基础"],"tag":["编程基础"],"description":"原始C++标准仅支持单线程编程。新的C++标准(称为C++11或C++0x)于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++11标准。 [编程基础] C++多线程入门1-创建线程的三种不同方式 1 创建线程的三种不同方式 在本章中，我们将讨论如何使用std::thread在C++11中创建线程。 在每个C++应用程序中，都有一个默认的主线程，即main()函数。在C++11中，我们可以通过创建std::thread类的对象来创建其他线程。每个std::thread对象都可以与一个线程关联。因此我们需要引入头文件为：","head":[["meta",{"property":"og:url","content":"https://luohenyueji.github.io/blog/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8/2020-05-29-_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80_%20C__%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A81-%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E4%B8%8D%E5%90%8C%E6%96%B9%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"落痕月极的博客"}],["meta",{"property":"og:title","content":"[编程基础] C++多线程入门1-创建线程的三种不同方式"}],["meta",{"property":"og:description","content":"原始C++标准仅支持单线程编程。新的C++标准(称为C++11或C++0x)于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++11标准。 [编程基础] C++多线程入门1-创建线程的三种不同方式 1 创建线程的三种不同方式 在本章中，我们将讨论如何使用std::thread在C++11中创建线程。 在每个C++应用程序中，都有一个默认的主线程，即main()函数。在C++11中，我们可以通过创建std::thread类的对象来创建其他线程。每个std::thread对象都可以与一个线程关联。因此我们需要引入头文件为："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"落痕月极"}],["meta",{"property":"article:tag","content":"编程基础"}],["meta",{"property":"article:published_time","content":"2020-05-29T16:30:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"[编程基础] C++多线程入门1-创建线程的三种不同方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-29T16:30:50.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"落痕月极\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"1 创建线程的三种不同方式","slug":"_1-创建线程的三种不同方式","link":"#_1-创建线程的三种不同方式","children":[{"level":3,"title":"1.1 创建线程","slug":"_1-1-创建线程","link":"#_1-1-创建线程","children":[]},{"level":3,"title":"1.2 区分线程","slug":"_1-2-区分线程","link":"#_1-2-区分线程","children":[]},{"level":3,"title":"1.3 参考","slug":"_1-3-参考","link":"#_1-3-参考","children":[]}]}],"git":{},"readingTime":{"minutes":3.17,"words":952},"filePathRelative":"blog/编程基础/C++多线程入门/2020-05-29-[编程基础] C++多线程入门1-创建线程的三种不同方式.md","localizedDate":"2020年5月30日","excerpt":"<p>原始C++标准仅支持单线程编程。新的C++标准(称为C++11或C++0x)于2011年发布。在C++11中，引入了新的线程库。因此运行本文程序需要C++至少符合C++11标准。</p>\\n<h1> [编程基础] C++多线程入门1-创建线程的三种不同方式</h1>\\n<h2> 1 创建线程的三种不同方式</h2>\\n<p>在本章中，我们将讨论如何使用std::thread在C++11中创建线程。<br>\\n在每个C++应用程序中，都有一个默认的主线程，即main()函数。在C++11中，我们可以通过创建std::thread类的对象来创建其他线程。每个std::thread对象都可以与一个线程关联。因此我们需要引入头文件为：</p>","autoDesc":true}');export{t as data};
