import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-MsA2k2kn.js";const l={},u=n("h1",{id:"深度学习-python人脸识别库deepface使用教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#深度学习-python人脸识别库deepface使用教程","aria-hidden":"true"},"#"),s(" [深度学习] Python人脸识别库Deepface使用教程")],-1),r={href:"https://github.com/serengil/deepface",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/serengil/deepface_models/releases",target:"_blank",rel:"noopener noreferrer"},k=e("<p>安装方式： pip install deepface -i https://pypi.tuna.tsinghua.edu.cn/simple</p><p>deepface主要提供以下人脸识别算法，具体对应接口为：</p><ul><li>DeepFace.verify：人脸验证</li><li>DeepFace.find：人脸识别</li><li>DeepFace.analyze：人脸属性分析</li><li>DeepFace.detectFace：人脸检测</li><li>DeepFace.represent：人脸特征提取</li><li>DeepFace.stream：人脸实时分析</li></ul><p>总体而言，这个项目的人脸识别模型识别效果还行，但是离工程应用还是有一定的距离，不过还是非常推荐学习该库内部代码。</p><p><strong>某些网站会判定本文人脸图片违规，这是网站识别算法自身问题。</strong></p><p>本文所有算法展示效果和代码见：</p>",6),m={href:"https://github.com/luohenyueji/Python-Study-Notes/tree/master/Deep%20learning/face%20detection",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/LuohenYJ/article/details/123144785",target:"_blank",rel:"noopener noreferrer"},v=e(`<h2 id="_0-数据准备" tabindex="-1"><a class="header-anchor" href="#_0-数据准备" aria-hidden="true">#</a> 0 数据准备</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## deep库的导入就一行代码</span>
<span class="token keyword">from</span> deepface <span class="token keyword">import</span> DeepFace
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDraw
<span class="token keyword">import</span> os
<span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所使用的数据集为网络明星图片，共五个明星，每个明星三张人脸，数据集的路径如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>root
├── images
│   ├── baijingting
│   │   ├── 0000.jpg
│   │   ├── 0001.jpg
│   ├── jiangwei
│   │   ├── 0000.jpg
│
├── code
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据展示结果如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## --- 展示图片</span>
<span class="token keyword">def</span> <span class="token function">show_img</span><span class="token punctuation">(</span>imgs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> img_names<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    imgs_count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>imgs_count<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> imgs_count<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
        ax<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>img_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        ax<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        ax<span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span>h_pad<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>


img_path <span class="token operator">=</span> <span class="token string">&quot;images&quot;</span>
<span class="token keyword">for</span> person_dir <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    img_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>img_path<span class="token punctuation">,</span> person_dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        imgs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>img_path<span class="token punctuation">,</span> person_dir<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        img_names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>person_dir <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> <span class="token builtin">file</span><span class="token punctuation">)</span>
    show_img<span class="token punctuation">(</span>imgs<span class="token punctuation">,</span> img_names<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Face/[深度学习] Python人脸识别库Deepface使用教程/output_4_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Face/[深度学习] Python人脸识别库Deepface使用教程/output_4_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Face/[深度学习] Python人脸识别库Deepface使用教程/output_4_2.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Face/[深度学习] Python人脸识别库Deepface使用教程/output_4_3.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Face/[深度学习] Python人脸识别库Deepface使用教程/output_4_4.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_1-人脸验证deepface-verify" tabindex="-1"><a class="header-anchor" href="#_1-人脸验证deepface-verify" aria-hidden="true">#</a> 1 人脸验证DeepFace.verify</h2><p>此函数用于验证图像对是同一个人还是不同的人。函数接口为：</p><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>verify(img1_path, img2_path = &#39;&#39;, model_name = &#39;VGG-Face&#39;, distance_metric = &#39;cosine&#39;, model = None, enforce_detection = True, detector_backend = &#39;opencv&#39;, align = True, prog_bar = True, normalization = &#39;base&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入参数介绍：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>img1_path：传递的图像路径、numpy数组（BGR）或based64编码图像
model_name：模型名，支持VGG-Face, Facenet, OpenFace, DeepFace, DeepID, Dlib, ArcFace，Ensemble等
distance_metric：度量标准，支持cosine, euclidean, euclidean_l2
model：构建deepface模型。每次调用verify函数都会重新建立人脸识别模型。可以选择传递预构建的人脸识别模型。如DeepFace.build_model(&#39;VGG-Face&#39;)构建模型
enforce_detection：如果在图像中检测不到任何人脸，则验证函数将返回异常。将此设置为False将不会出现此异常
detector_backend：人脸识别算法后端，支持retinaface, mtcnn, opencv, ssd，dlib
align：是否人脸对齐
prog_bar：启用或禁用进度条
normalization：人脸归一化的方式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果介绍：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>如果img1_path是输入一张人脸就是返回一个字典，如果输入列表则返回一个字典列表。具体参数如下：
verified：是否同一个人
distance：人脸距离，越小越相似
max_threshold_to_verify：判断为同一个人的阈值
model: 所用模型
similarity_metric: 相似性度量标准
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各识别模型的精度如下，LFW和YTF都是小型数据集。Human-beings表示人类识别精度。</p><table><thead><tr><th>Model</th><th>LFW Score</th><th>YTF Score</th></tr></thead><tbody><tr><td>Facenet512</td><td>99.65%</td><td>-</td></tr><tr><td>SFace</td><td>99.60%</td><td>-</td></tr><tr><td>ArcFace</td><td>99.41%</td><td>-</td></tr><tr><td>Dlib</td><td>99.38 %</td><td>-</td></tr><tr><td>Facenet</td><td>99.20%</td><td>-</td></tr><tr><td>VGG-Face</td><td>98.78%</td><td>97.40%</td></tr><tr><td><strong>Human-beings</strong></td><td><strong>97.53%</strong></td><td>-</td></tr><tr><td>OpenFace</td><td>93.80%</td><td>-</td></tr><tr><td>DeepID</td><td>-</td><td>97.05%</td></tr></tbody></table><p><strong>demo1</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 模型名</span>
models_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;VGG-Face&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Facenet&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Facenet512&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OpenFace&quot;</span><span class="token punctuation">,</span>
               <span class="token string">&quot;DeepFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DeepID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ArcFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dlib&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ensemble&#39;</span><span class="token punctuation">]</span>

model_name <span class="token operator">=</span> models_name<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
result <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>img1_path<span class="token operator">=</span><span class="token string">&quot;images/baijingting/0001.jpg&quot;</span><span class="token punctuation">,</span>
                         img2_path<span class="token operator">=</span><span class="token string">&quot;images/pengyuyan/0001.jpg&quot;</span><span class="token punctuation">,</span>
                         model_name<span class="token operator">=</span>model_name<span class="token punctuation">)</span>
<span class="token comment">## 展示结果，两个人不是同一个人</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>1/1 [==============================] - 0s 170ms/step
1/1 [==============================] - 0s 20ms/step
{&#39;verified&#39;: False, &#39;distance&#39;: 0.0751386867894902, &#39;threshold&#39;: 0.015, &#39;model&#39;: &#39;DeepID&#39;, &#39;detector_backend&#39;: &#39;opencv&#39;, &#39;similarity_metric&#39;: &#39;cosine&#39;}
</code></pre><p><strong>demo2</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>models_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;VGG-Face&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Facenet&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Facenet512&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OpenFace&quot;</span><span class="token punctuation">,</span>
               <span class="token string">&quot;DeepFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DeepID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ArcFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dlib&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ensemble&#39;</span><span class="token punctuation">]</span>
<span class="token comment">## 提前加载模型，避免重复加载</span>
model_name <span class="token operator">=</span> models_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment">## 创建模型</span>
model <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>build_model<span class="token punctuation">(</span>model_name<span class="token punctuation">)</span>
<span class="token comment">## 列表中每一个子项表示用于对比的图像</span>
img_paths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;images/baijingting/0000.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;images/baijingting/0001.jpg&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
             <span class="token punctuation">[</span><span class="token string">&quot;images/baijingting/0000.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;images/zhaoliying/0001.jpg&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment">## 度量标准</span>
metrics <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;cosine&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;euclidean&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;euclidean_l2&quot;</span><span class="token punctuation">]</span>

results <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>img_paths<span class="token punctuation">,</span>
                          model_name<span class="token operator">=</span>model_name<span class="token punctuation">,</span>
                          model<span class="token operator">=</span>model<span class="token punctuation">,</span>
                          distance_metric<span class="token operator">=</span>metrics<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                          prog_bar<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token comment">## 展示结果</span>
<span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>1/1 [==============================] - 2s 2s/step
1/1 [==============================] - 0s 52ms/step
1/1 [==============================] - 0s 55ms/step
1/1 [==============================] - 0s 66ms/step
(&#39;pair_1&#39;, {&#39;verified&#39;: True, &#39;distance&#39;: 0.6328494898310356, &#39;threshold&#39;: 0.8, &#39;model&#39;: &#39;Facenet&#39;, &#39;detector_backend&#39;: &#39;opencv&#39;, &#39;similarity_metric&#39;: &#39;euclidean_l2&#39;})
(&#39;pair_2&#39;, {&#39;verified&#39;: False, &#39;distance&#39;: 1.1700473293978308, &#39;threshold&#39;: 0.8, &#39;model&#39;: &#39;Facenet&#39;, &#39;detector_backend&#39;: &#39;opencv&#39;, &#39;similarity_metric&#39;: &#39;euclidean_l2&#39;})
</code></pre><h2 id="_2-人脸识别deepface-find" tabindex="-1"><a class="header-anchor" href="#_2-人脸识别deepface-find" aria-hidden="true">#</a> 2 人脸识别DeepFace.find</h2><p>此函数用于从数据集中检索当前人脸相似的图片。函数接口为：</p><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>find(img_path, db_path, model_name =&#39;VGG-Face&#39;, distance_metric = &#39;cosine&#39;, model = None, enforce_detection = True, detector_backend = &#39;opencv&#39;, align = True, prog_bar = True, normalization = &#39;base&#39;, silent=False):
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输入参数和verify差不多，主要多了人脸检索库路径地址：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db_path：检索库路径，
silent: 是否静默显示数据，
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果介绍：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>一个包含相似图像的pandas dataframe数据体，包括图像路径和距离值，
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>models_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;VGG-Face&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Facenet&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Facenet512&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OpenFace&quot;</span><span class="token punctuation">,</span>
               <span class="token string">&quot;DeepFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DeepID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ArcFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dlib&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ensemble&#39;</span><span class="token punctuation">]</span>

<span class="token comment">## db_path是库文件地址</span>
<span class="token comment">## 第一次会提取各个图像的特征，并保存到本地pkl文件以供下次直接调用</span>
result <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>find<span class="token punctuation">(</span>img_path<span class="token operator">=</span><span class="token string">&quot;images/baijingting/0000.jpg&quot;</span><span class="token punctuation">,</span>
                       db_path<span class="token operator">=</span><span class="token string">&quot;images&quot;</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span>models_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>1/1 [==============================] - 0s 55ms/step
1/1 [==============================] - 0s 64ms/step
1/1 [==============================] - 0s 63ms/step
1/1 [==============================] - 0s 61ms/step
1/1 [==============================] - 0s 64ms/step
1/1 [==============================] - 0s 58ms/step
1/1 [==============================] - 0s 55ms/step
1/1 [==============================] - 0s 65ms/step
1/1 [==============================] - 0s 59ms/step
1/1 [==============================] - 0s 55ms/step
1/1 [==============================] - 0s 51ms/step
1/1 [==============================] - 0s 52ms/step
1/1 [==============================] - 0s 53ms/step
1/1 [==============================] - 0s 52ms/step
1/1 [==============================] - 0s 55ms/step
Representations stored in  images / representations_facenet.pkl  file. Please delete this file when you add new identities in your database.
1/1 [==============================] - 0s 56ms/step
find function lasts  3.254298448562622  seconds
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 展示结果，第一个是识别图像本身，后面两个是相似图片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>                      identity  Facenet_cosine
0  images\\baijingting/0000.jpg   -2.220446e-16
1  images\\baijingting/0001.jpg    2.002492e-01
2  images\\baijingting/0002.jpg    2.328966e-01
</code></pre><h2 id="_3-人脸属性分析deepface-analyze" tabindex="-1"><a class="header-anchor" href="#_3-人脸属性分析deepface-analyze" aria-hidden="true">#</a> 3 人脸属性分析DeepFace.analyze</h2><p>此函数用于分析当前人脸的面部属性，包括年龄，性别，面部表情（包括愤怒、恐惧、正常、悲伤、厌恶、快乐和惊讶），种族（包括亚洲人、白人、中东人、印度人、拉丁裔和黑人）。函数接口为：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>analyze<span class="token punctuation">(</span>img_path<span class="token punctuation">,</span> actions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;emotion&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gender&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;race&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> models <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> enforce_detection <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> detector_backend <span class="token operator">=</span> <span class="token string">&#39;opencv&#39;</span><span class="token punctuation">,</span> prog_bar <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入参数和verify差不多，主要多了属性设置actions：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>actions：识别属性，包括age, gender, emotion, race
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果介绍：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>如果img_path是输入一张人脸就是返回一个字典，如果输入列表则返回一个字典列表。具体参数如下：
region：人脸坐标，wywh格式
age：年龄
gender：性别
dominant_emotion: 主导情绪，也就是情绪识别结果
emotion：各个情绪度量值，值越大表示越倾向
dominant_race：种族结果
race：各个种族度量值

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 输入检测图像，这里只识别情绪，因为其他模型实在太大了，下载下来要很久。</span>
result <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>analyze<span class="token punctuation">(</span>img_path <span class="token operator">=</span> <span class="token string">&quot;images/jiangwen/0000.jpg&quot;</span><span class="token punctuation">,</span> actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;emotion&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>1/1 [==============================] - 0s 113ms/step
{&#39;emotion&#39;: {&#39;angry&#39;: 2.147514166495057e-06, &#39;disgust&#39;: 3.124029827739067e-14, &#39;fear&#39;: 1.990160924947304e-06, &#39;happy&#39;: 99.9697208404541, &#39;sad&#39;: 1.9864262412738753e-05, &#39;surprise&#39;: 0.01537421194370836, &#39;neutral&#39;: 0.014887277211528271}, &#39;dominant_emotion&#39;: &#39;happy&#39;, &#39;region&#39;: {&#39;x&#39;: 198, &#39;y&#39;: 34, &#39;w&#39;: 185, &#39;h&#39;: 185}}
</code></pre><p>数据可视化看看结果</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span> <span class="token string">&quot;images/jiangwen/0000.jpg&quot;</span><span class="token punctuation">)</span>
<span class="token comment">## 坐标位置</span>
x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">&#39;region&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token string">&#39;region&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token string">&#39;region&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token string">&#39;region&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">]</span>
draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>
<span class="token comment">## 画框</span>
draw<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> outline<span class="token operator">=</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;表情：{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">&quot;dominant_emotion&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
show_img<span class="token punctuation">(</span><span class="token punctuation">[</span>im<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;jiangwen&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>表情：happy
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Face/[深度学习] Python人脸识别库Deepface使用教程/output_16_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_4-人脸检测deepface-detectface" tabindex="-1"><a class="header-anchor" href="#_4-人脸检测deepface-detectface" aria-hidden="true">#</a> 4 人脸检测DeepFace.detectFace</h2><p>此函数用于检测人脸，如果图像中有多个人脸只会返回一个，函数接口为：</p><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>detectFace(img_path, target_size = (224, 224), detector_backend = &#39;opencv&#39;, enforce_detection = True, align = True)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入参数和verify差不多，主要多了可以设置返回图像的尺寸的参数target_size，输出返回一张RGB的numpy数组图像</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>result <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>detectFace<span class="token punctuation">(</span>img_path <span class="token operator">=</span> <span class="token string">&quot;images/zhangziyi/0000.jpg&quot;</span><span class="token punctuation">,</span>align <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
show_img<span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;zhangziyi&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>(224, 224, 3)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Face/[深度学习] Python人脸识别库Deepface使用教程/output_18_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 不进行人脸对齐</span>
result <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>detectFace<span class="token punctuation">(</span>img_path <span class="token operator">=</span> <span class="token string">&quot;images/zhangziyi/0000.jpg&quot;</span><span class="token punctuation">,</span>align <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
show_img<span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;zhangziyi&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>(224, 224, 3)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/Python-Study-Notes/Face/[深度学习] Python人脸识别库Deepface使用教程/output_19_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_5-人脸特征提取deepface-represent" tabindex="-1"><a class="header-anchor" href="#_5-人脸特征提取deepface-represent" aria-hidden="true">#</a> 5 人脸特征提取DeepFace.represent</h2><p>该函数用于将面部图像表示为特征向量，函数接口为：</p><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>represent(img_path, model_name = &#39;VGG-Face&#39;, model = None, enforce_detection = True, detector_backend = &#39;opencv&#39;, align = True, normalization = &#39;base&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入参数和verify差不多。输出返回图像特征多维向量，特征向量的维度根据模型而变化。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>models_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;VGG-Face&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Facenet&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Facenet512&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OpenFace&quot;</span><span class="token punctuation">,</span>
               <span class="token string">&quot;DeepFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DeepID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ArcFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dlib&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ensemble&#39;</span><span class="token punctuation">]</span>


result <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>represent<span class="token punctuation">(</span>img_path<span class="token operator">=</span><span class="token string">&quot;images/baijingting/0000.jpg&quot;</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span>models_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;特征维度为：{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>1/1 [==============================] - 0s 61ms/step
特征维度为：128
</code></pre><p>当然提取特征可以自己计算距离，设置阈值。示例如下。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 计算l2距离</span>
<span class="token keyword">def</span> <span class="token function">l2_distance</span><span class="token punctuation">(</span>input1<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> input2<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
    <span class="token comment">## 手动计算 np.sqrt(np.sum((result1- result2)**2))</span>
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>input1<span class="token operator">-</span>input2<span class="token punctuation">)</span>

<span class="token comment">## 计算l1距离</span>
<span class="token keyword">def</span> <span class="token function">l1_distance</span><span class="token punctuation">(</span>input1<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> input2<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
    <span class="token comment">## 手动计算 np.sum(abs(input1-input2))</span>
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>input1<span class="token operator">-</span>input2<span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">## 计算余弦距离</span>
<span class="token keyword">def</span> <span class="token function">IP_distance</span><span class="token punctuation">(</span>input1<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> input2<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>input1<span class="token punctuation">,</span> input2<span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>input1<span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>input2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>models_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;VGG-Face&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Facenet&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Facenet512&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OpenFace&quot;</span><span class="token punctuation">,</span>
               <span class="token string">&quot;DeepFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DeepID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ArcFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dlib&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SFace&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ensemble&#39;</span><span class="token punctuation">]</span>

<span class="token comment">## 提前加载模型，避免重复加载</span>
model_name <span class="token operator">=</span> models_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment">## 创建模型</span>
model <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>build_model<span class="token punctuation">(</span>model_name<span class="token punctuation">)</span>

<span class="token comment">## res1和res3为同一个人</span>
res1 <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>represent<span class="token punctuation">(</span>
    img_path<span class="token operator">=</span><span class="token string">&quot;images/baijingting/0000.jpg&quot;</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span>models_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">)</span>
res2 <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>represent<span class="token punctuation">(</span>
    img_path<span class="token operator">=</span><span class="token string">&quot;images/zhangziyi/0000.jpg&quot;</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span>models_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">)</span>
res3 <span class="token operator">=</span> DeepFace<span class="token punctuation">.</span>represent<span class="token punctuation">(</span>
    img_path<span class="token operator">=</span><span class="token string">&quot;images/baijingting/0001.jpg&quot;</span><span class="token punctuation">,</span> model_name<span class="token operator">=</span>models_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> model<span class="token operator">=</span>model<span class="token punctuation">)</span>

<span class="token comment">## 转换为numpy类型</span>
res1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>res1<span class="token punctuation">)</span>
res2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>res2<span class="token punctuation">)</span>
res3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>res3<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;res1与res2的余弦距离为：{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>IP_distance<span class="token punctuation">(</span>res1<span class="token punctuation">,</span>res2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;res1与res3的余弦距离为：{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>IP_distance<span class="token punctuation">(</span>res1<span class="token punctuation">,</span>res3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;res1与res2的l2距离为：{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l2_distance<span class="token punctuation">(</span>res1<span class="token punctuation">,</span>res2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;res1与res3的l2距离为：{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l2_distance<span class="token punctuation">(</span>res1<span class="token punctuation">,</span>res3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;res1与res2的l1距离为：{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l1_distance<span class="token punctuation">(</span>res1<span class="token punctuation">,</span>res2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;res1与res3的l1距离为：{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l1_distance<span class="token punctuation">(</span>res1<span class="token punctuation">,</span>res3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>1/1 [==============================] - 0s 54ms/step
1/1 [==============================] - 0s 62ms/step
1/1 [==============================] - 0s 52ms/step
res1与res2的余弦距离为：0.6868675298615137
res1与res3的余弦距离为：0.2002492383897012
res1与res2的l2距离为：12.135816884638682
res1与res3的l2距离为：6.657409646028565
res1与res2的l1距离为：110.3180431430228
res1与res3的l1距离为：58.20380371063948
</code></pre><h2 id="_6-参考" tabindex="-1"><a class="header-anchor" href="#_6-参考" aria-hidden="true">#</a> 6 参考</h2>`,71),b={href:"https://github.com/serengil/deepface",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/serengil/deepface_models/releases",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.csdn.net/LuohenYJ/article/details/123144785",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/luohenyueji/Python-Study-Notes/tree/master/Deep%20learning/face%20detection",target:"_blank",rel:"noopener noreferrer"};function f(q,F){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("deepface是一个Python轻量级人脸识别和人脸属性分析（年龄、性别、情感和种族）框架，提供非常简单的接口就可以实现各种人脸识别算法的应用。deepface官方仓库为"),n("a",r,[s("deepface"),t(a)]),s("。deepface提供了多种模型，模型下载地址为"),n("a",d,[s("deepface_models"),t(a)]),s("。")]),k,n("p",null,[s("github: "),n("a",m,[s("Python-Study-Notes"),t(a)])]),n("p",null,[s("此外可以看一看另外一个人脸识别库，功能更加齐全："),n("a",g,[s("[深度学习] Python人脸识别库face_recognition使用教程"),t(a)])]),v,n("ul",null,[n("li",null,[n("a",b,[s("deepface"),t(a)])]),n("li",null,[n("a",h,[s("deepface_models"),t(a)])]),n("li",null,[n("a",_,[s("[深度学习] Python人脸识别库face_recognition使用教程"),t(a)])]),n("li",null,[n("a",y,[s("Python-Study-Notes"),t(a)])])])])}const D=p(l,[["render",f],["__file","2022-07-02-_深度学习_ Python人脸识别库Deepface使用教程.html.vue"]]);export{D as default};
