import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c,a as n,b as a,d as p,e as l}from"./app-MsA2k2kn.js";const u={},i=l(`<h1 id="编程基础-python中args和kwargs参数的使用" tabindex="-1"><a class="header-anchor" href="#编程基础-python中args和kwargs参数的使用" aria-hidden="true">#</a> [编程基础] Python中args和kwargs参数的使用</h1><p>本文主要介绍Python中*args和**kwargs参数的使用</p><h2 id="_1-使用" tabindex="-1"><a class="header-anchor" href="#_1-使用" aria-hidden="true">#</a> 1 使用</h2><p>在Python中，定义函数时可以使用两个特殊符号，以允许它们接受可变数量的参数。这两个特殊符号为*和**。通常*和args一起使用，**和kwargs一起使用。事实上args和kwargs可以用任何名称替代，之所以用args和kwargs仅仅是为了遵从通俗约定。args为arguments的缩写，表示多个参数。kwargs为 keyword arguments 的缩写，表示多个关键字参数。</p><p>Python中，（*）会把接收到的参数转为一个元组，而（**）会把接收到的参数转为一个字典。所以*args表示将传入多个参数（包括0个参数）变为元组，**kwargs表示将传入多个带名称的参数（包括0个参数）变为字典。具体例子下面分别介绍。</p><p><strong>*args的使用</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 打印参数类型</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 打印参数</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
    
func<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 将一个列表变为元组，需要在传入参数的前面加上一个*</span>
func<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;class &#39;tuple&#39;&gt;
(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
&lt;class &#39;tuple&#39;&gt;
([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;],)
&lt;class &#39;tuple&#39;&gt;
(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
</code></pre><p><strong>**kwargs的使用</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 转为字典</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{} = {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
func<span class="token punctuation">(</span>param1<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> param2<span class="token operator">=</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> param3<span class="token operator">=</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 也可以直接传入一个字典</span>
dicts<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;param1&#39;</span><span class="token punctuation">:</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;param2&#39;</span><span class="token punctuation">:</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;param3&#39;</span><span class="token punctuation">:</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span>
func<span class="token punctuation">(</span><span class="token operator">**</span>dicts<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>&lt;class &#39;dict&#39;&gt;
param1 = a
param2 = b
param3 = c
&lt;class &#39;dict&#39;&gt;
param1 = a
param2 = b
param3 = c
</code></pre><p><strong>*args和**kwargs共同使用</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;args:&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;kwargs:&quot;</span><span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>
fun<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> param1<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> param2<span class="token operator">=</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> param3<span class="token operator">=</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span>
fun<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> param1<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> param2<span class="token operator">=</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> param3<span class="token operator">=</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>args: (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
kwargs: {&#39;param1&#39;: &#39;a&#39;, &#39;param2&#39;: &#39;b&#39;, &#39;param3&#39;: &#39;c&#39;}
args: (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)
kwargs: {&#39;param1&#39;: &#39;a&#39;, &#39;param2&#39;: &#39;b&#39;, &#39;param3&#39;: &#39;c&#39;}
</code></pre><p>此外也可以传入其他单独参数名，如下面的例子，传入name和age参数。name参数在第一位，不输入参数名name也会将第一个输入参数视为name。函数中间的参数如age，则需要指定参数名。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;name:&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;args:&quot;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;age:&quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;kwargs:&quot;</span><span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>

fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
fun<span class="token punctuation">(</span><span class="token string">&quot;helloworld&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>name: 1
args: (2, 3)
age: None
kwargs: {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}
name: helloworld
args: (1, 2, 3)
age: 12
kwargs: {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}
</code></pre><p>**但是要注意的是，*args必须放在**kwargs前面且**kwarg要位于所有参数最后，因为非默认参数必须在默认参数之前处理，不然会出错。</p><h2 id="_2-拓展" tabindex="-1"><a class="header-anchor" href="#_2-拓展" aria-hidden="true">#</a> 2 拓展</h2><p>事实上，在Python3.5以上版本，*和**多了一个功能叫做解包(unpacking)。解包的意思就是将迭代对象里面的元素逐个取出来。迭代的意思就是，当对元组，列表，字典，集合，字符串使用for循环语句的时候，可以依次拿到里面的数据，这样的过程称为遍历，也叫迭代。通过解包就是将元组，列表，字典，集合，字符串每一个单独的值拆分开来。其中*可以用于任何一种Python迭代对象，**只能用于字典。如下面的例子通过*解包对象，输出不再是迭代对象的本身，而是迭代对象的内容。<strong>但是这类语言结构最好不要使用，可读性较差。</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 元组解包</span>
my_tuple<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>my_tuple<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>1 2 3
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 列表解包</span>
my_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>my_list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>1 2 3
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字典解包</span>
my_dir<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>my_dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>a b
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字符串解包</span>
my_string<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>my_string<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>h e l l o
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 集合解包</span>
my_set<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>my_set<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>e l o h
</code></pre><p>除此之外，还可以单独解包某个值如下所示</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
 
a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> c <span class="token operator">=</span> my_list
 
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>1
[2, 3, 4]
5
</code></pre><p><strong>此外解包符还能用于迭代器的合并</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 列表合并</span>
my_list1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
my_list2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
my_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">*</span>my_list1<span class="token punctuation">,</span><span class="token operator">*</span>my_list2<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[1, 2, 3, 4, 5]
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字典合并</span>
my_dir1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>
my_dir2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span>
my_dir<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">**</span>my_dir1<span class="token punctuation">,</span> <span class="token operator">**</span>my_dir2<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5}
</code></pre><p><strong>对于字符串，*也能进行一系列的拆分</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将字符串变为列表</span>
hello <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>[&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]
</code></pre><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将字符串变为字典</span>
hello <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">*</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>{&#39;e&#39;, &#39;l&#39;, &#39;o&#39;, &#39;h&#39;}
</code></pre><h2 id="_3-参考" tabindex="-1"><a class="header-anchor" href="#_3-参考" aria-hidden="true">#</a> 3 参考</h2>`,44),r={href:"http://markmiyashita.com/blog/python-args-and-kwargs/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.cnblogs.com/beiluowuzheng/p/8461518.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.cnblogs.com/abclife/p/11483372.html",target:"_blank",rel:"noopener noreferrer"};function m(g,v){const s=e("ExternalLinkIcon");return o(),c("div",null,[i,n("blockquote",null,[n("p",null,[n("a",r,[a("Python *args and **kwargs"),p(s)])])]),n("blockquote",null,[n("p",null,[n("a",k,[a("Python中*和**的区别"),p(s)])])]),n("blockquote",null,[n("p",null,[n("a",d,[a("Python中的args和kwargs"),p(s)])])])])}const h=t(u,[["render",m],["__file","2020-10-14-_编程基础_ Python中args和kwargs参数的使用.html.vue"]]);export{h as default};
