import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c,a as n,b as s,d as t,e}from"./app-MsA2k2kn.js";const l={},r=n("h1",{id:"机器学习-yellowbrick使用笔记6-分类可视化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#机器学习-yellowbrick使用笔记6-分类可视化","aria-hidden":"true"},"#"),s(" [机器学习] Yellowbrick使用笔记6-分类可视化")],-1),u={href:"https://github.com/luohenyueji/Python-Study-Notes/tree/master/Documents/Yellowbrick%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0",target:"_blank",rel:"noopener noreferrer"},d=n("strong",null,"代码下载",-1),k=e(`<p>分类分数可视化工具显示类之间的差异以及一些特定于分类器的可视化评估。我们目前已经实施了以下分类器评估：</p><ul><li>分类报告Classification Report：视觉分类报告，将每个类别的精度，召回率和F1显示为热图。</li><li>混淆矩阵Confusion Matrix：多类分类中混淆矩阵的热图视图。</li><li>ROCAUC: 绘制训练器的工作特性和曲线下面积</li><li>Precision-Recall曲线：绘制不同概率阈值的精度和召回率。</li><li>类平衡：目视检查目标，以向最终评估者显示每个类的支持。</li><li>类预测错误：混淆矩阵的另一种选择，它显示实际类和预测类之间的支持和差异。</li><li>辨别阈值：显示使用辨别概率或分数的二进制分类器在所有阈值上的精确度、召回率、F1和队列率。</li></ul><p>本文如果数据集下载不下来，查看下面地址，然后放入yellowbrick安装目录\\datasets\\fixtures文件夹:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
  &quot;bikeshare&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/bikeshare.zip&quot;,
    &quot;signature&quot;: &quot;4ed07a929ccbe0171309129e6adda1c4390190385dd6001ba9eecc795a21eef2&quot;
  },
  &quot;hobbies&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/hobbies.zip&quot;,
    &quot;signature&quot;: &quot;6114e32f46baddf049a18fb05bad3efa98f4e6a0fe87066c94071541cb1e906f&quot;
  },
  &quot;concrete&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/concrete.zip&quot;,
    &quot;signature&quot;: &quot;5807af2f04e14e407f61e66a4f3daf910361a99bb5052809096b47d3cccdfc0a&quot;
  },
  &quot;credit&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/credit.zip&quot;,
    &quot;signature&quot;: &quot;2c6f5821c4039d70e901cc079d1404f6f49c3d6815871231c40348a69ae26573&quot;
  },
  &quot;energy&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/energy.zip&quot;,
    &quot;signature&quot;: &quot;174eca3cd81e888fc416c006de77dbe5f89d643b20319902a0362e2f1972a34e&quot;
  },
  &quot;game&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/game.zip&quot;,
    &quot;signature&quot;: &quot;ce799d1c55fcf1985a02def4d85672ac86c022f8f7afefbe42b20364fba47d7a&quot;
  },
  &quot;mushroom&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/mushroom.zip&quot;,
    &quot;signature&quot;: &quot;f79fdbc33b012dabd06a8f3cb3007d244b6aab22d41358b9aeda74417c91f300&quot;
  },
  &quot;occupancy&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/occupancy.zip&quot;,
    &quot;signature&quot;: &quot;0b390387584586a05f45c7da610fdaaf8922c5954834f323ae349137394e6253&quot;
  },
  &quot;spam&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/spam.zip&quot;,
    &quot;signature&quot;: &quot;000309ac2b61090a3001de3e262a5f5319708bb42791c62d15a08a2f9f7cb30a&quot;
  },
  &quot;walking&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/walking.zip&quot;,
    &quot;signature&quot;: &quot;7a36615978bc3bb74a2e9d5de216815621bd37f6a42c65d3fc28b242b4d6e040&quot;
  },
  &quot;nfl&quot;: {
    &quot;url&quot;: &quot;https://s3.amazonaws.com/ddl-data-lake/yellowbrick/v1.0/nfl.zip&quot;,
    &quot;signature&quot;: &quot;4989c66818ea18217ee0fe3a59932b963bd65869928c14075a5c50366cb81e1f&quot;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 多行输出</span>
<span class="token keyword">from</span> IPython<span class="token punctuation">.</span>core<span class="token punctuation">.</span>interactiveshell <span class="token keyword">import</span> InteractiveShell
InteractiveShell<span class="token punctuation">.</span>ast_node_interactivity <span class="token operator">=</span> <span class="token string">&quot;all&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[toc]</p><h2 id="_1-分类报告classification-report" tabindex="-1"><a class="header-anchor" href="#_1-分类报告classification-report" aria-hidden="true">#</a> 1 分类报告Classification Report</h2><p>分类报告可视化工具显示模型的精度、召回率、F1和支持度得分。为了便于解释和发现问题，该报告将数字分数与彩色编码热图相结合。所有热图都在（0.0，1.0）范围内，以便于不同分类报告之间的分类模型比较。</p><table><thead><tr><th>可视化器</th><th>ClassificationReport</th></tr></thead><tbody><tr><td>快速使用方法</td><td>classification_report()</td></tr><tr><td>模型</td><td>分类</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><h3 id="_1-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-1-基本使用" aria-hidden="true">#</a> 1.1 基本使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> TimeSeriesSplit
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> GaussianNB

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> ClassificationReport
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_occupancy

<span class="token comment"># Load the classification dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_occupancy<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Specify the target classes</span>
classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;unoccupied&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;occupied&quot;</span><span class="token punctuation">]</span>

<span class="token comment"># Create the training and test data</span>
<span class="token comment"># 建立时序数据</span>
tscv <span class="token operator">=</span> TimeSeriesSplit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> train_index<span class="token punctuation">,</span> test_index <span class="token keyword">in</span> tscv<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>
    X_train<span class="token punctuation">,</span> X_test <span class="token operator">=</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>
    y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>

<span class="token comment"># Instantiate the classification model and visualizer</span>
<span class="token comment"># 建立分类器</span>
model <span class="token operator">=</span> GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># support 表示是否添加support方块格中显示数据。{True，False，None，&#39;percent&#39;，&#39;count&#39;}，默认值：无</span>
<span class="token comment"># support-&#39;percent&#39;表示百分比显示数据，&#39;count&#39;表示按个数显示数据</span>
visualizer <span class="token operator">=</span> ClassificationReport<span class="token punctuation">(</span>model<span class="token punctuation">,</span> classes<span class="token operator">=</span>classes<span class="token punctuation">,</span> support<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>        <span class="token comment"># Fit the visualizer and the model</span>
visualizer<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>        <span class="token comment"># Evaluate the model on the test data</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment"># Finalize and show the figure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/model_selection/_split.py:752: FutureWarning: You should specify a value for &#39;n_splits&#39; instead of relying on the default value. The default value will change from 3 to 5 in version 0.22.
  warnings.warn(NSPLIT_WARNING, FutureWarning)



&lt;Figure size 800x550 with 2 Axes&gt;
</code></pre><p>分类报告以每个类为基础显示主要分类指标的表示形式。 这给了分类器行为比全局精度更深的直观，这可以掩盖多类问题的一类中的功能弱点。 视觉分类报告用于比较分类模型，以选择更“红色”的模型，例如，具有更强的分类度量或更平衡的模型。</p><p>度量标准根据真阳性和假阳性，真阴性和假阴性来定义。在这种情况下，正和负是二元分类问题的类的通用名称。在上面的例子中，我们会考虑真和假被占据和真和假未被占据。因此，真正的正数是当实际类和估计类都是正数时。假阳性是指实际的类是负数，但估计的类是正数。使用这个术语，计量的定义如下:</p><ul><li>精度precision：精确度是分类器不将一个实例标记为正的能力，而实际上是负的。对于每个类，它被定义为真阳性与真阳性和假阳性之和的比率。换句话说，“对于所有被归类为正面的例子，正确的百分比是多少?”</li><li>召回率recall：回忆是分类器找到所有正实例的能力。对于每个类，它被定义为真阳性与真阳性和假阴性之和的比率。换一种说法，“在所有实际是积极的情况下，正确分类的百分比是多少?”</li><li>F1分数：F1的分数是精度和召回率的加权调和平均值，最好的分数是1.0，最差的是0.0。一般来说，F1的分数低于准确性指标，因为它们在计算中嵌入了精度和召回率。作为一个经验法则，应该使用F1的加权平均值来比较分类器模型，而不是全局精度。</li><li>support：支持是类在指定数据集中实际出现的次数。训练数据中的不平衡支持可能表明分类器报告分数中的结构弱点，并可能表明需要分层抽样或再平衡。模型之间的支持不会改变，而是对评估过程进行诊断。</li></ul><h3 id="_1-2-快速使用" tabindex="-1"><a class="header-anchor" href="#_1-2-快速使用" aria-hidden="true">#</a> 1.2 快速使用</h3><p>上面的相同功能可以通过关联的快速方法来实现classification_report。此方法将ClassificationReport使用关联的参数构建对象，将其拟合，然后（可选）立即显示它。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> TimeSeriesSplit
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> GaussianNB

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_occupancy
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> classification_report

<span class="token comment"># Load the classification data set</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_occupancy<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Specify the target classes</span>
classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;unoccupied&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;occupied&quot;</span><span class="token punctuation">]</span>

<span class="token comment"># Create the training and test data</span>
tscv <span class="token operator">=</span> TimeSeriesSplit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> train_index<span class="token punctuation">,</span> test_index <span class="token keyword">in</span> tscv<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>
    X_train<span class="token punctuation">,</span> X_test <span class="token operator">=</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>
    y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>

<span class="token comment"># Instantiate the visualizer</span>
visualizer <span class="token operator">=</span> classification_report<span class="token punctuation">(</span>
    GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> classes<span class="token operator">=</span>classes<span class="token punctuation">,</span> support<span class="token operator">=</span><span class="token boolean">True</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/model_selection/_split.py:752: FutureWarning: You should specify a value for &#39;n_splits&#39; instead of relying on the default value. The default value will change from 3 to 5 in version 0.22.
  warnings.warn(NSPLIT_WARNING, FutureWarning)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_7_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_2-混淆矩阵confusion-matrix" tabindex="-1"><a class="header-anchor" href="#_2-混淆矩阵confusion-matrix" aria-hidden="true">#</a> 2 混淆矩阵Confusion Matrix</h2><p>ConfusionMatrix visualizer是一个ScoreVisualizer，它使用一个合适的scikit学习分类器和一组测试X和y值，并返回一个报告，显示每个测试值预测类与实际类的比较情况。数据科学家使用混淆矩阵来理解哪些类最容易混淆。它们提供的信息与分类报告中提供的信息相似，但它们提供了对单个数据点分类的更深入的了解，而不是顶级分数。</p>`,22),m={href:"http://scikit-learn.org/stable/modules/generated/sklearn.metrics.confusion_matrix.html",target:"_blank",rel:"noopener noreferrer"},v=e(`<table><thead><tr><th>可视化器</th><th>ConfusionMatrix</th></tr></thead><tbody><tr><td>快速使用方法</td><td>confusion_matrix()</td></tr><tr><td>模型</td><td>分类</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><h3 id="_2-1-基础使用" tabindex="-1"><a class="header-anchor" href="#_2-1-基础使用" aria-hidden="true">#</a> 2.1 基础使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_digits
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">as</span> tts
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> ConfusionMatrix

<span class="token comment"># We&#39;ll use the handwritten digits data set from scikit-learn.</span>
<span class="token comment"># Each feature of this dataset is an 8x8 pixel image of a handwritten number.</span>
<span class="token comment"># Digits.data converts these 64 pixels into a single array of features</span>
<span class="token comment">#我们将使用scikit learn中的手写数字数据集。</span>
<span class="token comment">#该数据集的每个特征都是手写数字的8x8像素图像。</span>
<span class="token comment"># Digits.data 将这64个像素转换为一个维度数组</span>
digits <span class="token operator">=</span> load_digits<span class="token punctuation">(</span><span class="token punctuation">)</span>
X <span class="token operator">=</span> digits<span class="token punctuation">.</span>data
y <span class="token operator">=</span> digits<span class="token punctuation">.</span>target

X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> tts<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size <span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">)</span>
X_test<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>y_test<span class="token punctuation">.</span>shape
model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>multi_class<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span> solver<span class="token operator">=</span><span class="token string">&quot;liblinear&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># The ConfusionMatrix visualizer taxes a model</span>
<span class="token comment"># 混淆矩阵分类号</span>
cm <span class="token operator">=</span> ConfusionMatrix<span class="token punctuation">(</span>model<span class="token punctuation">,</span> classes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Fit fits the passed model. This is unnecessary if you pass the visualizer a pre-fitted model</span>
cm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

<span class="token comment"># To create the ConfusionMatrix, we need some test data. Score runs predict() on the data</span>
<span class="token comment"># and then creates the confusion_matrix from scikit-learn.</span>
<span class="token comment">#为了创建ConfusionMatrix，我们需要一些测试数据。对数据执行Score runs predict（）然后从scikit learn创建混淆矩阵。</span>
cm<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>

<span class="token comment"># 图中显示的每一类的个数</span>
cm<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_10_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_2-2-用类名绘图" tabindex="-1"><a class="header-anchor" href="#_2-2-用类名绘图" aria-hidden="true">#</a> 2.2 用类名绘图</h3><p>可以使用label_encoder参数将类名添加到ConfusionMatrix图中。label_编码器可以是sklearn.preprocessing.LabelEncoder（或具有执行映射的反_变换方法的任何对象）或具有编码到字符串映射的dict，如下面的示例所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_iris
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">as</span> tts
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> ConfusionMatrix

iris <span class="token operator">=</span> load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>
X <span class="token operator">=</span> iris<span class="token punctuation">.</span>data
y <span class="token operator">=</span> iris<span class="token punctuation">.</span>target
classes <span class="token operator">=</span> iris<span class="token punctuation">.</span>target_names

X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> tts<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>

model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>multi_class<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span> solver<span class="token operator">=</span><span class="token string">&quot;liblinear&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># percent表示显示百分比</span>
iris_cm <span class="token operator">=</span> ConfusionMatrix<span class="token punctuation">(</span>
    model<span class="token punctuation">,</span> classes<span class="token operator">=</span>classes<span class="token punctuation">,</span>
    label_encoder<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">&#39;setosa&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&#39;versicolor&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;virginica&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>percent <span class="token operator">=</span><span class="token boolean">True</span>
<span class="token punctuation">)</span>

iris_cm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
iris_cm<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>

iris_cm<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_12_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_2-3-快速方法" tabindex="-1"><a class="header-anchor" href="#_2-3-快速方法" aria-hidden="true">#</a> 2.3 快速方法</h3><p>上面的相同功能可以通过关联的快速方法来实现confusion_matrix。此方法将ConfusionMatrix使用关联的参数构建对象，将其拟合，然后（可选）立即显示它。在下面的示例中，我们可以看到如何LogisticRegression有效地对信用数据集建模（提示：请Rank2D检查多重共线性！）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_credit
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> confusion_matrix
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">as</span> tts

<span class="token comment">#Load the classification dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_credit<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#Create the train and test data</span>
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> tts<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>

<span class="token comment"># Instantiate the visualizer with the classification model</span>
confusion_matrix<span class="token punctuation">(</span>
    LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span>
    classes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;not_defaulted&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;defaulted&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to &#39;lbfgs&#39; in 0.22. Specify a solver to silence this warning.
  FutureWarning)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_14_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_3-rocauc" tabindex="-1"><a class="header-anchor" href="#_3-rocauc" aria-hidden="true">#</a> 3 ROCAUC</h2><p>ROCAUC(接受者操作特征/曲线下的面积)图允许用户可视化分类器的敏感性和特异性之间的权衡。接收器工作特性(ROC)是分类器预测质量的度量，它比较和可视化模型的灵敏度和特异度之间的权衡。 绘制ROC曲线时，ROC曲线在Y轴上显示真标签的阳性率，在X轴上显示假标签的阳性率，同时显示全局平均和每个类别的假阳性率。 因此，理想点是图的左上角：假阳性为0，真阳性为1。</p><p>这就引出了另一个度量，曲线下面积(AUC)，它是假阳性和真阳性之间关系的计算。AUC越高，模型通常越好。然而，检查曲线的“陡度”也很重要，因为这描述了真实阳性率的最大化，同时使假阳性率最小化。</p>`,16),b={href:"https://segmentfault.com/a/1190000016686335",target:"_blank",rel:"noopener noreferrer"},h=e(`<table><thead><tr><th>可视化器</th><th>ROCAUC</th></tr></thead><tbody><tr><td>快速使用方法</td><td>roc_auc()</td></tr><tr><td>模型</td><td>分类</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><h3 id="_3-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-1-基本使用" aria-hidden="true">#</a> 3.1 基本使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> ROCAUC
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_spam

<span class="token comment"># Load the classification dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_spam<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Create the training and test data</span>
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># Instantiate the visualizer with the classification model</span>
<span class="token comment"># 初始分类器</span>
model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>multi_class<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span> solver<span class="token operator">=</span><span class="token string">&quot;liblinear&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 绘制ROCAUC</span>
visualizer <span class="token operator">=</span> ROCAUC<span class="token punctuation">(</span>model<span class="token punctuation">,</span> classes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;not_spam&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;is_spam&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>        <span class="token comment"># Fit the training data to the visualizer</span>
visualizer<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>        <span class="token comment"># Evaluate the model on the test data</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment"># Finalize and show the figure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_17_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_3-2-多类别rocauc曲线" tabindex="-1"><a class="header-anchor" href="#_3-2-多类别rocauc曲线" aria-hidden="true">#</a> 3.2 多类别ROCAUC曲线</h3>`,5),_={href:"https://blog.csdn.net/u010551621/article/details/469075750",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> RidgeClassifier
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> OrdinalEncoder<span class="token punctuation">,</span> LabelEncoder

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> ROCAUC
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_game

<span class="token comment"># Load multi-class classification dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_game<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Encode the non-numeric columns</span>
X <span class="token operator">=</span> OrdinalEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
y <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span>

<span class="token comment"># Create the train and test data</span>
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># Instaniate the classification model and visualizer</span>
model <span class="token operator">=</span> RidgeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 多类</span>
visualizer <span class="token operator">=</span> ROCAUC<span class="token punctuation">(</span>model<span class="token punctuation">,</span> classes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;win&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;loss&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;draw&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>        <span class="token comment"># Fit the training data to the visualizer</span>
visualizer<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>        <span class="token comment"># Evaluate the model on the test data</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment"># Finalize and render the figure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_19_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>默认情况下，在使用多类ROCAUC可视化工具时，除了每个类的微观和宏观平均曲线外，还绘制了每个类的曲线。这使用户可以按类别检查敏感性和特异性之间的权衡。请注意，对于multi-class ROCAUC，必须至少将micro，macro或per_class参数之一设置为True（默认情况下，所有参数都设置为True）。</p><h3 id="_3-3-快速方法" tabindex="-1"><a class="header-anchor" href="#_3-3-快速方法" aria-hidden="true">#</a> 3.3 快速方法</h3><p>上面的相同功能可以通过关联的快速方法来实现roc_auc。此方法将ROCAUC使用关联的参数构建对象，将其拟合，然后（可选）立即显示它</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier<span class="token punctuation">.</span>rocauc <span class="token keyword">import</span> roc_auc
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_credit
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split

<span class="token comment">#Load the classification dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_credit<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#Create the train and test data</span>
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span>

<span class="token comment"># Instantiate the visualizer with the classification model</span>
model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>
roc_auc<span class="token punctuation">(</span>model<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> X_test<span class="token operator">=</span>X_test<span class="token punctuation">,</span> y_test<span class="token operator">=</span>y_test<span class="token punctuation">,</span> classes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;not_defaulted&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;defaulted&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to &#39;lbfgs&#39; in 0.22. Specify a solver to silence this warning.
  FutureWarning)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_22_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_4-precision-recall曲线" tabindex="-1"><a class="header-anchor" href="#_4-precision-recall曲线" aria-hidden="true">#</a> 4 Precision-Recall曲线</h2>`,9),g={href:"https://scikit-learn.org/stable/auto_examples/model_selection/plot_precision_recall.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<table><thead><tr><th>可视化器</th><th>PrecisionRecallCurve</th></tr></thead><tbody><tr><td>快速使用方法</td><td>precision_recall_curve()</td></tr><tr><td>模型</td><td>分类</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><h3 id="_4-1-二分类" tabindex="-1"><a class="header-anchor" href="#_4-1-二分类" aria-hidden="true">#</a> 4.1 二分类</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> RidgeClassifier
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">as</span> tts
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> PrecisionRecallCurve
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_spam

<span class="token comment"># Load the dataset and split into train/test splits</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_spam<span class="token punctuation">(</span><span class="token punctuation">)</span>

X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> tts<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># Create the visualizer, fit, score, and show it</span>
viz <span class="token operator">=</span> PrecisionRecallCurve<span class="token punctuation">(</span>RidgeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_25_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>精确召回曲线的基本情况是二进制分类情况，这种情况也是最直观的解释。在上图中，我们可以看到y轴上的精度相对于x轴上的召回率。填充区域越大，分类器越强。红线表示平均精度，它是整个图的汇总，计算为在每个阈值处获得的精度的加权平均值，因此权重是与前一个阈值的召回率之差。</p><h3 id="_4-2-多标签分类" tabindex="-1"><a class="header-anchor" href="#_4-2-多标签分类" aria-hidden="true">#</a> 4.2 多标签分类</h3><p>为了支持多标签分类，将估计器包装在OneVsRestClassifier中，以针对每个类生成二进制比较（例如，正例是该类，而负例是任何其他类）。然后，将Precision-Recall曲线计算为所有类别的精度和召回率的平均值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token punctuation">,</span> OrdinalEncoder
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">as</span> tts
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> PrecisionRecallCurve
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_game

<span class="token comment"># Load dataset and encode categorical variables</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_game<span class="token punctuation">(</span><span class="token punctuation">)</span>
X <span class="token operator">=</span> OrdinalEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
y <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span>

X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> tts<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># Create the visualizer, fit, score, and show it</span>
viz <span class="token operator">=</span> PrecisionRecallCurve<span class="token punctuation">(</span>RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_28_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>然而，可以计算出更复杂的精确召回曲线，单独显示每条曲线以及F1分数等参曲线（例如，显示不同F1分数的精确度和召回率之间的关系）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token punctuation">,</span> OrdinalEncoder
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">as</span> tts
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> PrecisionRecallCurve
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_game

<span class="token comment"># Load dataset and encode categorical variables</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_game<span class="token punctuation">(</span><span class="token punctuation">)</span>
X <span class="token operator">=</span> OrdinalEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span>

X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> tts<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># Create the visualizer, fit, score, and show it</span>
viz <span class="token operator">=</span> PrecisionRecallCurve<span class="token punctuation">(</span>
    MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> per_class<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> iso_f1_curves<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    fill_area<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> micro<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> classes<span class="token operator">=</span>encoder<span class="token punctuation">.</span>classes_
<span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_30_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_4-3-快速方法" tabindex="-1"><a class="header-anchor" href="#_4-3-快速方法" aria-hidden="true">#</a> 4.3 快速方法</h3><p>使用关联的快速方法，可以在一行中实现与上述类似的功能precision_recall_curve。此方法将实例化PrecisionRecallCurve可视化程序并将其适合于训练数据，然后将其在可选提供的测试数据（或未提供的训练数据）上评分。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder<span class="token punctuation">,</span> OrdinalEncoder
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">as</span> tts
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> PrecisionRecallCurve
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_game

<span class="token comment"># Load dataset and encode categorical variables</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_game<span class="token punctuation">(</span><span class="token punctuation">)</span>
X <span class="token operator">=</span> OrdinalEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
encoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> encoder<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y<span class="token punctuation">)</span>

X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> tts<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># Create the visualizer, fit, score, and show it</span>
viz <span class="token operator">=</span> PrecisionRecallCurve<span class="token punctuation">(</span>
    MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> per_class<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> iso_f1_curves<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    fill_area<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> micro<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> classes<span class="token operator">=</span>encoder<span class="token punctuation">.</span>classes_
<span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>
viz<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_32_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_5-类平衡" tabindex="-1"><a class="header-anchor" href="#_5-类平衡" aria-hidden="true">#</a> 5 类平衡</h2><p>分类模型面临的最大挑战之一是训练数据中类的不平衡。 严重的类别失衡可能会被相对较好的F1和准确性分数所掩盖-分类器只是猜测多数类别，而不对代表不足的类别进行任何评估。有几种处理类不平衡的技术，如分层抽样、对多数类进行下采样、加权等。但是在采取这些操作之前，了解训练数据中的类平衡是很重要的。 ClassBalance可视化工具通过创建每个类的支持条形图(即类在数据集中的表示频率)来支持这一点。</p><table><thead><tr><th>可视化器</th><th>ClassBalance</th></tr></thead><tbody><tr><td>快速使用方法</td><td>class_balance()</td></tr><tr><td>模型</td><td>分类</td></tr><tr><td>工作流程</td><td>特征分析，目标分析，模型选择</td></tr></tbody></table><h3 id="_5-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_5-1-基本使用" aria-hidden="true">#</a> 5.1 基本使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_game
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>target <span class="token keyword">import</span> ClassBalance

<span class="token comment"># Load the classification dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_game<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Instantiate the visualizer</span>
visualizer <span class="token operator">=</span> ClassBalance<span class="token punctuation">(</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;draw&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;loss&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;win&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token comment"># Fit the data to the visualizer</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment"># Finalize and render the figure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_35_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>由此得到的数字使我们能够诊断平衡问题的严重性。在这个图中，我们可以看到“赢”类在其他两个类中占主导地位。一个潜在的解决方案可能是创建一个二进制分类器：“win”vs“not win”，并将“loss”和“draw”类组合成一个类。</p><p>如果在评估过程中必须保持班级不平衡（例如，被分类的事件实际上与频率所暗示的一样罕见），则应使用分层抽样来创建训练和测试拆分。 这样可以确保测试数据的类别与培训数据的比例大致相同。 虽然scikit-learn默认在train_test_split和其他cv方法中执行此操作，但比较两个拆分中每个类的支持可能很有用。</p><p>ClassBalance可视化器具有“比较”模式，可以将训练和测试数据传递到fit（），从而创建并排的条形图，而不是单个条形图，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> TimeSeriesSplit

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_occupancy
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>target <span class="token keyword">import</span> ClassBalance

<span class="token comment"># Load the classification dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_occupancy<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Create the training and test data</span>
tscv <span class="token operator">=</span> TimeSeriesSplit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> train_index<span class="token punctuation">,</span> test_index <span class="token keyword">in</span> tscv<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>
    X_train<span class="token punctuation">,</span> X_test <span class="token operator">=</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>
    y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>

<span class="token comment"># Instantiate the visualizer</span>
visualizer <span class="token operator">=</span> ClassBalance<span class="token punctuation">(</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;unoccupied&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;occupied&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>        <span class="token comment"># Fit the data to the visualizer</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/model_selection/_split.py:752: FutureWarning: You should specify a value for &#39;n_splits&#39; instead of relying on the default value. The default value will change from 3 to 5 in version 0.22.
  warnings.warn(NSPLIT_WARNING, FutureWarning)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_37_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>该可视化使我们能够进行快速检查，以确保两个拆分中每个类的比例大致相似。这种可视化应该是第一站，尤其是当评估指标在不同拆分之间变化很大时。</p><h3 id="_5-2-快速方法" tabindex="-1"><a class="header-anchor" href="#_5-2-快速方法" aria-hidden="true">#</a> 5.2 快速方法</h3><p>上面的相同功能可以通过关联的快速方法class_balance来实现。此方法将ClassBalance使用关联的参数构建对象，将其拟合，然后（可选）立即显示它。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_game
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>target <span class="token keyword">import</span> class_balance

<span class="token comment"># Load the dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_game<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Use the quick method and immediately show the figure</span>
class_balance<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_40_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_6-类预测错误" tabindex="-1"><a class="header-anchor" href="#_6-类预测错误" aria-hidden="true">#</a> 6 类预测错误</h2><p>Yellowbrick的ClassPredictionError图是对其他分类模型诊断工具(比如混淆矩阵和分类报告)的扭曲。与分类报告一样，这个图以堆叠条形图的形式显示了拟合分类模型中每个类的支持度(训练样本的数量)。每个条被分割以显示每个类的预测比例(包括假阴性和假阳性，如混淆矩阵)。您可以使用ClassPredictionError来可视化您的分类器遇到了哪些特别困难的类，更重要的是，在每个类的基础上它给出了哪些不正确的答案。这通常可以使您更好地理解不同模型的优缺点以及数据集特有的特殊挑战。 类预测误差图提供了一种快速了解分类器预测正确类的能力的方法。</p><table><thead><tr><th>可视化器</th><th>ClassPredictionError</th></tr></thead><tbody><tr><td>快速使用方法</td><td>class_prediction_error()</td></tr><tr><td>模型</td><td>分类</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><h3 id="_6-1-基础使用" tabindex="-1"><a class="header-anchor" href="#_6-1-基础使用" aria-hidden="true">#</a> 6.1 基础使用</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> make_classification
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> ClassPredictionError


<span class="token comment"># Create classification dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> make_classification<span class="token punctuation">(</span>
    n_samples<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> n_classes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> n_informative<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> n_clusters_per_class<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>
    random_state<span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pear&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">]</span>

<span class="token comment"># Perform 80/20 training/test split</span>
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.20</span><span class="token punctuation">,</span>
                                                    random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>
<span class="token comment"># Instantiate the classification model and visualizer</span>
visualizer <span class="token operator">=</span> ClassPredictionError<span class="token punctuation">(</span>
    RandomForestClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> classes<span class="token operator">=</span>classes
<span class="token punctuation">)</span>

<span class="token comment"># Fit the training data to the visualizer</span>
visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

<span class="token comment"># Evaluate the model on the test data</span>
visualizer<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>

<span class="token comment"># Draw visualization</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_43_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>在上面的例子中，虽然RandomForestClassifier似乎很擅长根据水果的特征正确地预测苹果，但它经常错误地将梨标记为猕猴桃，而将猕猴桃错误地标记为香蕉。</p><p>相比之下，在下面的例子中，RandomForestClassifier在正确预测默认情况下的账户方面做得很好，但在预测账户持有人是否保持了账单的流动方面，就有点像抛硬币一样困难。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> ClassPredictionError
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_credit

X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_credit<span class="token punctuation">(</span><span class="token punctuation">)</span>

classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;account in default&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;current with bills&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># Perform 80/20 training/test split</span>
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.20</span><span class="token punctuation">,</span>
                                                    random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># Instantiate the classification model and visualizer</span>
visualizer <span class="token operator">=</span> ClassPredictionError<span class="token punctuation">(</span>
    RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> classes<span class="token operator">=</span>classes
<span class="token punctuation">)</span>

<span class="token comment"># Fit the training data to the visualizer</span>
visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

<span class="token comment"># Evaluate the model on the test data</span>
visualizer<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>

<span class="token comment"># Draw visualization</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_45_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h3 id="_6-2-快速方法" tabindex="-1"><a class="header-anchor" href="#_6-2-快速方法" aria-hidden="true">#</a> 6.2 快速方法</h3><p>使用关联的快速方法，可以在一行中实现与上述类似的功能class_prediction_error。此方法将实例化ClassPredictionError可视化程序并将其适合于训练数据，然后将其在可选提供的测试数据（或未提供的训练数据）上评分。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> LinearSVC
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">as</span> tts
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> class_prediction_error
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_occupancy

<span class="token comment"># Load the dataset and split into train/test splits</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_occupancy<span class="token punctuation">(</span><span class="token punctuation">)</span>
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> tts<span class="token punctuation">(</span>
    X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span>
<span class="token punctuation">)</span>

class_prediction_error<span class="token punctuation">(</span>
    LinearSVC<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span>
    classes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;vacant&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;occupied&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/svm/base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.
  &quot;the number of iterations.&quot;, ConvergenceWarning)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_47_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_7-辨别阈值" tabindex="-1"><a class="header-anchor" href="#_7-辨别阈值" aria-hidden="true">#</a> 7 辨别阈值</h2><p>相对于二分类器的识别阈值，对精度、召回率、f1得分和队列率进行可视化。辨别阈值是选择正类而不是负类的概率或得分。通常，这个值设置为50%，但是可以调整阈值，以增加或减少对误报或其他应用因素的敏感性。(该可视化工具仅适用于二进制分类。)</p><table><thead><tr><th>可视化器</th><th>discriminationThreshold</th></tr></thead><tbody><tr><td>快速使用方法</td><td>discrimination_threshold()</td></tr><tr><td>模型</td><td>分类</td></tr><tr><td>工作流程</td><td>模型评估</td></tr></tbody></table><h3 id="_7-1-判别阈值" tabindex="-1"><a class="header-anchor" href="#_7-1-判别阈值" aria-hidden="true">#</a> 7.1 判别阈值</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression

<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier <span class="token keyword">import</span> DiscriminationThreshold
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_spam

<span class="token comment"># Load a binary classification dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_spam<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Instantiate the classification model and visualizer</span>
model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>multi_class<span class="token operator">=</span><span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span> solver<span class="token operator">=</span><span class="token string">&quot;liblinear&quot;</span><span class="token punctuation">)</span>
visualizer <span class="token operator">=</span> DiscriminationThreshold<span class="token punctuation">(</span>model<span class="token punctuation">)</span>

visualizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token comment"># Fit the data to the visualizer</span>
visualizer<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment"># Finalize and render the figure</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/svm/base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.
  &quot;the number of iterations.&quot;, ConvergenceWarning)
/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/svm/base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.
  &quot;the number of iterations.&quot;, ConvergenceWarning)
/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/sklearn/svm/base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.
  &quot;the number of iterations.&quot;, ConvergenceWarning)
</code></pre><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_50_1.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><p>二进制分类算法的一种常见用法是使用它们产生的分数或概率来确定需要特殊处理的案例。例如，防欺诈应用程序可能使用分类算法来确定交易是否可能是欺诈性的，是否需要详细调查。在上图中，我们提供了一个示例，其中二进制分类器确定电子邮件是“垃圾邮件”（肯定的情况）还是“非垃圾邮件”（否定的情况）。被检测为垃圾邮件的电子邮件将移至隐藏文件夹，并最终被删除。</p><p>许多分类器使用Decision_function对阳性分类评分，或使用predict_proba函数计算阳性分类的概率。 如果分数或概率大于某个判别阈值，则选择肯定类别，否则选择否定类别。</p><p>一般来说，阈值在案例之间是平衡的，并设置为0.5或50%的概率。但是，这个阈值可能不是最优阈值:对于一个辨别阈值，精度和召回率之间通常存在反向关系。通过调整分类器的阈值，可以将F1得分(精度和召回率的调和平均值)调整为可能的最佳匹配，或者调整分类器以使其行为最适合特定应用程序。分类器是通过考虑以下指标来调整的:</p><ul><li>精度：精度的提高降低了误报的数量;当特殊处理的成本很高(例如，在防止欺诈或丢失重要电子邮件上浪费时间)时，应该优化这个度量。</li><li>召回率：召回率的增加降低漏掉阳性类别的可能性；在至关重要的情况下，即使以更多的误报为代价，也应该优化此指标。</li><li>F1得分：F1得分为precision和recall之间的调和平均值。fbeta参数确定计算此度量时精度和召回率的相对权重，默认设置为1或F1。优化此度量可以在精确度和召回率之间取得最佳平衡。</li><li>排队率：“队列”是垃圾邮件文件夹或欺诈调查台的收件箱。 该指标描述了必须检查的实例的百分比。 如果审核的成本很高（例如预防欺诈），则必须在业务需求方面将其降至最低； 如果没有（例如垃圾邮件过滤器），则可以对其进行优化以确保收件箱保持整洁。</li></ul><p>在上图中，我们看到可视化器已调整为寻找最佳F1分数，该分数标注为阈值0.43。 为了考虑模型相对于度量的变化（显示为中值曲线周围的填充区域），模型在多个训练/测试拆分中多次运行。</p><h3 id="_7-2-快速方法" tabindex="-1"><a class="header-anchor" href="#_7-2-快速方法" aria-hidden="true">#</a> 7.2 快速方法</h3><p>上面的相同功能可以通过关联的快速方法来实现discrimination_threshold。此方法将DiscriminationThreshold使用关联的参数构建对象，将其拟合，然后（可选）立即显示它.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>classifier<span class="token punctuation">.</span>threshold <span class="token keyword">import</span> discrimination_threshold
<span class="token keyword">from</span> yellowbrick<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_occupancy
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token comment">#Load the classification dataset</span>
X<span class="token punctuation">,</span> y <span class="token operator">=</span> load_occupancy<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Instantiate the visualizer with the classification model</span>
model <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment"># exclude设定不显示的指标</span>
<span class="token comment"># argmax阈值评价的指标，可选&#39;precision&#39;,&#39;recall&#39;,&#39;fscore&#39;,None,默认&#39;f1score&#39;</span>
discrimination_threshold<span class="token punctuation">(</span>model<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span>exclude<span class="token operator">=</span><span class="token string">&#39;queue_rate&#39;</span><span class="token punctuation">,</span> argmax<span class="token operator">=</span><span class="token string">&#39;precision&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/luohenyueji/article_picture_warehouse/-/raw/main/CSDN/[机器学习] Yellowbrick使用笔记6-分类可视化/output_53_0.png" alt="png" tabindex="0" loading="lazy"><figcaption>png</figcaption></figure><h2 id="_8-参考" tabindex="-1"><a class="header-anchor" href="#_8-参考" aria-hidden="true">#</a> 8 参考</h2>`,65),w={href:"https://www.scikit-yb.org/en/latest/api/classifier/confusion_matrix.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.scikit-yb.org/en/latest/api/classifier/classification_report.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.scikit-yb.org/en/latest/api/classifier/rocauc.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.scikit-yb.org/en/latest/api/classifier/prcurve.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.scikit-yb.org/en/latest/api/target/class_balance.html",target:"_blank",rel:"noopener noreferrer"},X={href:"https://www.scikit-yb.org/en/latest/api/classifier/class_prediction_error.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://www.scikit-yb.org/en/latest/api/classifier/threshold.html",target:"_blank",rel:"noopener noreferrer"};function F(L,S){const a=o("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[s("分类模型试图在一个离散的空间中预测一个目标，即为一个因变量实例分配一个或多个类别。 "),n("a",u,[d,t(a)])]),k,n("p",null,[s("下面是一些使用ConfusionMatrix可视化工具的示例；更多信息可以通过查看"),n("a",m,[s("scikit learn文档"),t(a)]),s("来找到。")]),v,n("p",null,[s("关于ROC和AUC可以查看"),n("a",b,[s("https://segmentfault.com/a/1190000016686335"),t(a)])]),h,n("p",null,[s("Yellowbrick的ROCAUC可视化工具允许绘制多类分类曲线。ROC曲线通常用于二值分类，而事实上Scikit-Learn roc_curve度量仅能对二值分类器进行度量。Yellowbrick通过对输出进行二进制化(每个类)或使用one vs-rest(micro score)或one vs-all(macro score)分类策略来解决这个问题。关于one vs-rest(micro score)或one vs-all(macro score)解释见"),n("a",_,[s("https://blog.csdn.net/u010551621/article/details/46907575"),t(a)])]),y,n("p",null,[s("精确召回曲线是用来评估分类器质量的指标，特别是在分类非常不平衡的情况下。 精度-召回曲线显示了精度(衡量结果相关性)和召回率(衡量返回多少相关结果)之间的权衡。 曲线下面的大区域代表高-召回率和精确度，这是分类器的最佳情况，显示了为其选择的大多数类别返回准确结果的模型。 关于 Precision-Recall具体可以参考"),n("a",g,[s("https://scikit-learn.org/stable/auto_examples/model_selection/plot_precision_recall.html"),t(a)])]),f,n("ul",null,[n("li",null,[n("a",w,[s("https://www.scikit-yb.org/en/latest/api/classifier/confusion_matrix.html"),t(a)])]),n("li",null,[n("a",q,[s("https://www.scikit-yb.org/en/latest/api/classifier/classification_report.html"),t(a)])]),n("li",null,[n("a",C,[s("https://www.scikit-yb.org/en/latest/api/classifier/rocauc.html"),t(a)])]),n("li",null,[n("a",x,[s("https://www.scikit-yb.org/en/latest/api/classifier/prcurve.html"),t(a)])]),n("li",null,[n("a",z,[s("https://www.scikit-yb.org/en/latest/api/target/class_balance.html"),t(a)])]),n("li",null,[n("a",X,[s("https://www.scikit-yb.org/en/latest/api/classifier/class_prediction_error.html"),t(a)])]),n("li",null,[n("a",R,[s("https://www.scikit-yb.org/en/latest/api/classifier/threshold.html"),t(a)])])])])}const T=i(l,[["render",F],["__file","2020-07-25-_机器学习_ Yellowbrick使用笔记6-分类可视化.html.vue"]]);export{T as default};
